/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ 766:
/***/ ((__unused_webpack_module, exports) => {

"use strict";
var __webpack_unused_export__;

__webpack_unused_export__ = true;
var EventHandler = /** @class */ (function () {
    function EventHandler() {
        this.events = [];
    }
    EventHandler.prototype.register = function (el, event, listener) {
        if (!el || !event || !listener)
            return null;
        this.events.push({ el: el, event: event, listener: listener });
        el.addEventListener(event, listener);
        return { el: el, event: event, listener: listener };
    };
    EventHandler.prototype.unregister = function (_a) {
        var el = _a.el, event = _a.event, listener = _a.listener;
        if (!el || !event || !listener)
            return null;
        this.events = this.events.filter(function (e) { return el !== e.el
            || event !== e.event || listener !== e.listener; });
        el.removeEventListener(event, listener);
        return { el: el, event: event, listener: listener };
    };
    EventHandler.prototype.unregisterAll = function () {
        this.events.forEach(function (_a) {
            var el = _a.el, event = _a.event, listener = _a.listener;
            return el.removeEventListener(event, listener);
        });
        this.events = [];
    };
    return EventHandler;
}());
exports.Z = EventHandler;


/***/ }),

/***/ 722:
/***/ (() => {

class VariantSelection extends HTMLElement {
  static get observedAttributes() {
    return ['variant'];
  }

  constructor() {
    super();
    this._loaded = false;
    this._productFetcher = Promise.resolve(false);

    this._onMainElChange = event => {
      this.variant = event.currentTarget.value;
    };

    const mainInputEl = this.querySelector('input[data-variants]');
    this._mainEl = mainInputEl || this.querySelector('select[data-variants]');
  }

  set variant(value) {
    if (value) {
      this.setAttribute('variant', value);
    } else {
      this.removeAttribute('variant');
    }
  }

  get variant() {
    return this.getAttribute('variant');
  }

  connectedCallback() {
    this._productFetcher = this._fetchProduct();
    const mainInputEl = this.querySelector('input[data-variants]');
    this._mainEl = mainInputEl || this.querySelector('select[data-variants]');

    this._mainEl.addEventListener('change', this._onMainElChange);

    this.variant = this._mainEl.value;
  }

  disconnectedCallback() {
    this._mainEl.removeEventListener('change', this._onMainElChange);

    this._mainEl = null;
  }

  attributeChangedCallback(name, oldValue, newValue) {
    if (oldValue === newValue) return;

    switch (name) {
      case 'variant':
        this._changeVariant(newValue);

        break;
    }
  }

  getProduct() {
    return this._loaded ? Promise.resolve(this._product) : this._productFetcher;
  }

  getVariant() {
    return this.getProduct().then(product => product ? product.variants.find(v => v.id.toString() === this.variant) || false : false).catch(() => false);
  }

  getState() {
    return this.getVariant().then(variant => variant ? 'selected' : this.getAttribute('variant'));
  }

  _changeVariant(value) {
    this._dispatchEvent(value).then(() => {
      this._mainEl.value = value;
    });
  }

  _fetchProduct() {
    return fetch(this.getAttribute('product-url')).then(response => response.json()).then(product => {
      this._product = product;
      return product;
    }).catch(() => {
      this._product = null;
    }).finally(() => {
      this._loaded = true;
    });
  }

  _dispatchEvent(value) {
    return this.getProduct().then(product => {
      const variant = product ? product.variants.find(v => v.id.toString() === value) || false : false;
      const state = variant ? 'selected' : value;
      const event = new CustomEvent('variant-change', {
        detail: {
          product,
          variant,
          state
        }
      });
      this.dispatchEvent(event);
    });
  }

}

const valueElementType = {
  select: 'option',
  radio: 'input[type="radio"]'
};

function setSelectedOptions(selectOptions, radioOptions, selectedOptions) {
  selectOptions.forEach(({
    option
  }) => {
    option.value = selectedOptions[parseInt(option.dataset.variantOptionIndex, 10)];
  });
  radioOptions.forEach(({
    values
  }) => {
    values.forEach(value => {
      value.checked = value.value === selectedOptions[parseInt(value.dataset.variantOptionValueIndex, 10)];
    });
  });
}

function getOptions(optionsEls) {
  const select = [];
  const radio = [];

  for (let i = 0; i < optionsEls.length; i++) {
    const optionEl = optionsEls[i];
    const wrappers = optionEl.matches('[data-variant-option-value-wrapper]') ? [optionEl] : Array.prototype.slice.call(optionEl.querySelectorAll('[data-variant-option-value-wrapper]'));
    const values = optionEl.matches('[data-variant-option-value]') ? [optionEl] : Array.prototype.slice.call(optionEl.querySelectorAll('[data-variant-option-value]'));
    if (!values.length) break;
    const option = {
      option: optionEl,
      wrappers,
      values
    };

    if (values[0].matches(valueElementType.select)) {
      select.push(option);
    } else if (values[0].matches(valueElementType.radio)) {
      radio.push(option);
    }
  }

  return {
    select,
    radio
  };
}

function getSelectedOptions(product, selectOptions, radioOptions) {
  const options = product.options.map(() => 'not-selected');
  selectOptions.forEach(({
    option
  }) => {
    if (option.value !== 'not-selected') {
      options[parseInt(option.dataset.variantOptionIndex, 10)] = option.value;
    }
  });
  radioOptions.forEach(({
    values
  }) => {
    values.forEach(value => {
      if (value.checked) {
        options[parseInt(value.dataset.variantOptionValueIndex, 10)] = value.value;
      }
    });
  });
  return options;
}

function getVariantFromSelectedOptions(variants, selectedOptions) {
  for (let i = 0; i < variants.length; i++) {
    const variant = variants[i];
    const isVariant = variant.options.every((option, index) => option === selectedOptions[index]);
    if (isVariant) return variant; // We found the variant
  }

  return false;
}

function _getVariant(variants, options) {
  return variants.find(variant => variant.options.every((option, index) => option === options[index]));
}

function _setOptionsMap(product, selectedOptions, optionsMap, option1, option2 = null, option3 = null) {
  const updatedOptionsMap = { ...optionsMap
  };
  const options = [option1, option2, option3].filter(option => !!option);

  const variant = _getVariant(product.variants, options);

  const variantOptionMatches = options.filter((option, index) => option === selectedOptions[index]).length;
  const isCurrentVariant = variantOptionMatches === product.options.length;
  const isNeighbor = variantOptionMatches === product.options.length - 1;

  for (let i = 0; i < options.length; i++) {
    const option = options[i];

    if (option) {
      let {
        setByCurrentVariant,
        setByNeighbor,
        accessible,
        available
      } = optionsMap[i][option];

      if (variant) {
        accessible = variant.available || accessible; // The current variant is always
        // the priority for option availability

        if (isCurrentVariant) {
          setByCurrentVariant = true;
          ({
            available
          } = variant);
        } else if (!setByCurrentVariant && isNeighbor) {
          // If the variant is a neighbor
          // And the option doesn't belong to the variant
          // Use its availability information for the option
          // If multiple neighbors exist, prefer true
          available = setByNeighbor ? available || variant.available : variant.available;
          setByNeighbor = true;
        }
      } else if (isCurrentVariant) {
        // Catch case where current variant doesn't exist
        // Ensure availability is false
        setByCurrentVariant = true;
        available = false;
      } else if (!setByCurrentVariant && isNeighbor) {
        // Catch case where neighbor doesn't exist
        // Ensure availability is false
        // If multiple neighbors exist, prefer true
        available = setByNeighbor ? available : false;
        setByNeighbor = true;
      } // If the option isn't set by either
      // the current variant or a neighbor
      // default to general accessibility


      if (!setByCurrentVariant && !setByNeighbor) {
        available = accessible;
      }

      updatedOptionsMap[i][option] = {
        setByCurrentVariant,
        setByNeighbor,
        accessible,
        available
      };
    }
  }

  return updatedOptionsMap;
}

function getOptionsAccessibility(product, selectedOptions) {
  let optionsMap = product.options.map(() => ({}));

  for (let i = 0; i < product.options.length; i++) {
    for (let j = 0; j < product.variants.length; j++) {
      const variant = product.variants[j];
      const option = variant.options[i];
      optionsMap[i][option] = {
        setByCurrentVariant: false,
        setByNeighbor: false,
        accessible: false,
        available: false
      };
    }
  }

  const option1Values = optionsMap.length >= 1 ? Object.keys(optionsMap[0]) : [];
  const option2Values = optionsMap.length >= 2 ? Object.keys(optionsMap[1]) : [];
  const option3Values = optionsMap.length >= 3 ? Object.keys(optionsMap[2]) : [];
  option1Values.forEach(option1Value => {
    option2Values.forEach(option2Value => {
      option3Values.forEach(option3Value => {
        optionsMap = _setOptionsMap(product, selectedOptions, optionsMap, option1Value, option2Value, option3Value);
      });

      if (!option3Values.length) {
        optionsMap = _setOptionsMap(product, selectedOptions, optionsMap, option1Value, option2Value);
      }
    });

    if (!option2Values.length) {
      optionsMap = _setOptionsMap(product, selectedOptions, optionsMap, option1Value);
    }
  });
  return optionsMap;
}

function updateOptions(product, selectOptions, radioOptions, selectedOptions, disableUnavailableOptions, removeUnavailableOptions) {
  const options = [...selectOptions, ...radioOptions];

  if (options.length === 0) {
    return;
  }

  const optionsAccessibility = getOptionsAccessibility(product, selectedOptions); // Iterate over each option type

  for (let i = 0; i < product.options.length; i++) {
    // Corresponding select dropdown, if it exists
    const optionValues = options.find(({
      option
    }) => {
      if (parseInt(option.dataset.variantOptionIndex, 10) === i) {
        return true;
      }

      return false;
    });

    if (optionValues) {
      const fragment = document.createDocumentFragment();
      const {
        option,
        wrappers,
        values
      } = optionValues;

      for (let j = values.length - 1; j >= 0; j--) {
        const wrapper = wrappers[j];
        const optionValue = values[j];
        const {
          value
        } = optionValue;
        const {
          available
        } = value in optionsAccessibility[i] ? optionsAccessibility[i][value] : false;
        const {
          accessible
        } = value in optionsAccessibility[i] ? optionsAccessibility[i][value] : false;
        const isChooseOption = value === 'not-selected'; // Option element to indicate unchosen option
        // Disable unavailable options

        optionValue.disabled = isChooseOption || disableUnavailableOptions && !accessible;
        optionValue.dataset.variantOptionAccessible = accessible;
        optionValue.dataset.variantOptionAvailable = available;

        if (!removeUnavailableOptions || accessible || isChooseOption) {
          fragment.insertBefore(wrapper, fragment.firstElementChild);
        }
      }

      option.innerHTML = '';
      option.appendChild(fragment);
      const chosenValue = values.find(value => value.selected || value.checked);
      option.dataset.variantOptionChosenValue = chosenValue && chosenValue.value !== 'not-selected' ? chosenValue.value : false;
    }
  }
}

class OptionsSelection extends HTMLElement {
  static get observedAttributes() {
    return ['variant-selection', 'disable-unavailable', 'remove-unavailable'];
  }

  static synchronize(mainOptionsSelection) {
    const mainVariantSelection = mainOptionsSelection.getVariantSelection(); // Fast return if we aren't associated with a variant selection

    if (!mainVariantSelection) return Promise.resolve(false);
    return mainOptionsSelection.getSelectedOptions().then(selectedOptions => {
      // Update all other options selects associated with the same variant ui
      const optionsSelections = document.querySelectorAll('options-selection');
      optionsSelections.forEach(optionsSelection => {
        if (optionsSelection !== mainOptionsSelection && optionsSelection.getVariantSelection() === mainVariantSelection) {
          optionsSelection.setSelectedOptions(selectedOptions);
        }
      });
    }).then(() => true);
  }

  constructor() {
    super();
    this.style.display = '';
    this._events = [];
    this._onChangeFn = this._onOptionChange.bind(this);
    this._optionsEls = this.querySelectorAll('[data-variant-option]');
    ({
      select: this._selectOptions,
      radio: this._radioOptions
    } = getOptions(this._optionsEls));

    this._associateVariantSelection(this.getAttribute('variant-selection'));
  }

  set variantSelection(value) {
    if (value) {
      this.setAttribute('variant-selection', value);
    } else {
      this.removeAttribute('variant-selection');
    }
  }

  get variantSelection() {
    return this.getAttribute('variant-selection');
  }

  connectedCallback() {
    this._optionsEls = this.querySelectorAll('[data-variant-option]');
    ({
      select: this._selectOptions,
      radio: this._radioOptions
    } = getOptions(this._optionsEls));

    this._associateVariantSelection(this.getAttribute('variant-selection'));

    this._selectOptions.forEach(({
      option
    }) => {
      option.addEventListener('change', this._onChangeFn);

      this._events.push({
        el: option,
        fn: this._onChangeFn
      });
    });

    this._radioOptions.forEach(({
      values
    }) => {
      values.forEach(value => {
        value.addEventListener('change', this._onChangeFn);

        this._events.push({
          el: value,
          fn: this._onChangeFn
        });
      });
    });

    this._onOptionChange();
  }

  disconnectedCallback() {
    this._resetOptions();

    this._events.forEach(({
      el,
      fn
    }) => el.removeEventListener('change', fn));

    this._events = [];
  }

  attributeChangedCallback(name, _oldValue, newValue) {
    switch (name) {
      case 'variant-selection':
        this._associateVariantSelection(newValue);

        break;

      case 'disable-unavailable':
      case 'remove-unavailable':
        this._updateOptions(this.hasAttribute('disable-unavailable'), this.hasAttribute('remove-unavailable'));

        break;
    }
  }

  getSelectedOptions() {
    if (!this._variantSelection) return Promise.resolve(null);
    return this._variantSelection.getProduct().then(product => {
      if (!product) return null;
      return getSelectedOptions(product, this._selectOptions, this._radioOptions);
    });
  }

  getVariantSelection() {
    return this._variantSelection;
  }

  setSelectedOptions(selectedOptions) {
    setSelectedOptions(this._selectOptions, this._radioOptions, selectedOptions);
    return this._updateOptions(this.hasAttribute('disable-unavailable'), this.hasAttribute('remove-unavailable'), selectedOptions);
  }

  _associateVariantSelection(id) {
    this._variantSelection = id ? document.getElementById(id) : this.closest('variant-selection');
  }

  _updateLabels() {
    // Update any labels
    for (let i = 0; i < this._optionsEls.length; i++) {
      const optionsEl = this._optionsEls[i];
      let optionsNameEl = null;
      let {
        parentElement
      } = optionsEl;

      while (parentElement && !optionsNameEl) {
        const tmpOptionsNameEl = parentElement.querySelector('[data-variant-option-name]');

        if (tmpOptionsNameEl) {
          optionsNameEl = tmpOptionsNameEl;
        }

        ({
          parentElement
        } = parentElement);
      }

      if (optionsNameEl) {
        optionsNameEl.dataset.variantOptionChosenValue = optionsEl.dataset.variantOptionChosenValue;

        if (optionsEl.dataset.variantOptionChosenValue !== 'false') {
          optionsNameEl.innerHTML = optionsNameEl.dataset.variantOptionName;
          const optionNameValueSpan = optionsNameEl.querySelector('span');

          if (optionNameValueSpan) {
            optionNameValueSpan.innerHTML = optionsEl.dataset.variantOptionChosenValue;
          }
        } else {
          optionsNameEl.innerHTML = optionsNameEl.dataset.variantOptionChooseName;
        }
      }
    }
  }

  _resetOptions() {
    return this._updateOptions(false, false);
  }

  _updateOptions(disableUnavailableOptions, removeUnavailableOptions, selectedOptions = null) {
    if (!this._variantSelection) return Promise.resolve(false);
    return this._variantSelection.getProduct().then(product => {
      updateOptions(product, this._selectOptions, this._radioOptions, selectedOptions || getSelectedOptions(product, this._selectOptions, this._radioOptions), disableUnavailableOptions, removeUnavailableOptions);

      this._updateLabels();
    }).then(() => true);
  }

  _updateVariantSelection(product, selectedOptions) {
    if (!this._variantSelection) return;
    const variant = getVariantFromSelectedOptions(product.variants, selectedOptions);
    const isNotSelected = selectedOptions.some(option => option === 'not-selected'); // Update master select

    if (variant) {
      this._variantSelection.variant = variant.id;
    } else {
      this._variantSelection.variant = isNotSelected ? 'not-selected' : 'unavailable';
    }
  }

  _onOptionChange() {
    if (!this._variantSelection) return;

    this._variantSelection.getProduct().then(product => {
      if (!product) return;
      const selectedOptions = getSelectedOptions(product, this._selectOptions, this._radioOptions);

      this._updateOptions(this.hasAttribute('disable-unavailable'), this.hasAttribute('remove-unavailable'), selectedOptions);

      this._updateVariantSelection(product, selectedOptions);

      OptionsSelection.synchronize(this);
    });
  }

}

if (!customElements.get('variant-selection')) {
  customElements.define('variant-selection', VariantSelection);
}

if (!customElements.get('options-selection')) {
  customElements.define('options-selection', OptionsSelection);
}


/***/ }),

/***/ 265:
/***/ (function(module) {

(function webpackUniversalModuleDefinition(root, factory) {
	if(true)
		module.exports = factory();
	else {}
})(this, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __nested_webpack_require_543__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __nested_webpack_require_543__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__nested_webpack_require_543__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__nested_webpack_require_543__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__nested_webpack_require_543__.d = function(exports, name, getter) {
/******/ 		if(!__nested_webpack_require_543__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__nested_webpack_require_543__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__nested_webpack_require_543__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __nested_webpack_require_543__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__nested_webpack_require_543__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __nested_webpack_require_543__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__nested_webpack_require_543__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__nested_webpack_require_543__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__nested_webpack_require_543__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__nested_webpack_require_543__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __nested_webpack_require_543__(__nested_webpack_require_543__.s = 0);
/******/ })
/************************************************************************/
/******/ ([
/* 0 */
/***/ (function(module, __webpack_exports__, __nested_webpack_require_4019__) {

"use strict";
__nested_webpack_require_4019__.r(__webpack_exports__);

// CONCATENATED MODULE: ./src/tools.js
var argumentAsArray = function argumentAsArray(argument) {
  return Array.isArray(argument) ? argument : [argument];
};
var isElement = function isElement(target) {
  return target instanceof Node;
};
var isElementList = function isElementList(nodeList) {
  return nodeList instanceof NodeList;
};
var eachNode = function eachNode(nodeList, callback) {
  if (nodeList && callback) {
    nodeList = isElementList(nodeList) ? nodeList : [nodeList];

    for (var i = 0; i < nodeList.length; i++) {
      if (callback(nodeList[i], i, nodeList.length) === true) {
        break;
      }
    }
  }
};
var throwError = function throwError(message) {
  return console.error("[scroll-lock] ".concat(message));
};
var arrayAsSelector = function arrayAsSelector(array) {
  if (Array.isArray(array)) {
    var selector = array.join(', ');
    return selector;
  }
};
var nodeListAsArray = function nodeListAsArray(nodeList) {
  var nodes = [];
  eachNode(nodeList, function (node) {
    return nodes.push(node);
  });
  return nodes;
};
var findParentBySelector = function findParentBySelector($el, selector) {
  var self = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : true;
  var $root = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : document;

  if (self && nodeListAsArray($root.querySelectorAll(selector)).indexOf($el) !== -1) {
    return $el;
  }

  while (($el = $el.parentElement) && nodeListAsArray($root.querySelectorAll(selector)).indexOf($el) === -1) {
    ;
  }

  return $el;
};
var elementHasSelector = function elementHasSelector($el, selector) {
  var $root = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : document;
  var has = nodeListAsArray($root.querySelectorAll(selector)).indexOf($el) !== -1;
  return has;
};
var elementHasOverflowHidden = function elementHasOverflowHidden($el) {
  if ($el) {
    var computedStyle = getComputedStyle($el);
    var overflowIsHidden = computedStyle.overflow === 'hidden';
    return overflowIsHidden;
  }
};
var elementScrollTopOnStart = function elementScrollTopOnStart($el) {
  if ($el) {
    if (elementHasOverflowHidden($el)) {
      return true;
    }

    var scrollTop = $el.scrollTop;
    return scrollTop <= 0;
  }
};
var elementScrollTopOnEnd = function elementScrollTopOnEnd($el) {
  if ($el) {
    if (elementHasOverflowHidden($el)) {
      return true;
    }

    var scrollTop = $el.scrollTop;
    var scrollHeight = $el.scrollHeight;
    var scrollTopWithHeight = scrollTop + $el.offsetHeight;
    return scrollTopWithHeight >= scrollHeight;
  }
};
var elementScrollLeftOnStart = function elementScrollLeftOnStart($el) {
  if ($el) {
    if (elementHasOverflowHidden($el)) {
      return true;
    }

    var scrollLeft = $el.scrollLeft;
    return scrollLeft <= 0;
  }
};
var elementScrollLeftOnEnd = function elementScrollLeftOnEnd($el) {
  if ($el) {
    if (elementHasOverflowHidden($el)) {
      return true;
    }

    var scrollLeft = $el.scrollLeft;
    var scrollWidth = $el.scrollWidth;
    var scrollLeftWithWidth = scrollLeft + $el.offsetWidth;
    return scrollLeftWithWidth >= scrollWidth;
  }
};
var elementIsScrollableField = function elementIsScrollableField($el) {
  var selector = 'textarea, [contenteditable="true"]';
  return elementHasSelector($el, selector);
};
var elementIsInputRange = function elementIsInputRange($el) {
  var selector = 'input[type="range"]';
  return elementHasSelector($el, selector);
};
// CONCATENATED MODULE: ./src/scroll-lock.js
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "disablePageScroll", function() { return disablePageScroll; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "enablePageScroll", function() { return enablePageScroll; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "getScrollState", function() { return getScrollState; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "clearQueueScrollLocks", function() { return clearQueueScrollLocks; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "getTargetScrollBarWidth", function() { return scroll_lock_getTargetScrollBarWidth; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "getCurrentTargetScrollBarWidth", function() { return scroll_lock_getCurrentTargetScrollBarWidth; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "getPageScrollBarWidth", function() { return getPageScrollBarWidth; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "getCurrentPageScrollBarWidth", function() { return getCurrentPageScrollBarWidth; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "addScrollableTarget", function() { return scroll_lock_addScrollableTarget; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "removeScrollableTarget", function() { return scroll_lock_removeScrollableTarget; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "addScrollableSelector", function() { return scroll_lock_addScrollableSelector; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "removeScrollableSelector", function() { return scroll_lock_removeScrollableSelector; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "addLockableTarget", function() { return scroll_lock_addLockableTarget; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "addLockableSelector", function() { return scroll_lock_addLockableSelector; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "setFillGapMethod", function() { return scroll_lock_setFillGapMethod; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "addFillGapTarget", function() { return scroll_lock_addFillGapTarget; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "removeFillGapTarget", function() { return scroll_lock_removeFillGapTarget; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "addFillGapSelector", function() { return scroll_lock_addFillGapSelector; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "removeFillGapSelector", function() { return scroll_lock_removeFillGapSelector; });
/* harmony export (binding) */ __nested_webpack_require_4019__.d(__webpack_exports__, "refillGaps", function() { return refillGaps; });
function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }


var FILL_GAP_AVAILABLE_METHODS = ['padding', 'margin', 'width', 'max-width', 'none'];
var TOUCH_DIRECTION_DETECT_OFFSET = 3;
var state = {
  scroll: true,
  queue: 0,
  scrollableSelectors: ['[data-scroll-lock-scrollable]'],
  lockableSelectors: ['body', '[data-scroll-lock-lockable]'],
  fillGapSelectors: ['body', '[data-scroll-lock-fill-gap]', '[data-scroll-lock-lockable]'],
  fillGapMethod: FILL_GAP_AVAILABLE_METHODS[0],
  //
  startTouchY: 0,
  startTouchX: 0
};
var disablePageScroll = function disablePageScroll(target) {
  if (state.queue <= 0) {
    state.scroll = false;
    scroll_lock_hideLockableOverflow();
    fillGaps();
  }

  scroll_lock_addScrollableTarget(target);
  state.queue++;
};
var enablePageScroll = function enablePageScroll(target) {
  state.queue > 0 && state.queue--;

  if (state.queue <= 0) {
    state.scroll = true;
    scroll_lock_showLockableOverflow();
    unfillGaps();
  }

  scroll_lock_removeScrollableTarget(target);
};
var getScrollState = function getScrollState() {
  return state.scroll;
};
var clearQueueScrollLocks = function clearQueueScrollLocks() {
  state.queue = 0;
};
var scroll_lock_getTargetScrollBarWidth = function getTargetScrollBarWidth($target) {
  var onlyExists = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (isElement($target)) {
    var currentOverflowYProperty = $target.style.overflowY;

    if (onlyExists) {
      if (!getScrollState()) {
        $target.style.overflowY = $target.getAttribute('data-scroll-lock-saved-overflow-y-property');
      }
    } else {
      $target.style.overflowY = 'scroll';
    }

    var width = scroll_lock_getCurrentTargetScrollBarWidth($target);
    $target.style.overflowY = currentOverflowYProperty;
    return width;
  } else {
    return 0;
  }
};
var scroll_lock_getCurrentTargetScrollBarWidth = function getCurrentTargetScrollBarWidth($target) {
  if (isElement($target)) {
    if ($target === document.body) {
      var documentWidth = document.documentElement.clientWidth;
      var windowWidth = window.innerWidth;
      var currentWidth = windowWidth - documentWidth;
      return currentWidth;
    } else {
      var borderLeftWidthCurrentProperty = $target.style.borderLeftWidth;
      var borderRightWidthCurrentProperty = $target.style.borderRightWidth;
      $target.style.borderLeftWidth = '0px';
      $target.style.borderRightWidth = '0px';

      var _currentWidth = $target.offsetWidth - $target.clientWidth;

      $target.style.borderLeftWidth = borderLeftWidthCurrentProperty;
      $target.style.borderRightWidth = borderRightWidthCurrentProperty;
      return _currentWidth;
    }
  } else {
    return 0;
  }
};
var getPageScrollBarWidth = function getPageScrollBarWidth() {
  var onlyExists = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;
  return scroll_lock_getTargetScrollBarWidth(document.body, onlyExists);
};
var getCurrentPageScrollBarWidth = function getCurrentPageScrollBarWidth() {
  return scroll_lock_getCurrentTargetScrollBarWidth(document.body);
};
var scroll_lock_addScrollableTarget = function addScrollableTarget(target) {
  if (target) {
    var targets = argumentAsArray(target);
    targets.map(function ($targets) {
      eachNode($targets, function ($target) {
        if (isElement($target)) {
          $target.setAttribute('data-scroll-lock-scrollable', '');
        } else {
          throwError("\"".concat($target, "\" is not a Element."));
        }
      });
    });
  }
};
var scroll_lock_removeScrollableTarget = function removeScrollableTarget(target) {
  if (target) {
    var targets = argumentAsArray(target);
    targets.map(function ($targets) {
      eachNode($targets, function ($target) {
        if (isElement($target)) {
          $target.removeAttribute('data-scroll-lock-scrollable');
        } else {
          throwError("\"".concat($target, "\" is not a Element."));
        }
      });
    });
  }
};
var scroll_lock_addScrollableSelector = function addScrollableSelector(selector) {
  if (selector) {
    var selectors = argumentAsArray(selector);
    selectors.map(function (selector) {
      state.scrollableSelectors.push(selector);
    });
  }
};
var scroll_lock_removeScrollableSelector = function removeScrollableSelector(selector) {
  if (selector) {
    var selectors = argumentAsArray(selector);
    selectors.map(function (selector) {
      state.scrollableSelectors = state.scrollableSelectors.filter(function (sSelector) {
        return sSelector !== selector;
      });
    });
  }
};
var scroll_lock_addLockableTarget = function addLockableTarget(target) {
  if (target) {
    var targets = argumentAsArray(target);
    targets.map(function ($targets) {
      eachNode($targets, function ($target) {
        if (isElement($target)) {
          $target.setAttribute('data-scroll-lock-lockable', '');
        } else {
          throwError("\"".concat($target, "\" is not a Element."));
        }
      });
    });

    if (!getScrollState()) {
      scroll_lock_hideLockableOverflow();
    }
  }
};
var scroll_lock_addLockableSelector = function addLockableSelector(selector) {
  if (selector) {
    var selectors = argumentAsArray(selector);
    selectors.map(function (selector) {
      state.lockableSelectors.push(selector);
    });

    if (!getScrollState()) {
      scroll_lock_hideLockableOverflow();
    }

    scroll_lock_addFillGapSelector(selector);
  }
};
var scroll_lock_setFillGapMethod = function setFillGapMethod(method) {
  if (method) {
    if (FILL_GAP_AVAILABLE_METHODS.indexOf(method) !== -1) {
      state.fillGapMethod = method;
      refillGaps();
    } else {
      var methods = FILL_GAP_AVAILABLE_METHODS.join(', ');
      throwError("\"".concat(method, "\" method is not available!\nAvailable fill gap methods: ").concat(methods, "."));
    }
  }
};
var scroll_lock_addFillGapTarget = function addFillGapTarget(target) {
  if (target) {
    var targets = argumentAsArray(target);
    targets.map(function ($targets) {
      eachNode($targets, function ($target) {
        if (isElement($target)) {
          $target.setAttribute('data-scroll-lock-fill-gap', '');

          if (!state.scroll) {
            scroll_lock_fillGapTarget($target);
          }
        } else {
          throwError("\"".concat($target, "\" is not a Element."));
        }
      });
    });
  }
};
var scroll_lock_removeFillGapTarget = function removeFillGapTarget(target) {
  if (target) {
    var targets = argumentAsArray(target);
    targets.map(function ($targets) {
      eachNode($targets, function ($target) {
        if (isElement($target)) {
          $target.removeAttribute('data-scroll-lock-fill-gap');

          if (!state.scroll) {
            scroll_lock_unfillGapTarget($target);
          }
        } else {
          throwError("\"".concat($target, "\" is not a Element."));
        }
      });
    });
  }
};
var scroll_lock_addFillGapSelector = function addFillGapSelector(selector) {
  if (selector) {
    var selectors = argumentAsArray(selector);
    selectors.map(function (selector) {
      if (state.fillGapSelectors.indexOf(selector) === -1) {
        state.fillGapSelectors.push(selector);

        if (!state.scroll) {
          scroll_lock_fillGapSelector(selector);
        }
      }
    });
  }
};
var scroll_lock_removeFillGapSelector = function removeFillGapSelector(selector) {
  if (selector) {
    var selectors = argumentAsArray(selector);
    selectors.map(function (selector) {
      state.fillGapSelectors = state.fillGapSelectors.filter(function (fSelector) {
        return fSelector !== selector;
      });

      if (!state.scroll) {
        scroll_lock_unfillGapSelector(selector);
      }
    });
  }
};
var refillGaps = function refillGaps() {
  if (!state.scroll) {
    fillGaps();
  }
};

var scroll_lock_hideLockableOverflow = function hideLockableOverflow() {
  var selector = arrayAsSelector(state.lockableSelectors);
  scroll_lock_hideLockableOverflowSelector(selector);
};

var scroll_lock_showLockableOverflow = function showLockableOverflow() {
  var selector = arrayAsSelector(state.lockableSelectors);
  scroll_lock_showLockableOverflowSelector(selector);
};

var scroll_lock_hideLockableOverflowSelector = function hideLockableOverflowSelector(selector) {
  var $targets = document.querySelectorAll(selector);
  eachNode($targets, function ($target) {
    scroll_lock_hideLockableOverflowTarget($target);
  });
};

var scroll_lock_showLockableOverflowSelector = function showLockableOverflowSelector(selector) {
  var $targets = document.querySelectorAll(selector);
  eachNode($targets, function ($target) {
    scroll_lock_showLockableOverflowTarget($target);
  });
};

var scroll_lock_hideLockableOverflowTarget = function hideLockableOverflowTarget($target) {
  if (isElement($target) && $target.getAttribute('data-scroll-lock-locked') !== 'true') {
    var computedStyle = window.getComputedStyle($target);
    $target.setAttribute('data-scroll-lock-saved-overflow-y-property', computedStyle.overflowY);
    $target.setAttribute('data-scroll-lock-saved-inline-overflow-property', $target.style.overflow);
    $target.setAttribute('data-scroll-lock-saved-inline-overflow-y-property', $target.style.overflowY);
    $target.style.overflow = 'hidden';
    $target.setAttribute('data-scroll-lock-locked', 'true');
  }
};

var scroll_lock_showLockableOverflowTarget = function showLockableOverflowTarget($target) {
  if (isElement($target) && $target.getAttribute('data-scroll-lock-locked') === 'true') {
    $target.style.overflow = $target.getAttribute('data-scroll-lock-saved-inline-overflow-property');
    $target.style.overflowY = $target.getAttribute('data-scroll-lock-saved-inline-overflow-y-property');
    $target.removeAttribute('data-scroll-lock-saved-overflow-property');
    $target.removeAttribute('data-scroll-lock-saved-inline-overflow-property');
    $target.removeAttribute('data-scroll-lock-saved-inline-overflow-y-property');
    $target.removeAttribute('data-scroll-lock-locked');
  }
};

var fillGaps = function fillGaps() {
  state.fillGapSelectors.map(function (selector) {
    scroll_lock_fillGapSelector(selector);
  });
};

var unfillGaps = function unfillGaps() {
  state.fillGapSelectors.map(function (selector) {
    scroll_lock_unfillGapSelector(selector);
  });
};

var scroll_lock_fillGapSelector = function fillGapSelector(selector) {
  var $targets = document.querySelectorAll(selector);
  var isLockable = state.lockableSelectors.indexOf(selector) !== -1;
  eachNode($targets, function ($target) {
    scroll_lock_fillGapTarget($target, isLockable);
  });
};

var scroll_lock_fillGapTarget = function fillGapTarget($target) {
  var isLockable = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

  if (isElement($target)) {
    var scrollBarWidth;

    if ($target.getAttribute('data-scroll-lock-lockable') === '' || isLockable) {
      scrollBarWidth = scroll_lock_getTargetScrollBarWidth($target, true);
    } else {
      var $lockableParent = findParentBySelector($target, arrayAsSelector(state.lockableSelectors));
      scrollBarWidth = scroll_lock_getTargetScrollBarWidth($lockableParent, true);
    }

    if ($target.getAttribute('data-scroll-lock-filled-gap') === 'true') {
      scroll_lock_unfillGapTarget($target);
    }

    var computedStyle = window.getComputedStyle($target);
    $target.setAttribute('data-scroll-lock-filled-gap', 'true');
    $target.setAttribute('data-scroll-lock-current-fill-gap-method', state.fillGapMethod);

    if (state.fillGapMethod === 'margin') {
      var currentMargin = parseFloat(computedStyle.marginRight);
      $target.style.marginRight = "".concat(currentMargin + scrollBarWidth, "px");
    } else if (state.fillGapMethod === 'width') {
      $target.style.width = "calc(100% - ".concat(scrollBarWidth, "px)");
    } else if (state.fillGapMethod === 'max-width') {
      $target.style.maxWidth = "calc(100% - ".concat(scrollBarWidth, "px)");
    } else if (state.fillGapMethod === 'padding') {
      var currentPadding = parseFloat(computedStyle.paddingRight);
      $target.style.paddingRight = "".concat(currentPadding + scrollBarWidth, "px");
    }
  }
};

var scroll_lock_unfillGapSelector = function unfillGapSelector(selector) {
  var $targets = document.querySelectorAll(selector);
  eachNode($targets, function ($target) {
    scroll_lock_unfillGapTarget($target);
  });
};

var scroll_lock_unfillGapTarget = function unfillGapTarget($target) {
  if (isElement($target)) {
    if ($target.getAttribute('data-scroll-lock-filled-gap') === 'true') {
      var currentFillGapMethod = $target.getAttribute('data-scroll-lock-current-fill-gap-method');
      $target.removeAttribute('data-scroll-lock-filled-gap');
      $target.removeAttribute('data-scroll-lock-current-fill-gap-method');

      if (currentFillGapMethod === 'margin') {
        $target.style.marginRight = "";
      } else if (currentFillGapMethod === 'width') {
        $target.style.width = "";
      } else if (currentFillGapMethod === 'max-width') {
        $target.style.maxWidth = "";
      } else if (currentFillGapMethod === 'padding') {
        $target.style.paddingRight = "";
      }
    }
  }
};

var onResize = function onResize(e) {
  refillGaps();
};

var onTouchStart = function onTouchStart(e) {
  if (!state.scroll) {
    state.startTouchY = e.touches[0].clientY;
    state.startTouchX = e.touches[0].clientX;
  }
};

var scroll_lock_onTouchMove = function onTouchMove(e) {
  if (!state.scroll) {
    var startTouchY = state.startTouchY,
        startTouchX = state.startTouchX;
    var currentClientY = e.touches[0].clientY;
    var currentClientX = e.touches[0].clientX;

    if (e.touches.length < 2) {
      var selector = arrayAsSelector(state.scrollableSelectors);
      var direction = {
        up: startTouchY < currentClientY,
        down: startTouchY > currentClientY,
        left: startTouchX < currentClientX,
        right: startTouchX > currentClientX
      };
      var directionWithOffset = {
        up: startTouchY + TOUCH_DIRECTION_DETECT_OFFSET < currentClientY,
        down: startTouchY - TOUCH_DIRECTION_DETECT_OFFSET > currentClientY,
        left: startTouchX + TOUCH_DIRECTION_DETECT_OFFSET < currentClientX,
        right: startTouchX - TOUCH_DIRECTION_DETECT_OFFSET > currentClientX
      };

      var handle = function handle($el) {
        var skip = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : false;

        if ($el) {
          var parentScrollableEl = findParentBySelector($el, selector, false);

          if (elementIsInputRange($el)) {
            return false;
          }

          if (skip || elementIsScrollableField($el) && findParentBySelector($el, selector) || elementHasSelector($el, selector)) {
            var prevent = false;

            if (elementScrollLeftOnStart($el) && elementScrollLeftOnEnd($el)) {
              if (direction.up && elementScrollTopOnStart($el) || direction.down && elementScrollTopOnEnd($el)) {
                prevent = true;
              }
            } else if (elementScrollTopOnStart($el) && elementScrollTopOnEnd($el)) {
              if (direction.left && elementScrollLeftOnStart($el) || direction.right && elementScrollLeftOnEnd($el)) {
                prevent = true;
              }
            } else if (directionWithOffset.up && elementScrollTopOnStart($el) || directionWithOffset.down && elementScrollTopOnEnd($el) || directionWithOffset.left && elementScrollLeftOnStart($el) || directionWithOffset.right && elementScrollLeftOnEnd($el)) {
              prevent = true;
            }

            if (prevent) {
              if (parentScrollableEl) {
                handle(parentScrollableEl, true);
              } else {
                if (e.cancelable) {
                  e.preventDefault();
                }
              }
            }
          } else {
            handle(parentScrollableEl);
          }
        } else {
          if (e.cancelable) {
            e.preventDefault();
          }
        }
      };

      handle(e.target);
    }
  }
};

var onTouchEnd = function onTouchEnd(e) {
  if (!state.scroll) {
    state.startTouchY = 0;
    state.startTouchX = 0;
  }
};

if (typeof window !== 'undefined') {
  window.addEventListener('resize', onResize);
}

if (typeof document !== 'undefined') {
  document.addEventListener('touchstart', onTouchStart);
  document.addEventListener('touchmove', scroll_lock_onTouchMove, {
    passive: false
  });
  document.addEventListener('touchend', onTouchEnd);
}

var deprecatedMethods = {
  hide: function hide(target) {
    throwError('"hide" is deprecated! Use "disablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#disablepagescrollscrollabletarget');
    disablePageScroll(target);
  },
  show: function show(target) {
    throwError('"show" is deprecated! Use "enablePageScroll" instead. \n https://github.com/FL3NKEY/scroll-lock#enablepagescrollscrollabletarget');
    enablePageScroll(target);
  },
  toggle: function toggle(target) {
    throwError('"toggle" is deprecated! Do not use it.');

    if (getScrollState()) {
      disablePageScroll();
    } else {
      enablePageScroll(target);
    }
  },
  getState: function getState() {
    throwError('"getState" is deprecated! Use "getScrollState" instead. \n https://github.com/FL3NKEY/scroll-lock#getscrollstate');
    return getScrollState();
  },
  getWidth: function getWidth() {
    throwError('"getWidth" is deprecated! Use "getPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getpagescrollbarwidth');
    return getPageScrollBarWidth();
  },
  getCurrentWidth: function getCurrentWidth() {
    throwError('"getCurrentWidth" is deprecated! Use "getCurrentPageScrollBarWidth" instead. \n https://github.com/FL3NKEY/scroll-lock#getcurrentpagescrollbarwidth');
    return getCurrentPageScrollBarWidth();
  },
  setScrollableTargets: function setScrollableTargets(target) {
    throwError('"setScrollableTargets" is deprecated! Use "addScrollableTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addscrollabletargetscrollabletarget');
    scroll_lock_addScrollableTarget(target);
  },
  setFillGapSelectors: function setFillGapSelectors(selector) {
    throwError('"setFillGapSelectors" is deprecated! Use "addFillGapSelector" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgapselectorfillgapselector');
    scroll_lock_addFillGapSelector(selector);
  },
  setFillGapTargets: function setFillGapTargets(target) {
    throwError('"setFillGapTargets" is deprecated! Use "addFillGapTarget" instead. \n https://github.com/FL3NKEY/scroll-lock#addfillgaptargetfillgaptarget');
    scroll_lock_addFillGapTarget(target);
  },
  clearQueue: function clearQueue() {
    throwError('"clearQueue" is deprecated! Use "clearQueueScrollLocks" instead. \n https://github.com/FL3NKEY/scroll-lock#clearqueuescrolllocks');
    clearQueueScrollLocks();
  }
};

var scrollLock = _objectSpread({
  disablePageScroll: disablePageScroll,
  enablePageScroll: enablePageScroll,
  getScrollState: getScrollState,
  clearQueueScrollLocks: clearQueueScrollLocks,
  getTargetScrollBarWidth: scroll_lock_getTargetScrollBarWidth,
  getCurrentTargetScrollBarWidth: scroll_lock_getCurrentTargetScrollBarWidth,
  getPageScrollBarWidth: getPageScrollBarWidth,
  getCurrentPageScrollBarWidth: getCurrentPageScrollBarWidth,
  addScrollableSelector: scroll_lock_addScrollableSelector,
  removeScrollableSelector: scroll_lock_removeScrollableSelector,
  addScrollableTarget: scroll_lock_addScrollableTarget,
  removeScrollableTarget: scroll_lock_removeScrollableTarget,
  addLockableSelector: scroll_lock_addLockableSelector,
  addLockableTarget: scroll_lock_addLockableTarget,
  addFillGapSelector: scroll_lock_addFillGapSelector,
  removeFillGapSelector: scroll_lock_removeFillGapSelector,
  addFillGapTarget: scroll_lock_addFillGapTarget,
  removeFillGapTarget: scroll_lock_removeFillGapTarget,
  setFillGapMethod: scroll_lock_setFillGapMethod,
  refillGaps: refillGaps,
  _state: state
}, deprecatedMethods);

/* harmony default export */ var scroll_lock = __webpack_exports__["default"] = (scrollLock);

/***/ })
/******/ ])["default"];
});

/***/ }),

/***/ 616:
/***/ ((module) => {

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
function _iterableToArrayLimit(arr, i) {
  var _i = arr == null ? null : typeof Symbol !== "undefined" && arr[Symbol.iterator] || arr["@@iterator"];
  if (_i == null) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _s, _e;
  try {
    for (_i = _i.call(arr); !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];
  return arr2;
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _classPrivateFieldGet(receiver, privateMap) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "get");
  return _classApplyDescriptorGet(receiver, descriptor);
}
function _classPrivateFieldSet(receiver, privateMap, value) {
  var descriptor = _classExtractFieldDescriptor(receiver, privateMap, "set");
  _classApplyDescriptorSet(receiver, descriptor, value);
  return value;
}
function _classExtractFieldDescriptor(receiver, privateMap, action) {
  if (!privateMap.has(receiver)) {
    throw new TypeError("attempted to " + action + " private field on non-instance");
  }
  return privateMap.get(receiver);
}
function _classApplyDescriptorGet(receiver, descriptor) {
  if (descriptor.get) {
    return descriptor.get.call(receiver);
  }
  return descriptor.value;
}
function _classApplyDescriptorSet(receiver, descriptor, value) {
  if (descriptor.set) {
    descriptor.set.call(receiver, value);
  } else {
    if (!descriptor.writable) {
      throw new TypeError("attempted to set read only private field");
    }
    descriptor.value = value;
  }
}
function _classPrivateMethodGet(receiver, privateSet, fn) {
  if (!privateSet.has(receiver)) {
    throw new TypeError("attempted to get private field on non-instance");
  }
  return fn;
}
function _checkPrivateRedeclaration(obj, privateCollection) {
  if (privateCollection.has(obj)) {
    throw new TypeError("Cannot initialize the same private elements twice on an object");
  }
}
function _classPrivateFieldInitSpec(obj, privateMap, value) {
  _checkPrivateRedeclaration(obj, privateMap);
  privateMap.set(obj, value);
}
function _classPrivateMethodInitSpec(obj, privateSet) {
  _checkPrivateRedeclaration(obj, privateSet);
  privateSet.add(obj);
}

var list = [
	" daum[ /]",
	" DCV$",
	" deusu/",
	"(?:^| )site",
	"@[a-z]",
	"\\(at\\)[a-z]",
	"\\(github\\.com/",
	"\\[at\\][a-z]",
	"^12345",
	"^<",
	"^[\\w \\.]+/v?\\d+(\\.\\d+)?(\\.\\d{1,10})?$",
	"^[\\w\\-\\(\\)]+$",
	"^[^ ]{50,}$",
	"^ace explorer",
	"^acoon",
	"^active",
	"^ad muncher",
	"^anglesharp/",
	"^anonymous",
	"^apple-pubsub/",
	"^astute srm",
	"^avsdevicesdk/",
	"^axios/",
	"^bidtellect/",
	"^biglotron",
	"^blackboard safeassign",
	"^blocknote.net",
	"^braze sender",
	"^captivenetworksupport",
	"^castro",
	"^cf-uc ",
	"^clamav[ /]",
	"^cobweb/",
	"^coccoc",
	"^custom",
	"^dap ",
	"^ddg[_-]android",
	"^discourse",
	"^dispatch/\\d",
	"^downcast/",
	"^duckduckgo",
	"^email",
	"^enigma browser",
	"^evernote clip resolver",
	"^facebook",
	"^faraday",
	"^fdm[ /]\\d",
	"^getright/",
	"^gozilla/",
	"^hatena",
	"^hobbit",
	"^hotzonu",
	"^hwcdn/",
	"^invision",
	"^jeode/",
	"^jetbrains",
	"^jetty/",
	"^jigsaw",
	"^linkdex",
	"^lwp[-: ]",
	"^mailchimp\\.com$",
	"^metauri",
	"^microsoft bits",
	"^microsoft data",
	"^microsoft office existence",
	"^microsoft office protocol discovery",
	"^microsoft windows network diagnostics",
	"^microsoft-cryptoapi",
	"^microsoft-webdav-miniredir",
	"^movabletype",
	"^mozilla/\\d\\.\\d \\(compatible;?\\)$",
	"^mozilla/\\d\\.\\d \\w*$",
	"^my browser$",
	"^navermailapp",
	"^netsurf",
	"^nginx\\W",
	"^node-superagent",
	"^octopus",
	"^offline explorer",
	"^pagething",
	"^panscient",
	"^perimeterx",
	"^php",
	"^postman",
	"^postrank",
	"^python",
	"^read",
	"^reed",
	"^restsharp/",
	"^shareaza",
	"^shockwave flash",
	"^snapchat",
	"^space bison",
	"^sprinklr",
	"^svn",
	"^swcd ",
	"^t-online browser",
	"^taringa",
	"^test certificate info",
	"^the knowledge ai",
	"^thinklab",
	"^thumbor/",
	"^traackr.com",
	"^tumblr/",
	"^uptime",
	"^vbulletin",
	"^venus/fedoraplanet",
	"^w3c",
	"^webbandit/",
	"^webcopier",
	"^wget",
	"^whatsapp",
	"^www-mechanize",
	"^xenu link sleuth",
	"^yahoo",
	"^yandex",
	"^zdm/\\d",
	"^zeushdthree",
	"^zoom marketplace/",
	"^{{.*}}$",
	"adbeat\\.com",
	"appinsights",
	"archive",
	"ask jeeves/teoma",
	"bit\\.ly/",
	"bluecoat drtr",
	"bot",
	"browsex",
	"burpcollaborator",
	"capture",
	"catch",
	"check",
	"chrome-lighthouse",
	"chromeframe",
	"client",
	"cloud",
	"crawl",
	"daemon",
	"dareboost",
	"datanyze",
	"dataprovider",
	"dejaclick",
	"dmbrowser",
	"download",
	"evc-batch/",
	"feed",
	"firephp",
	"freesafeip",
	"ghost",
	"gomezagent",
	"google",
	"headlesschrome/",
	"http",
	"httrack",
	"hubspot marketing grader",
	"hydra",
	"ibisbrowser",
	"images",
	"iplabel",
	"ips-agent",
	"java",
	"library",
	"mail\\.ru/",
	"manager",
	"monitor",
	"morningscore/",
	"neustar wpm",
	"news",
	"nutch",
	"offbyone",
	"optimize",
	"pageburst",
	"pagespeed",
	"parse",
	"perl",
	"phantom",
	"pingdom",
	"powermarks",
	"preview",
	"probe",
	"proxy",
	"ptst[ /]\\d",
	"reader",
	"rexx;",
	"rigor",
	"rss",
	"scan",
	"scrape",
	"search",
	"serp ?reputation ?management",
	"server",
	"sogou",
	"sparkler/",
	"spider",
	"statuscake",
	"stumbleupon\\.com",
	"supercleaner",
	"synapse",
	"synthetic",
	"taginspector/",
	"toolbar",
	"torrent",
	"tracemyfile",
	"transcoder",
	"trendsmapresolver",
	"twingly recon",
	"url",
	"valid",
	"virtuoso",
	"wappalyzer",
	"webglance",
	"webkit2png",
	"websitemetadataretriever",
	"whatcms/",
	"wordpress",
	"zgrab"
];

/**
 * Mutate given list of patter strings
 * @param {string[]} list
 * @returns {string[]}
 */
function amend(list) {
  try {
    // Risk: Uses lookbehind assertion, avoid breakage in parsing by using RegExp constructor
    new RegExp('(?<! cu)bot').test('dangerbot'); // eslint-disable-line prefer-regex-literals
  } catch (error) {
    // Skip regex fixes
    return list;
  }
  [
  // Addresses: Cubot device
  ['bot', '(?<! cu)bot'],
  // Addresses: Android webview
  ['google', '(?<! (?:channel/|google/))google(?!(app|/google| pixel))'],
  // Addresses: libhttp browser
  ['http', '(?<!(?:lib))http'],
  // Addresses: java based browsers
  ['java', 'java(?!;)'],
  // Addresses: Yandex Search App
  ['search', '(?<! ya(?:yandex)?)search']].forEach(function (_ref) {
    var _ref2 = _slicedToArray(_ref, 2),
      search = _ref2[0],
      replace = _ref2[1];
    var index = list.lastIndexOf(search);
    if (~index) {
      list.splice(index, 1, replace);
    }
  });
  return list;
}

amend(list);
var flags = 'i';

/**
 * Test user agents for matching patterns
 */
var _list = /*#__PURE__*/new WeakMap();
var _pattern = /*#__PURE__*/new WeakMap();
var _update = /*#__PURE__*/new WeakSet();
var _index = /*#__PURE__*/new WeakSet();
var Isbot = /*#__PURE__*/function () {
  /**
   * @type {string[]}
   */

  /**
   * @type {RegExp}
   */

  function Isbot(patterns) {
    var _this = this;
    _classCallCheck(this, Isbot);
    _classPrivateMethodInitSpec(this, _index);
    _classPrivateMethodInitSpec(this, _update);
    _classPrivateFieldInitSpec(this, _list, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldInitSpec(this, _pattern, {
      writable: true,
      value: void 0
    });
    _classPrivateFieldSet(this, _list, patterns || list.slice());
    _classPrivateMethodGet(this, _update, _update2).call(this);
    var isbot = function isbot(ua) {
      return _this.test(ua);
    };
    return Object.defineProperties(isbot, Object.entries(Object.getOwnPropertyDescriptors(Isbot.prototype)).reduce(function (accumulator, _ref) {
      var _ref2 = _slicedToArray(_ref, 2),
        prop = _ref2[0],
        descriptor = _ref2[1];
      if (typeof descriptor.value === 'function') {
        Object.assign(accumulator, _defineProperty({}, prop, {
          value: _this[prop].bind(_this)
        }));
      }
      if (typeof descriptor.get === 'function') {
        Object.assign(accumulator, _defineProperty({}, prop, {
          get: function get() {
            return _this[prop];
          }
        }));
      }
      return accumulator;
    }, {}));
  }

  /**
   * Recreate the pattern from rules list
   */
  _createClass(Isbot, [{
    key: "pattern",
    get:
    /**
     * Get a clone of the pattern
     * @type RegExp
     */
    function get() {
      return new RegExp(_classPrivateFieldGet(this, _pattern));
    }

    /**
     * Match given string against out pattern
     * @param  {string} ua User Agent string
     * @returns {boolean}
     */
  }, {
    key: "test",
    value: function test(ua) {
      return Boolean(ua) && _classPrivateFieldGet(this, _pattern).test(ua);
    }

    /**
     * Get the match for strings' known crawler pattern
     * @param  {string} ua User Agent string
     * @returns {string|null}
     */
  }, {
    key: "find",
    value: function find() {
      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      var match = ua.match(_classPrivateFieldGet(this, _pattern));
      return match && match[0];
    }

    /**
     * Get the patterns that match user agent string if any
     * @param  {string} ua User Agent string
     * @returns {string[]}
     */
  }, {
    key: "matches",
    value: function matches() {
      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      return _classPrivateFieldGet(this, _list).filter(function (entry) {
        return new RegExp(entry, flags).test(ua);
      });
    }

    /**
     * Clear all patterns that match user agent
     * @param  {string} ua User Agent string
     * @returns {void}
     */
  }, {
    key: "clear",
    value: function clear() {
      var ua = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '';
      this.exclude(this.matches(ua));
    }

    /**
     * Extent patterns for known crawlers
     * @param  {string[]} filters
     * @returns {void}
     */
  }, {
    key: "extend",
    value: function extend() {
      var _this2 = this;
      var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      [].push.apply(_classPrivateFieldGet(this, _list), filters.filter(function (rule) {
        return _classPrivateMethodGet(_this2, _index, _index2).call(_this2, rule) === -1;
      }).map(function (filter) {
        return filter.toLowerCase();
      }));
      _classPrivateMethodGet(this, _update, _update2).call(this);
    }

    /**
     * Exclude patterns from bot pattern rule
     * @param  {string[]} filters
     * @returns {void}
     */
  }, {
    key: "exclude",
    value: function exclude() {
      var filters = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : [];
      var length = filters.length;
      while (length--) {
        var index = _classPrivateMethodGet(this, _index, _index2).call(this, filters[length]);
        if (index > -1) {
          _classPrivateFieldGet(this, _list).splice(index, 1);
        }
      }
      _classPrivateMethodGet(this, _update, _update2).call(this);
    }

    /**
     * Create a new Isbot instance using given list or self's list
     * @param  {string[]} [list]
     * @returns {Isbot}
     */
  }, {
    key: "spawn",
    value: function spawn(list) {
      return new Isbot(list || _classPrivateFieldGet(this, _list));
    }
  }]);
  return Isbot;
}();
function _update2() {
  _classPrivateFieldSet(this, _pattern, new RegExp(_classPrivateFieldGet(this, _list).join('|'), flags));
}
function _index2(rule) {
  return _classPrivateFieldGet(this, _list).indexOf(rule.toLowerCase());
}

var isbot = new Isbot();

module.exports = isbot;
//# sourceMappingURL=index.js.map


/***/ })

/******/ 	});
/************************************************************************/
/******/ 	// The module cache
/******/ 	var __webpack_module_cache__ = {};
/******/ 	
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/ 		// Check if module is in cache
/******/ 		var cachedModule = __webpack_module_cache__[moduleId];
/******/ 		if (cachedModule !== undefined) {
/******/ 			return cachedModule.exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = __webpack_module_cache__[moduleId] = {
/******/ 			// no module.id needed
/******/ 			// no module.loaded needed
/******/ 			exports: {}
/******/ 		};
/******/ 	
/******/ 		// Execute the module function
/******/ 		__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/ 	
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/ 	
/************************************************************************/
var __webpack_exports__ = {};
// This entry need to be wrapped in an IIFE because it need to be in strict mode.
(() => {
"use strict";

// EXTERNAL MODULE: ./node_modules/@pixelunion/shopify-variants-ui/dist/index.es.js
var index_es = __webpack_require__(722);
;// CONCATENATED MODULE: ./node_modules/@pixelunion/rimg-shopify/dist/index.es.js
/*!
 * @pixelunion/rimg-shopify v2.7.1
 * (c) 2023 Pixel Union
 */
/*!
 * @pixelunion/rimg v2.2.2
 * (c) 2022 Pixel Union
 */

/**
 * The default template render function. Turns a template string into an image
 * URL.
 *
 * @param {String} template
 * @param {Size} size
 * @returns {String}
 */
function defaultTemplateRender(template, size) {
  return template.replace('{size}', "".concat(size.width, "x").concat(size.height));
}
/**
 * @type Settings
 */


var defaults = {
  scale: 1,
  template: false,
  templateRender: defaultTemplateRender,
  max: {
    width: Infinity,
    height: Infinity
  },
  round: 32,
  placeholder: false,
  crop: null
};
/**
 * Get a data attribute value from an element, with a default fallback and
 * sanitization step.
 *
 * @param {Element} el
 *
 * @param {String} name
 *        The data attribute name.
 *
 * @param {Object} options
 *        An object holding fallback values if the data attribute does not
 *        exist. If this object doesn't have the property, we further fallback
 *        to our defaults.
 *
 * @param {Function} [sanitize]
 *        A function to sanitize the data attribute value with.
 *
 * @returns {String|*}
 */

function getData(el, name, options, sanitize) {
  var attr = "data-rimg-".concat(name);
  if (!el.hasAttribute(attr)) return options[name] || defaults[name];
  var value = el.getAttribute(attr);
  return sanitize ? sanitize(value) : value;
}
/**
 * Sanitize data attributes that represent a size (in the form of `10x10`).
 *
 * @param {String} value
 * @returns {Object} An object with `width` and `height` properties.
 */


function parseSize(value) {
  value = value.split('x');
  return {
    width: parseInt(value[0], 10),
    height: parseInt(value[1], 10)
  };
}
/**
 * Sanitize crop values to ensure they are valid, or null
 *
 * @param {String} value
 * @returns {Object} Shopify crop parameter ('top', 'center', 'bottom', 'left', 'right') or null, if an unsupported value is found
 */


function processCropValue(value) {
  switch (value) {
    case 'top':
    case 'center':
    case 'bottom':
    case 'left':
    case 'right':
      return value;

    default:
      return null;
  }
}
/**
 * Loads information about an element.
 *
 * Options can be set on the element itself using data attributes, or through
 * the `options` parameter. Data attributes take priority.
 *
 * @param {HTMLElement} el
 * @param {Settings} options
 * @returns {Item}
 */


function parseItem(el) {
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  var isImage = el.hasAttribute('data-rimg-template');
  /**
   * @typedef {Settings} Item
   */

  return {
    el: el,
    // Type of element
    isImage: isImage,
    isBackgroundImage: isImage && el.tagName !== 'IMG',
    // Image scale
    scale: parseInt(getData(el, 'scale', options)),
    // Device density
    density: window.devicePixelRatio || 1,
    // Image template URL
    template: getData(el, 'template', options),
    templateRender: options.templateRender || defaults.templateRender,
    // Maximum image dimensions
    max: getData(el, 'max', options, parseSize),
    // Round image dimensions to the nearest multiple
    round: getData(el, 'round', options),
    // Placeholder image dimensions
    placeholder: getData(el, 'placeholder', options, parseSize),
    // Crop value; null if image is uncropped, otherwise equal to the Shopify crop parameter ('center', 'top', etc.)
    crop: getData(el, 'crop', options, processCropValue)
  };
}
/**
 * Round to the nearest multiple.
 *
 * This is so we don't tax the image server too much.
 *
 * @param {Number} size The size, in pixels.
 * @param {Number} [multiple] The multiple to round to the nearest.
 * @param {Number} [maxLimit] Maximum allowed value - value to return if rounded multiple is above this limit
 * @returns {Number}
 */


function roundSize(size) {
  var multiple = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 32;
  var maxLimit = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : Infinity;
  return size === 0 ? multiple : Math.min(Math.ceil(size / multiple) * multiple, maxLimit);
}
/**
 * Get the size of an element.
 *
 * If it is too small, it's parent element is checked, and so on. This helps
 * avoid the situation where an element doesn't have a size yet or is positioned
 * out of the layout.
 *
 * @param {HTMLElement} el
 * @return {Object} size
 * @return {Number} size.width The width, in pixels.
 * @return {Number} size.height The height, in pixels.
 */


function getElementSize(el) {
  var size = {
    width: 0,
    height: 0
  };

  while (el) {
    size.width = el.offsetWidth;
    size.height = el.offsetHeight;
    if (size.width > 20 && size.height > 20) break;
    el = el.parentNode;
  }

  return size;
}
/**
 * Return the maximum supported density of the image, given the container.
 *
 * @param {Item} item
 * @param {Size} size
 */


function supportedDensity(item, size) {
  return Math.min(Math.min(Math.max(item.max.width / size.width, 1), item.density), Math.min(Math.max(item.max.height / size.height, 1), item.density)).toFixed(2);
}
/**
 * Trigger a custom event.
 *
 * Note: this approach is deprecated, but still required to support older
 * browsers such as IE 10.
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/Guide/Events/Creating_and_triggering_events
 *
 * @param {HTMLElement} el
 *        The element to trigger the event on.
 *
 * @param {String} name
 *        The event name.
 *
 * @returns {Boolean}
 *          True if the event was canceled.
 */


function trigger(el, name) {
  var event = document.createEvent('Event');
  event.initEvent(name, true, true);
  return !el.dispatchEvent(event);
}
/**
 * Set the image URL on the element. Supports background images and `srcset`.
 *
 * @param {Item} item
 * @param {Size} size
 * @param {Boolean} isPlaceholder
 */


function setImage(item, size, isPlaceholder, onLoad) {
  var render = item.templateRender;
  var density = isPlaceholder ? 1 : supportedDensity(item, size);
  var round = isPlaceholder ? 1 : item.round; // Calculate the final display size, taking into account the image's
  // maximum dimensions.

  var targetWidth = size.width * density;
  var targetHeight = size.height * density;
  var displaySize;

  if (item.crop) {
    displaySize = {
      width: roundSize(targetWidth, round, item.max.width),
      height: roundSize(targetHeight, round, item.max.height)
    };
  } else {
    // Shopify serves images clamped by the requested dimensions (fitted to the smallest dimension).
    // To get the desired and expected pixel density we need to request cover dimensions (fitted to largest dimension).
    // This isn't a problem with cropped images which are served at the exact dimension requested.
    var containerAspectRatio = size.width / size.height;
    var imageAspectRatio = item.max.width / item.max.height;

    if (containerAspectRatio > imageAspectRatio) {
      // fit width
      displaySize = {
        width: roundSize(targetWidth, round, item.max.width),
        height: roundSize(targetWidth / imageAspectRatio, round, item.max.height)
      };
    } else {
      // fit height
      displaySize = {
        width: roundSize(targetHeight * imageAspectRatio, round, item.max.width),
        height: roundSize(targetHeight, round, item.max.height)
      };
    }
  }

  var url = render(item.template, displaySize); // On load callback

  var image = new Image();
  image.onload = onLoad;
  image.src = url; // Set image

  if (item.isBackgroundImage) {
    item.el.style.backgroundImage = "url('".concat(url, "')");
  } else {
    item.el.setAttribute('srcset', "".concat(url, " ").concat(density, "x"));
  }
}
/**
 * Load the image, set loaded status, and trigger the load event.
 *
 * @fires rimg:load
 * @fires rimg:error
 * @param {Item} item
 * @param {Size} size
 */


function loadFullImage(item, size) {
  var el = item.el;
  setImage(item, size, false, function (event) {
    if (event.type === 'load') {
      el.setAttribute('data-rimg', 'loaded');
    } else {
      el.setAttribute('data-rimg', 'error');
      trigger(el, 'rimg:error');
    }

    trigger(el, 'rimg:load');
  });
}
/**
 * Load in a responsive image.
 *
 * Sets the image's `srcset` attribute to the final image URLs, calculated based
 * on the actual size the image is being shown at.
 *
 * @fires rimg:loading
 *        The image URLs have been set and we are waiting for them to load.
 *
 * @fires rimg:loaded
 *        The final image has loaded.
 *
 * @fires rimg:error
 *        The final image failed loading.
 *
 * @param {Item} item
 */


function loadImage(item) {
  var el = item.el; // Already loaded?

  var status = el.getAttribute('data-rimg');
  if (status === 'loading' || status === 'loaded') return; // Is the SVG loaded?
  // In Firefox, el.complete always returns true [citation needed, may not be the case anymore, Jan/2022]
  // so we also check el.naturalWidth, which equals 0 until the image loads

  if (!item.isBackgroundImage) {
    if (el.naturalWidth === 0 || !el.complete) {
      // Wait for the load event, then call load image
      el.addEventListener('load', function cb() {
        el.removeEventListener('load', cb);
        loadImage(item);
      });
      return;
    }
  } // Trigger loading event, and stop if cancelled


  if (trigger(el, 'rimg:loading')) return; // Mark as loading

  el.setAttribute('data-rimg', 'loading'); // Get element size. This is used as the ideal display size.

  var size = getElementSize(item.el);
  size.width *= item.scale;
  size.height *= item.scale;

  if (item.placeholder) {
    // Load a placeholder image first, followed by the full image. Force the
    // element to keep its dimensions while it loads. If the image is smaller
    // than the element size, use the image's size. Density is taken into account
    // for HiDPI devices to avoid blurry images.
    if (!item.isBackgroundImage) {
      el.setAttribute('width', Math.min(Math.floor(item.max.width / item.density), size.width));
      el.setAttribute('height', Math.min(Math.floor(item.max.height / item.density), size.height));
    }

    setImage(item, item.placeholder, true, function () {
      return loadFullImage(item, size);
    });
  } else {
    loadFullImage(item, size);
  }
}
/**
 * Prepare an element to be displayed on the screen.
 *
 * Images have special logic applied to them to swap out the different sources.
 *
 * @fires rimg:enter
 *        The element is entering the viewport.
 *
 * @param {HTMLElement} el
 * @param {Settings} options
 */


function load(el, options) {
  if (!el) return;
  trigger(el, 'rimg:enter');
  var item = parseItem(el, options);

  if (item.isImage) {
    if (!item.isBackgroundImage) {
      el.setAttribute('data-rimg-template-svg', el.getAttribute('srcset'));
    }

    loadImage(item);
  }
}
/**
 * Reset an element's state so that its image can be recalculated.
 *
 * @fires rimg:update
 *        The element is being updated.
 *
 * @param {HTMLElement} el
 * @param {Settings} options
 */


function update(el, options) {
  if (!el) return;
  trigger(el, 'rimg:update');
  var item = parseItem(el, options);

  if (item.isImage) {
    if (!item.isBackgroundImage) {
      el.setAttribute('data-rimg', 'lazy');
      el.setAttribute('srcset', el.getAttribute('data-rimg-template-svg'));
    }

    loadImage(item);
  }
}
/**
 * Returns true if the element is within the viewport.
 * @param {HTMLElement} el
 * @returns {Boolean}
 */


function inViewport(el) {
  if (!el.offsetWidth || !el.offsetHeight || !el.getClientRects().length) {
    return false;
  }

  var root = document.documentElement;
  var width = Math.min(root.clientWidth, window.innerWidth);
  var height = Math.min(root.clientHeight, window.innerHeight);
  var rect = el.getBoundingClientRect();
  return rect.bottom >= 0 && rect.right >= 0 && rect.top <= height && rect.left <= width;
}
/**
 * @typedef {Object} Size
 * @property {Number} width
 * @property {Number} height
 */

/**
 * A function to turn a template string into a URL.
 *
 * @callback TemplateRenderer
 * @param {String} template
 * @param {Size} size
 * @returns {String}
 */

/**
 * @typedef {Object} Settings
 *
 * @property {String} [template]
 *           A template string used to generate URLs for an image. This allows us to
 *           dynamically load images with sizes to match the container's size.
 *
 * @property {TemplateRenderer} [templateRender]
 *           A function to turn a template string into a URL.
 *
 * @property {Size} [max]
 *           The maximum available size for the image. This ensures we don't
 *           try to load an image larger than is possible.
 * 
 * @property {Number} [scale]
 *           A number to scale the final image dimensions by. 
 *           Only applies to lazy-loaded images. Defaults to 1.
 *
 * @property {Number} [round]
 *           Round image dimensions to the nearest multiple. This is intended to
 *           tax the image server less by lowering the number of possible image
 *           sizes requested.
 *
 * @property {Size} [placeholder]
 *           The size of the lo-fi image to load before the full image.
 * 
 * @property {String} [crop]
 *           Crop value; null if image is uncropped, otherwise equal 
 *           to the Shopify crop parameter ('center', 'top', etc.).
 */

/**
 * Initialize the responsive image handler.
 *
 * @param {String|HTMLElement|NodeList} selector
 *        The CSS selector, element, or elements to track for lazy-loading.
 *
 * @param {Settings} options
 *
 * @returns {PublicApi}
 */


function rimg() {
  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg="lazy"]';
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {}; // Intersections

  var io = new IntersectionObserver(function (entries) {
    entries.forEach(function (entry) {
      if (entry.isIntersecting || entry.intersectionRatio > 0) {
        io.unobserve(entry.target);
        load(entry.target, options);
      }
    });
  }, {
    // Watch the viewport, with 20% vertical margins
    rootMargin: '20% 0px'
  });
  /**
   * @typedef {Object} PublicApi
   */

  var api = {
    /**
     * Track a new selector, element, or nodelist for lazy-loading.
     * @type Function
     * @param {String|HTMLElement|NodeList} selector
     */
    track: function track() {
      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg="lazy"]';
      var els = querySelector(selector);

      for (var i = 0; i < els.length; i++) {
        // If an element is already in the viewport, load it right away. This
        // fixes a race-condition with dynamically added elements.
        if (inViewport(els[i])) {
          load(els[i], options);
        } else {
          io.observe(els[i]);
        }
      }
    },

    /**
     * Update element(s) that have already been loaded to force their images
     * to be recalculated.
     * @type Function
     * @param {String|HTMLElement|NodeList} selector
     */
    update: function update$1() {
      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg="loaded"]';
      var els = querySelector(selector);

      for (var i = 0; i < els.length; i++) {
        update(els[i], options);
      }
    },

    /**
     * Stop tracking element(s) for lazy-loading.
     * @type Function
     * @param {String|HTMLElement|NodeList} selector
     */
    untrack: function untrack() {
      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg]';
      var els = querySelector(selector);

      for (var i = 0; i < els.length; i++) {
        io.unobserve(els[i]);
      }
    },

    /**
     * Manually load images.
     * @type Function
     * @param {String|HTMLElement|NodeList} selector
     */
    load: function load$1() {
      var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg]';
      var els = querySelector(selector);

      for (var i = 0; i < els.length; i++) {
        load(els[i], options);
      }
    },

    /**
     * Unload all event handlers and observers.
     * @type Function
     */
    unload: function unload() {
      io.disconnect();
    }
  }; // Add initial elements

  api.track(selector);
  return api;
}
/**
 * Finds a group of elements on the page.
 *
 * @param {String|HTMLElement|NodeList} selector
 * @returns {Object} An array-like object.
 */


function querySelector(selector) {
  if (typeof selector === 'string') {
    return document.querySelectorAll(selector);
  }

  if (selector instanceof HTMLElement) {
    return [selector];
  }

  if (selector instanceof NodeList) {
    return selector;
  }

  return [];
}

/**
 * Polyfill for Element.matches().
 *
 * @see https://developer.mozilla.org/en-US/docs/Web/API/Element/matches
 */
if (!Element.prototype.matches) {
  Element.prototype.matches = Element.prototype.matchesSelector || Element.prototype.mozMatchesSelector || Element.prototype.msMatchesSelector || Element.prototype.oMatchesSelector || Element.prototype.webkitMatchesSelector || function (s) {
    var matches = (this.document || this.ownerDocument).querySelectorAll(s),
        i = matches.length;

    while (--i >= 0 && matches.item(i) !== this) {}

    return i > -1;
  };
}

var state = {
  init: init,
  watch: watch,
  unwatch: unwatch,
  load: load$1
};

function init() {
  var selector = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : '[data-rimg="lazy"]';
  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};
  state.selector = selector;
  state.instance = rimg(selector, options);
  state.loadedWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0); // Listen for Shopify theme editor events

  document.addEventListener('shopify:section:load', function (event) {
    return watch(event.target);
  });
  window.addEventListener('resize', function () {
    return _update();
  });
  document.addEventListener('shopify:section:unload', function (event) {
    return unwatch(event.target);
  }); // Listen for custom events to allow themes to hook into rimg

  document.addEventListener('theme:rimg:watch', function (event) {
    return watch(event.target);
  });
  document.addEventListener('theme:rimg:unwatch', function (event) {
    return unwatch(event.target);
  }); // Support custom events triggered through jQuery
  // See: https://github.com/jquery/jquery/issues/3347

  if (window.jQuery) {
    jQuery(document).on({
      'theme:rimg:watch': function themeRimgWatch(event) {
        return watch(event.target);
      },
      'theme:rimg:unwatch': function themeRimgUnwatch(event) {
        return unwatch(event.target);
      }
    });
  }
}
/**
 * Track an element, and its children.
 *
 * @param {HTMLElement} el
 */


function watch(el) {
  // Track element
  if (typeof el.matches === 'function' && el.matches(state.selector)) {
    state.instance.track(el);
  } // Track element's children


  state.instance.track(el.querySelectorAll(state.selector));
}
/**
 * Untrack an element, and its children
 *
 * @param {HTMLElement} el
 * @private
 */


function unwatch(el) {
  // Untrack element's children
  state.instance.untrack(el.querySelectorAll(state.selector)); // Untrack element

  if (typeof el.matches === 'function' && el.matches(state.selector)) {
    state.instance.untrack(el);
  }
}
/**
 * Manually load an image
 *
 * @param {HTMLElement} el
 */


function load$1(el) {
  // Load element
  if (typeof el.matches === 'function' && el.matches(state.selector)) {
    state.instance.load(el);
  } // Load element's children


  state.instance.load(el.querySelectorAll(state.selector));
}
/**
 * Update an element, and its children.
 *
 * @param {HTMLElement} el
 */


function _update() {
  var currentWidth = Math.max(document.documentElement.clientWidth, window.innerWidth || 0); // Return if we're not 2x smaller, or larger than the existing loading size

  if (currentWidth / state.loadedWidth > 0.5 && currentWidth / state.loadedWidth < 2) {
    return;
  }

  state.loadedWidth = currentWidth;
  state.instance.update();
}

/* harmony default export */ const dist_index_es = (state);

;// CONCATENATED MODULE: ./node_modules/@pixelunion/shopify-sections-manager/dist/shopify-sections-manager.es.js

/*!
 * @pixelunion/shopify-sections-manager v1.1.0
 * (c) 2021 Pixel Union
 */

function _typeof(obj) {
  "@babel/helpers - typeof";

  if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") {
    _typeof = function (obj) {
      return typeof obj;
    };
  } else {
    _typeof = function (obj) {
      return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj;
    };
  }

  return _typeof(obj);
}

function _classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}

function _defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}

function _createClass(Constructor, protoProps, staticProps) {
  if (protoProps) _defineProperties(Constructor.prototype, protoProps);
  if (staticProps) _defineProperties(Constructor, staticProps);
  return Constructor;
}

function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }

  return obj;
}

function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);

  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    if (enumerableOnly) symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    });
    keys.push.apply(keys, symbols);
  }

  return keys;
}

function _objectSpread2(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = arguments[i] != null ? arguments[i] : {};

    if (i % 2) {
      ownKeys(Object(source), true).forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    } else if (Object.getOwnPropertyDescriptors) {
      Object.defineProperties(target, Object.getOwnPropertyDescriptors(source));
    } else {
      ownKeys(Object(source)).forEach(function (key) {
        Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
      });
    }
  }

  return target;
}

/**
 * Allows a callback to be run once, when a target intersects the viewport.
 * @constructor
 * @param {Object} [options] options with which to construct the IntersectionObserver
 * @param {string} [options.rootMargin='30%'] A string which specifies a set of offsets to add to
 *                                          the root's bounding_box when calculating intersections.
 * @param {number} [options.threshold=0] Ratio of intersection required to trigger callback
 */
var LazyLoader = /*#__PURE__*/function () {
  function LazyLoader(options) {
    _classCallCheck(this, LazyLoader);

    var defaultOptions = {
      rootMargin: '30%',
      threshold: 0
    };
    this.callbacks = new WeakMap();
    this._observerCallback = this._observerCallback.bind(this);
    this.observer = new IntersectionObserver(this._observerCallback, _objectSpread2(_objectSpread2({}, defaultOptions), options));
  }
  /**
   * Add target and callback. Callback is only run once.
   * @add
   * @param {HTMLElement} target Target element
   * @param {function} callback Callback to run when target begins intersecting
   */


  _createClass(LazyLoader, [{
    key: "add",
    value: function add(target, callback) {
      this.callbacks.set(target, callback);
      this.observer.observe(target);
    }
    /**
     * Remove target. Associated callback is also removed.
     * @remove
     * @param {HTMLElement} target Target element
     */

  }, {
    key: "remove",
    value: function remove(target) {
      this.observer.unobserve(target);
      this.callbacks["delete"](target);
    }
    /**
     * Disconnects IntersectionObserver if active
     * @unload
     */

  }, {
    key: "unload",
    value: function unload() {
      this.observer.disconnect();
    }
    /**
     * Runs associated callbacks for each entry, then removes that entry and callback
     * @_observerCallback
     * @param {IntersectionObserverEntry[]} entries Entries to check
     * @param {InterserctionObserver} observer IntersectionObserver instance
     */

  }, {
    key: "_observerCallback",
    value: function _observerCallback(entries, observer) {
      var _this = this;

      entries.forEach(function (_ref) {
        var isIntersecting = _ref.isIntersecting,
            target = _ref.target;

        // do nothing unless target moved into state of intersection
        if (isIntersecting === true) {
          // make sure we stop observing before running the callback, so we don't
          // somehow run the callback twice if element intersects twice quickly
          observer.unobserve(target);

          var callback = _this.callbacks.get(target);

          if (typeof callback === 'function') {
            callback();
          }

          _this.callbacks["delete"](target);
        }
      });
    }
  }]);

  return LazyLoader;
}();

function triggerInstanceEvent(instance, eventName) {
  if (instance && instance[eventName]) {
    for (var _len = arguments.length, args = new Array(_len > 2 ? _len - 2 : 0), _key = 2; _key < _len; _key++) {
      args[_key - 2] = arguments[_key];
    }

    instance[eventName].apply(instance, args);
  }
}

function loadData(el) {
  var dataEl = el.querySelector('[data-section-data]');
  if (!dataEl) return {}; // Load data from attribute, or innerHTML

  var data = dataEl.getAttribute('data-section-data') || dataEl.innerHTML;

  try {
    return JSON.parse(data);
  } catch (error) {
    console.warn("Sections: invalid section data found. ".concat(error.message));
    return {};
  }
}

var ShopifySectionsManager = /*#__PURE__*/function () {
  function ShopifySectionsManager() {
    _classCallCheck(this, ShopifySectionsManager);

    this.handlers = {};
    this.instances = {};
    this.options = {};
    this.lazyLoader = null;
    this._onSectionEvent = this._onSectionEvent.bind(this);
    document.addEventListener('shopify:section:load', this._onSectionEvent);
    document.addEventListener('shopify:section:unload', this._onSectionEvent);
    document.addEventListener('shopify:section:select', this._onSectionEvent);
    document.addEventListener('shopify:section:deselect', this._onSectionEvent);
    document.addEventListener('shopify:section:reorder', this._onSectionEvent);
    document.addEventListener('shopify:block:select', this._onSectionEvent);
    document.addEventListener('shopify:block:deselect', this._onSectionEvent);
  }
  /**
   * Stop listening for section events, and unbind all handlers.
   */


  _createClass(ShopifySectionsManager, [{
    key: "unbind",
    value: function unbind() {
      document.removeEventListener('shopify:section:load', this._onSectionEvent);
      document.removeEventListener('shopify:section:unload', this._onSectionEvent);
      document.removeEventListener('shopify:section:select', this._onSectionEvent);
      document.removeEventListener('shopify:section:deselect', this._onSectionEvent);
      document.removeEventListener('shopify:section:reorder', this._onSectionEvent);
      document.removeEventListener('shopify:block:select', this._onSectionEvent);
      document.removeEventListener('shopify:block:deselect', this._onSectionEvent); // Unload all instances

      for (var i = 0; i < this.instances.length; i++) {
        triggerInstanceEvent(this.instances[i], 'onSectionUnload');
      }

      this.handlers = {};
      this.options = {};
      this.lazyLoader.unload();
      this.lazyLoader = null;
      this.instances = {};
    }
    /**
     * Register a section handler.
     *
     * @param {string} type
     *        The section type to handle. The handler will be called for all
     *        sections with this type.
     *
     * @param {function} handler
     *        The handler function is passed information about a specific section
     *        instance. The handler is expected to return an object that will be
     *        associated with the section instance.
     *
     *        Section handlers are passed an object with the following parameters:
     *          {string} id
     *          An ID that maps to a specific section instance. Typically the
     *          section's filename for static sections, or a generated ID for
     *          dynamic sections.
     *
     *          {string} type
     *          The section type, as supplied when registered.
     *
     *          {Element} el
     *          The root DOM element for the section instance.
     *
     *          {Object} data
     *          Data loaded from the section script element. Defaults to an
     *          empty object.
     *
     *          {Function} postMessage
     *          A function that can be called to pass messages between sections.
     *          The function should be called with a message "name", and
     *          optionally some data.
     *
     * @param {object} options
     *
     * @param {boolean} options.lazy
     *     If true, sections will only be initialized after they intersect the viewport + 30% margin
     */

  }, {
    key: "register",
    value: function register(type, handler) {
      var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};

      if (this.handlers[type]) {
        console.warn("Sections: section handler already exists of type '".concat(type, "'."));
      } // Store the section handler


      this.handlers[type] = handler; // Store options

      this.options[type] = options; // Init sections for this type

      this._initSections(type);
    }
    /**
     * Initialize sections already on the page.
     */

  }, {
    key: "_initSections",
    value: function _initSections(type) {
      var _this = this;

      // Fetch all existing sections of our type on the page
      var dataEls = document.querySelectorAll("[data-section-type=\"".concat(type, "\"]"));
      if (!dataEls) return; // Create an instance for each section

      var _loop = function _loop(i) {
        var dataEl = dataEls[i];
        var el = dataEl.parentNode; // Get instance ID

        var idEl = el.querySelector('[data-section-id]');

        if (!idEl) {
          console.warn("Sections: unable to find section id for '".concat(type, "'."), el);
          return {
            v: void 0
          };
        }

        var sectionId = idEl.getAttribute('data-section-id');

        if (!sectionId) {
          console.warn("Sections: unable to find section id for '".concat(type, "'."), el);
          return {
            v: void 0
          };
        }

        if (_this.options[type] && _this.options[type].lazy) {
          if (_this.lazyLoader === null) {
            _this.lazyLoader = new LazyLoader();
          }

          _this.lazyLoader.add(el, function () {
            return _this._createInstance(sectionId, el);
          });
        } else {
          _this._createInstance(sectionId, el);
        }
      };

      for (var i = 0; i < dataEls.length; i++) {
        var _ret = _loop(i);

        if (_typeof(_ret) === "object") return _ret.v;
      }
    }
  }, {
    key: "_onSectionEvent",
    value: function _onSectionEvent(event) {
      var el = event.target;
      var _event$detail = event.detail,
          sectionId = _event$detail.sectionId,
          blockId = _event$detail.blockId;
      var instance = this.instances[sectionId];

      switch (event.type) {
        case 'shopify:section:load':
          this._createInstance(sectionId, el);

          break;

        case 'shopify:section:unload':
          triggerInstanceEvent(instance, 'onSectionUnload', {
            el: el,
            id: sectionId
          });

          if (this.lazyLoader) {
            this.lazyLoader.remove(el);
          }

          delete this.instances[sectionId];
          break;

        case 'shopify:section:select':
          triggerInstanceEvent(instance, 'onSectionSelect', {
            el: el,
            id: sectionId
          });
          break;

        case 'shopify:section:deselect':
          triggerInstanceEvent(instance, 'onSectionDeselect', {
            el: el,
            id: sectionId
          });
          break;

        case 'shopify:section:reorder':
          triggerInstanceEvent(instance, 'onSectionReorder', {
            el: el,
            id: sectionId
          });
          break;

        case 'shopify:block:select':
          triggerInstanceEvent(instance, 'onSectionBlockSelect', {
            el: el,
            id: blockId
          });
          break;

        case 'shopify:block:deselect':
          triggerInstanceEvent(instance, 'onSectionBlockDeselect', {
            el: el,
            id: blockId
          });
          break;
      }
    }
  }, {
    key: "_postMessage",
    value: function _postMessage(name, data) {
      var _this2 = this;

      Object.keys(this.instances).forEach(function (id) {
        triggerInstanceEvent(_this2.instances[id], 'onSectionMessage', name, data);
      });
    }
  }, {
    key: "_createInstance",
    value: function _createInstance(id, el) {
      var typeEl = el.querySelector('[data-section-type]');
      if (!typeEl) return;
      var type = typeEl.getAttribute('data-section-type');
      if (!type) return;
      var handler = this.handlers[type];

      if (!handler) {
        console.warn("Sections: unable to find section handler for type '".concat(type, "'."));
        return;
      }

      var data = loadData(el);

      var postMessage = this._postMessage.bind(this);

      this.instances[id] = handler({
        id: id,
        type: type,
        el: el,
        data: data,
        postMessage: postMessage
      });
    }
  }]);

  return ShopifySectionsManager;
}();

/* harmony default export */ const shopify_sections_manager_es = (ShopifySectionsManager);

;// CONCATENATED MODULE: ./node_modules/@pixelunion/age-gate/dist/index.es.js

/*!
 * @pixelunion/age-gate v1.0.4
 * (c) 2022 Pixel Union
 */

function index_es_classCallCheck(instance, Constructor) {
  if (!(instance instanceof Constructor)) {
    throw new TypeError("Cannot call a class as a function");
  }
}
function index_es_defineProperties(target, props) {
  for (var i = 0; i < props.length; i++) {
    var descriptor = props[i];
    descriptor.enumerable = descriptor.enumerable || false;
    descriptor.configurable = true;
    if ("value" in descriptor) descriptor.writable = true;
    Object.defineProperty(target, descriptor.key, descriptor);
  }
}
function index_es_createClass(Constructor, protoProps, staticProps) {
  if (protoProps) index_es_defineProperties(Constructor.prototype, protoProps);
  if (staticProps) index_es_defineProperties(Constructor, staticProps);
  Object.defineProperty(Constructor, "prototype", {
    writable: false
  });
  return Constructor;
}

var scrollLock = __webpack_require__(265);
var isbot = __webpack_require__(616);
function getAge(birthdate) {
  var today = new Date();
  var age = today.getFullYear() - birthdate.getFullYear();
  var m = today.getMonth() - birthdate.getMonth();
  if (m < 0 || m === 0 && today.getDate() < birthdate.getDate()) {
    age--;
  }
  return age;
}
var SiteAgeGate = /*#__PURE__*/function () {
  function SiteAgeGate(el) {
    index_es_classCallCheck(this, SiteAgeGate);
    this._el = el;
    this._ageGateForm = el.querySelector('[data-age-gate]');
    this._ageGateErrorEl = this._ageGateForm.querySelector('[data-age-gate-error]');
    this._requiredAge = this._ageGateForm.dataset.requiredAge;
    this._el.addEventListener('age-gate:open', this._open.bind(this));
    this._el.addEventListener('age-gate:close', this._close.bind(this));
    this._ageGateForm.addEventListener('submit', this._onFormSubmit.bind(this));
    if (isbot(navigator.userAgent)) {
      this._close();
    } else if (this._el.style.display === '') {
      this._open();
    }
  }
  index_es_createClass(SiteAgeGate, [{
    key: "_open",
    value: function _open() {
      scrollLock.disablePageScroll();
      this._el.style.display = '';
    }
  }, {
    key: "_close",
    value: function _close() {
      scrollLock.enablePageScroll();
      this._el.style.display = 'none';
    }
  }, {
    key: "_onFormSubmit",
    value: function _onFormSubmit(event) {
      event.preventDefault();
      event.stopPropagation();
      var data = new FormData(event.target);
      var day = data.get('day');
      var month = data.get('month');
      var year = data.get('year');
      if (day === '' || month === '' || year === '') return;
      var age = getAge(new Date(year, month, day));
      if (age >= this._requiredAge) {
        this._close();
        sessionStorage.setItem('age-gate', age);
      } else {
        this._ageGateErrorEl.style.display = '';
      }
    }
  }]);
  return SiteAgeGate;
}();

var PageAgeGate = /*#__PURE__*/function () {
  function PageAgeGate() {
    index_es_classCallCheck(this, PageAgeGate);
    this._ageGateEl = document.getElementById('age-gate-page');
  }
  index_es_createClass(PageAgeGate, [{
    key: "onSectionLoad",
    value: function onSectionLoad() {
      var openEvent = new CustomEvent('age-gate:open');
      this._ageGateEl.dispatchEvent(openEvent);
    }
  }, {
    key: "onSectionSelect",
    value: function onSectionSelect() {
      var openEvent = new CustomEvent('age-gate:open');
      this._ageGateEl.dispatchEvent(openEvent);
    }
  }, {
    key: "onSectionDeselect",
    value: function onSectionDeselect() {
      var closeEvent = new CustomEvent('age-gate:close');
      this._ageGateEl.dispatchEvent(closeEvent);
    }
  }]);
  return PageAgeGate;
}();



;// CONCATENATED MODULE: ./node_modules/@shopify/theme-addresses/theme-addresses.js
/**
 * CountryProvinceSelector Constructor
 * @param {String} countryOptions the country options in html string
 */
function CountryProvinceSelector(countryOptions) {
  if (typeof countryOptions !== 'string') {
    throw new TypeError(countryOptions + ' is not a string.');
  }
  this.countryOptions = countryOptions;
}

/**
 * Builds the country and province selector with the given node element
 * @param {Node} countryNodeElement The <select> element for country
 * @param {Node} provinceNodeElement The <select> element for province
 * @param {Object} options Additional settings available
 * @param {CountryProvinceSelector~onCountryChange} options.onCountryChange callback after a country `change` event
 * @param {CountryProvinceSelector~onProvinceChange} options.onProvinceChange callback after a province `change` event
 */
CountryProvinceSelector.prototype.build = function (countryNodeElement, provinceNodeElement, options) {
  if (typeof countryNodeElement !== 'object') {
    throw new TypeError(countryNodeElement + ' is not a object.');
  }

  if (typeof provinceNodeElement !== 'object') {
    throw new TypeError(provinceNodeElement + ' is not a object.');
  }

  var defaultValue = countryNodeElement.getAttribute('data-default');
  options = options || {}

  countryNodeElement.innerHTML = this.countryOptions;
  countryNodeElement.value = defaultValue;

  if (defaultValue && getOption(countryNodeElement, defaultValue)) {
    var provinces = buildProvince(countryNodeElement, provinceNodeElement, defaultValue);
    options.onCountryChange && options.onCountryChange(provinces, provinceNodeElement, countryNodeElement);
  }

  // Listen for value change on the country select
  countryNodeElement.addEventListener('change', function (event) {
    var target = event.target;
    var selectedValue = target.value;
    
    var provinces = buildProvince(target, provinceNodeElement, selectedValue);
    options.onCountryChange && options.onCountryChange(provinces, provinceNodeElement, countryNodeElement);
  });

  options.onProvinceChange && provinceNodeElement.addEventListener('change', options.onProvinceChange);
}

/**
 * This callback is called after a user interacted with a country `<select>`
 * @callback CountryProvinceSelector~onCountryChange
 * @param {array} provinces the parsed provinces
 * @param {Node} provinceNodeElement province `<select>` element
 * @param {Node} countryNodeElement country `<select>` element
 */

 /**
 * This callback is called after a user interacted with a province `<select>`
 * @callback CountryProvinceSelector~onProvinceChange
 * @param {Event} event the province selector `change` event object
 */

/**
 * Returns the <option> with the specified value from the
 * given node element
 * A null is returned if no such <option> is found
 */
function getOption(nodeElement, value) {
  return nodeElement.querySelector('option[value="' + value +'"]')
}

/**
 * Builds the options for province selector
 */
function buildOptions (provinceNodeElement, provinces) {
  var defaultValue = provinceNodeElement.getAttribute('data-default');

  provinces.forEach(function (option) {
    var optionElement = document.createElement('option');
    optionElement.value = option[0];
    optionElement.textContent = option[1];

    provinceNodeElement.appendChild(optionElement);
  })

  if (defaultValue && getOption(provinceNodeElement, defaultValue)) {
    provinceNodeElement.value = defaultValue;
  }
}

/**
 * Builds the province selector
 */
function buildProvince (countryNodeElement, provinceNodeElement, selectedValue) {
  var selectedOption = getOption(countryNodeElement, selectedValue);
  var provinces = JSON.parse(selectedOption.getAttribute('data-provinces'));

  provinceNodeElement.options.length = 0;

  if (provinces.length) {
    buildOptions(provinceNodeElement, provinces)
  }

  return provinces;
}

// EXTERNAL MODULE: ./node_modules/@pixelunion/events/dist/EventHandler.js
var EventHandler = __webpack_require__(766);
;// CONCATENATED MODULE: ./source/scripts/utilities/ShippingCalculator.js



class ShippingCalculator {
  constructor({ el }) {
    this.el = el;
    this.events = new EventHandler/* default */.Z();
    this.rates = this.el.querySelector('[data-shipping-rates]');
    this.message = this.el.querySelector('[data-shipping-message]');
    this.zip = this.el.querySelector('[data-shipping-calculator-zipcode]');
    this.submit = this.el.querySelector('.get-rates');
    this.response = this.el.querySelector('[data-shipping-calculator-response]');
    this.countrySelect = this.el.querySelector('[data-shipping-calculator-country]');
    this.provinceSelect = this.el.querySelector('[data-shipping-calculator-province]');
    this.provinceContainer = this.el.querySelector('[data-shipping-calculator-province-container]');

    this.buildCalculator();
  }

  buildCalculator() {
    this.shippingCountryProvinceSelector = new CountryProvinceSelector(this.countrySelect.innerHTML);
    this.shippingCountryProvinceSelector
      .build(
        this.countrySelect,
        this.provinceSelect,
        {
          onCountryChange: provinces => {
            if (provinces.length) {
              this.provinceContainer.style.display = 'block';
            } else {
              this.provinceContainer.style.display = 'none';
            }

            // "Province", "State", "Region", etc. and "Postal Code", "ZIP Code", etc.
            // Even countries without provinces include a label.
            const { label, zip_label: zipLabel } = window.Countries[this.countrySelect.value];
            this.provinceContainer.querySelector('label[for="address_province"]').innerHTML = label;
            this.el.querySelector('label[for="address_zip"]').innerHTML = zipLabel;
          },
        },
      );

    this.events.register(this.submit, 'click', e => {
      e.preventDefault();
      this.getRates();
    });
  }

  getRates() {
    const shippingAddress = {};
    shippingAddress.country = this.countrySelect ? this.countrySelect.value : '';
    shippingAddress.province = this.provinceSelect ? this.provinceSelect.value : '';
    shippingAddress.zip = this.zip ? this.zip.value : '';

    const queryString = Object.keys(shippingAddress)
      .map(key => `${encodeURIComponent(`shipping_address[${key}]`)}=${encodeURIComponent(shippingAddress[key])}`)
      .join('&');

    fetch(`${window.PXUTheme.routes.cart_url}/shipping_rates.json?${queryString}`)
      .then(response => response.json())
      .then(data => this.displayRates(data));
  }

  displayRates(rates) {
    const propertyName = Object.keys(rates);
    this.clearRates();

    if (propertyName[0] === 'shipping_rates') {
      rates.shipping_rates.forEach(rate => {
        const rateLi = document.createElement('li');
        rateLi.innerHTML = `${rate.name}: ${this.formatPrice(rate.price)}`;
        this.rates.appendChild(rateLi);
      });

      if (rates.shipping_rates.length > 1) {
        this.message.innerHTML = `${window.PXUTheme.translation.additional_rates_part_1} ${rates.shipping_rates.length} ${window.PXUTheme.translation.additional_rates_part_2} ${this.zip.value}, ${this.provinceSelect.value}, ${this.countrySelect.value}, ${window.PXUTheme.translation.additional_rates_part_3} ${this.formatPrice(rates.shipping_rates[0].price)}`;
      } else {
        this.message.innerHTML = `${window.PXUTheme.translation.additional_rate} ${this.zip.value}, ${this.provinceSelect.value}, ${this.countrySelect.value}, ${window.PXUTheme.translation.additional_rate_at} ${this.formatPrice(rates.shipping_rates[0].price)}`;
      }

      this.response.classList.add('shipping-rates--display-rates');
    } else {
      this.message.innerHTML = `Error: ${propertyName[0]} ${rates[propertyName[0]]}`;
      this.response.classList.add('shipping-rates--display-error');
    }
  }

  clearRates() {
    this.response.classList.remove('shipping-rates--display-error', 'shipping-rates--display-rates');
    this.message.innerHTML = '';
    this.rates.innerHTML = '';
  }

  formatPrice(price) {
    let formattedPrice;

    if (window.PXUTheme.currency.display_format === 'money_with_currency_format') {
      formattedPrice = `<span class="money">${window.PXUTheme.currency.symbol}${price} ${window.PXUTheme.currency.iso_code}</span>`;
    } else {
      formattedPrice = `<span class="money">${window.PXUTheme.currency.symbol}${price}</span>`;
    }

    return formattedPrice;
  }

  unload() {
    this.events.unregisterAll();
  }
}

;// CONCATENATED MODULE: ./source/scripts/app.js






dist_index_es.init('[data-rimg="lazy"]', { round: 1 });

const sections = new shopify_sections_manager_es();

sections.register('age-gate', section => new PageAgeGate(section));

const ageGatePage = document.getElementById('age-gate-page');

if (ageGatePage) {
  new SiteAgeGate(ageGatePage);
}

// Section Shopify window.PXUTheme.theme editor events

$(document)
.on('shopify:section:reorder', function(e){

  var $target = $(e.target);
  var $parentSection = $('#shopify-section-' + e.detail.sectionId);

  if (window.PXUTheme.jsHeader.enable_overlay == true) {
    window.PXUTheme.jsHeader.unload();
    window.PXUTheme.jsHeader.updateOverlayStyle(window.PXUTheme.jsHeader.sectionUnderlayIsImage());
  }

});

$(document)
.on('shopify:section:load', function(e){

  // Shopify section as jQuery object
  var $section = $(e.target);

  // Vanilla js selection of Shopify section
  var section = document.getElementById('shopify-section-' + e.detail.sectionId);

  // Blocks within section
  var $jsSectionBlocks = $section.find('.shopify-section[class*=js]');

  var sectionObjectUrl = $section.find('[data-theme-editor-load-script]').attr('src');

  // Check classes on schema and look for js (eg. jsMap)
  for (var i = 0; i < section.classList.length; i++) {
    if (section.classList[i].substring(0, 2) === "js"){
      var triggerClass = section.classList[i];

      // Check to see if section script exists
      if (typeof window.PXUTheme[triggerClass] == 'undefined') {
        // make AJAX call to load script
        window.PXUTheme.loadScript(triggerClass, sectionObjectUrl, function () {
          window.PXUTheme[triggerClass].init($(section));
        });
      } else {
        if (window.PXUTheme[triggerClass]) {
          // console.log('Section: ' + triggerClass + ' has been loaded.')
          window.PXUTheme[triggerClass].init($(section));
        } else {
          // console.warn('Uh oh, ' + triggerClass + ' is referenced in section schema class, but can not be found. Make sure "z__' + triggerClass + '.js" and window.PXUTheme.' + triggerClass + '.init() function exists.');
        }
      }
    }
  }

  // Check classes on block element and look for js (eg. jsMap)
  if ($jsSectionBlocks.length > 0) {
    var $jsSectionBlockNames = $jsSectionBlocks.each(function () {
      for (var i = 0; i < this.classList.length; i++) {
        if (this.classList[i].substring(0, 2) === "js") {
          var triggerClass = this.classList[i];
          var $block = $('.'+ triggerClass)
          var blockUrl = $block.find('[data-theme-editor-load-script]').attr('src');

          // Check to see if section script exists
          if (typeof window.PXUTheme[triggerClass] == 'undefined') {
            // make AJAX call to load script
            window.PXUTheme.loadScript(triggerClass, blockUrl, function () {
              window.PXUTheme[triggerClass].init($block);
            });
          } else {
            if (window.PXUTheme[triggerClass]) {
              // console.log('Block: ' + triggerClass + ' has been loaded.')
              window.PXUTheme[triggerClass].init($(this));
            } else {
              // console.warn('Uh oh, ' + triggerClass + ' is referenced in block class, but can not be found. Make sure "z__' + triggerClass + '.js" and window.PXUTheme.' + triggerClass + '.init() function exists.');
            }
          }

        }
      }
    });
  }

  // Load video feature
  window.PXUTheme.video.init();

  // Scrolling animations
  window.PXUTheme.animation.init();

  // Initialize reviews
  window.PXUTheme.productReviews.init();

  // Object Fit Images
  window.PXUTheme.objectFitImages.init();

  // Infinite scrolling
  window.PXUTheme.infiniteScroll.init();

  // Disclosure menus
  window.PXUTheme.disclosure.enable();

  // Search
  $(document).on('click',  '[data-show-search-trigger]', function(){
    window.PXUTheme.jsHeader.showSearch();
  });

  $('.search-overlay__close').on('click', function(){
    window.PXUTheme.jsHeader.hideSearch();
  });

  if (window.PXUTheme.theme_settings.enable_autocomplete == true) {
    window.PXUTheme.predictiveSearch.init();
  }
  // Product review scroll
  window.PXUTheme.productReviews.productReviewScroll();

});


$(document)
.on('shopify:section:unload', function(e){

  // Shopify section as jQuery object
  var $section = $(e.target);

  // Vanilla js selection of Shopify section
  var section = document.getElementById('shopify-section-' + e.detail.sectionId);

  // Blocks within section
  var $jsSectionBlocks = $section.find('.shopify-section[class*=js]');

  // Check classes on schema and look for js (eg. jsMap)
  for (var i = 0; i < section.classList.length; i++) {
    if (section.classList[i].substring(0, 2) === "js"){
      var triggerClass = section.classList[i];
      if (window.PXUTheme[triggerClass]) {
        // console.log('Section: ' + triggerClass + ' is unloaded.')
        window.PXUTheme[triggerClass].unload($(section));
      } else {
        // console.warn('Uh oh, ' + triggerClass + ' is referenced in section schema class, but can not be found. Make sure "z__' + triggerClass + '.js" and window.PXUTheme.' + triggerClass + '.unload() function exists.');
      }
    }
  }

  // Check classes on block element and look for js (eg. jsMap)
  if ($jsSectionBlocks.length > 0) {
    var $jsSectionBlockNames = $jsSectionBlocks.each(function () {
      for (var i = 0; i < this.classList.length; i++) {
        if (this.classList[i].substring(0, 2) === "js") {
          var triggerClass = this.classList[i];
          if (window.PXUTheme[triggerClass]) {
            // console.log('Block: ' + triggerClass + ' is unloaded.')
            window.PXUTheme[triggerClass].unload($(this));
          } else {
            // console.warn('Uh oh, ' + triggerClass + ' is referenced in block class, but can not be found. Make sure "z__' + triggerClass + '.js" and window.PXUTheme.' + triggerClass + '.unload() function exists.');
          }

        }
      }
    });
  }

  // Scrolling animations
  window.PXUTheme.animation.unload($section);

  // QuantityBox
  window.PXUTheme.quantityBox.unload($section);

  // Infinite scrolling
  window.PXUTheme.infiniteScroll.unload($section);

  // Disclosure menus
  window.PXUTheme.disclosure.enable();

});

$(document)
.on('shopify:section:select', function(e){

  // Shopify section as jQuery object
  var $section = $(e.target);

  // Vanilla js selection of Shopify section
  var section = document.getElementById('shopify-section-' + e.detail.sectionId);

  // Force show state when section is selected in theme editor
  for (var i = 0; i < section.classList.length; i++) {
    if (section.classList[i].substring(0, 2) === "js") {
      var triggerClass = section.classList[i];
      if (window.PXUTheme[triggerClass].showThemeEditorState) {
        window.PXUTheme[triggerClass].showThemeEditorState(e.detail.sectionId, $section);
      }
    }
  }

  // Predictive search
  if (window.PXUTheme.theme_settings.enable_autocomplete == true) {
    window.PXUTheme.predictiveSearch.init();
  }

  if($('.tabs').length > 0) {
    window.PXUTheme.tabs.enableTabs();
  }

  if(isScreenSizeLarge() && window.PXUTheme.jsHeader.enable_overlay === true) {
    window.PXUTheme.jsHeader.updateOverlayStyle(window.PXUTheme.jsHeader.sectionUnderlayIsImage());
  }

  if ($('.block__recommended-products').length > 0) {
    var $productPage = $('.block__recommended-products').parents('.product-page');
    window.PXUTheme.jsRecommendedProducts.init($productPage);
  }

});

$(document)
.on('shopify:section:deselect', function(e){

  // Shopify section as jQuery object
  var $section = $(e.target);

  // Vanilla js selection of Shopify section
  var section = document.getElementById('shopify-section-' + e.detail.sectionId);

  // Force hide state when section is selected in theme editor
  for (var i = 0; i < section.classList.length; i++) {
    if (section.classList[i].substring(0, 2) === "js") {
      var triggerClass = section.classList[i];
      if (window.PXUTheme[triggerClass].showThemeEditorState) {
        window.PXUTheme[triggerClass].hideThemeEditorState(e.detail.sectionId, $(section));
      }
    }
  }

});

// Block Shopify window.PXUTheme.theme editor events

$(document)
.on('shopify:block:select', function(e){

  var blockId = e.detail.blockId;
  var $parentSection = $('#shopify-section-' + e.detail.sectionId);
  var $block = $('#shopify-section-' + blockId);

  if($('.jsFeaturedPromos').length > 0) {
    window.PXUTheme.jsFeaturedPromos.blockSelect($parentSection, blockId);
  }

  if($('.jsSlideshowWithText').length > 0) {
    window.PXUTheme.jsSlideshowWithText.blockSelect($parentSection, blockId);
  }

  if ($('.jsSlideshowClassic').length > 0) {
    window.PXUTheme.jsSlideshowClassic.blockSelect($parentSection, blockId);
  }

  if($('.jsTestimonials').length > 0) {
    window.PXUTheme.jsTestimonials.blockSelect($parentSection, blockId);
  }

  // Sidebar collection multi-tag filter
  if ($block.hasClass('sidebar__block')) {
    var $toggleBtn = $block.find('[data-sidebar-block__toggle="closed"]');
    if ($toggleBtn) {
      window.PXUTheme.jsSidebar.openSidebarBlock($toggleBtn);
    }
  }

  // Predictive search
  if (window.PXUTheme.theme_settings.enable_autocomplete == true) {
    window.PXUTheme.predictiveSearch.init();
  }

  // Scrolling animations
  window.PXUTheme.animation.init();

  // Object Fit Images
  window.PXUTheme.objectFitImages.init();

});

$(document)
.on('shopify:block:deselect', function(e){

  var $block = $('#shopify-section-' + e.detail.blockId);

  if ($block.hasClass('sidebar__block')) {
    var $toggleBtn = $block.find('[data-sidebar-block__toggle="open"]');
    if ($toggleBtn) {
      window.PXUTheme.jsSidebar.closeSidebarBlock($toggleBtn);
    }
  }

});

$(document)
.on('shopify:block:load', function(e){



});

// Document ready
$(function() {
  var $jsSections = $('.shopify-section[class*=js]');

  // Loop through sections with js classes and load them in
  var $jsSectionNames = $jsSections.each(function () {
    for (var i = 0; i < this.classList.length; i++) {
      if (this.classList[i].substring(0, 2) === "js"){
        var triggerClass = this.classList[i];
        if (window.PXUTheme[triggerClass]) {
          // console.log('Section: ' + triggerClass + ' has been loaded.')
          window.PXUTheme[triggerClass].init($(this));
        } else {
          // console.warn('Uh oh, ' + triggerClass + ' is referenced in section schema class, but can not be found. Make sure "z__' + triggerClass + '.js" and window.PXUTheme.' + triggerClass + '.init() function exists.');
        }

      }
    }
  });

  var resizeTimer;

  // Store window width in variable
  var width = $(window).width(), height = $(window).height();

  $(window).on('resize', function(e) {

    clearTimeout(resizeTimer);
    resizeTimer = setTimeout(function() {

      window.PXUTheme.objectFitImages.calculateAspectRatio();

      if (window.PXUTheme.jsHeader.header_layout === 'vertical') {
        window.PXUTheme.predictiveSearch.alignVerticalSearch()
      }

      if (!isScreenSizeLarge()){
        // When 798 or less
        window.PXUTheme.mobileMenu.init();

      } else {

        // When larger than 798
        window.PXUTheme.mobileMenu.unload();
      }

    }, 250);

  });

  //Enable plyr
  window.PXUTheme.video.init();

  // Predictive search
  if (window.PXUTheme.theme_settings.enable_autocomplete == true) {
    window.PXUTheme.predictiveSearch.init();
  }

  window.PXUTheme.dropdownMenu();

  window.PXUTheme.disclosure.enable();

  // Scrolling animations
  window.PXUTheme.animation.init();

  // QuantityBox
  window.PXUTheme.quantityBox.init();

  /* Show associated variant image on hover */
  if (window.PXUTheme.theme_settings.show_collection_swatches == true) {
    window.PXUTheme.thumbnail.enableSwatches();
  }

  /* Show secondary image on hover */
  if (window.PXUTheme.theme_settings.show_secondary_image == true) {
    window.PXUTheme.thumbnail.showVariantImage();
  }

  // Quick shop
  if (window.PXUTheme.theme_settings.enable_quickshop) {
    window.PXUTheme.thumbnail.showQuickShop();
  }

  // Currency converter
  if (window.PXUTheme.currencyConverter) {
    window.PXUTheme.currencyConverter.init();
  }

  //Infinite scrolling
  if ($('[data-custom-pagination]').length) {
    window.PXUTheme.infiniteScroll.init();
  }

  //Select event for native multi currency checkout
  $('.shopify-currency-form select').on('change', function () {
    $(this)
      .parents('form')
      .submit();
  });

  // Tabs
  if($('.tabs').length > 0) {
    window.PXUTheme.tabs.enableTabs();
  }

  // Additional checkout buttons
  if (!isScreenSizeLarge()) {
    $('.additional-checkout-buttons').addClass('additional-checkout-buttons--vertical');
  }

  // Accordion
  if($('.accordion, [data-cc-accordion]').length > 0) {
    window.PXUTheme.contentCreator.accordion.init();
  }

  // Backwards compatiblity for Flexslider
  if($('.slider, .flexslider').length > 0) {
    window.PXUTheme.contentCreator.slideshow.init();
  }

  // Object Fit Images
  window.PXUTheme.objectFitImages.init();

  // Responsive Video
  window.PXUTheme.responsiveVideo.init();

  // Flickity IOS Fix
  window.PXUTheme.flickityIosFix();

  // Product review scroll
  window.PXUTheme.productReviews.productReviewScroll();

  if (window.PXUTheme.theme_settings.shipping_calculator_enabled && document.querySelector('[data-shipping-calculator]')) {
    const shippingCalculator = new ShippingCalculator({ el: document.querySelector('[data-shipping-calculator]') });
  }
});

/*============================================================================
Slideshow arrows
==============================================================================*/

if (window.PXUTheme.theme_settings.icon_style == 'icon_solid') {
  window.arrowShape = 'M95.04 46 21.68 46 48.18 22.8 42.91 16.78 4.96 50 42.91 83.22 48.18 77.2 21.68 54 95.04 54 95.04 46z';
} else {
  window.arrowShape = 'M95,48H9.83L41,16.86A2,2,0,0,0,38.14,14L3.59,48.58a1.79,1.79,0,0,0-.25.31,1.19,1.19,0,0,0-.09.15l-.1.2-.06.2a.84.84,0,0,0,0,.17,2,2,0,0,0,0,.78.84.84,0,0,0,0,.17l.06.2.1.2a1.19,1.19,0,0,0,.09.15,1.79,1.79,0,0,0,.25.31L38.14,86A2,2,0,0,0,41,86a2,2,0,0,0,0-2.83L9.83,52H95a2,2,0,0,0,0-4Z';
}

})();

/******/ })()
;


var MY_SELECTOR = ".rh-composition-wrapper" // selector for Set Composition DOM

var observer = new MutationObserver(function(mutations){
  for (var i=0; i < mutations.length; i++){
    for (var j=0; j < mutations[i].addedNodes.length; j++){
      // We're iterating through _all_ the elements as the parser parses them,
      // deciding if they're the one we're looking for.
      if (mutations[i].addedNodes[j].matches(MY_SELECTOR)){
        var rh_wrapper = document.querySelector(".rh-composition-wrapper");
        var lh_wrapper = document.querySelector(".lh-composition-wrapper");

        const all_available_righthand_options = document.querySelectorAll(".rh-composition-wrapper .spb-productoptionswatchwrapper");
        for (var i = 0; i < all_available_righthand_options.length; i++) {
          all_available_righthand_options[i].classList.add("active");
          if ( rh_hidden.indexOf(all_available_righthand_options[i].textContent) != -1 ){
            all_available_righthand_options[i].classList.remove("active");
          }
        }

        const all_available_lefthand_options = document.querySelectorAll(".lh-composition-wrapper .spb-productoptionswatchwrapper");
        for (var i = 0; i < all_available_lefthand_options.length; i++) {
          all_available_lefthand_options[i].classList.add("active");
          if ( lh_hidden.indexOf(all_available_lefthand_options[i].textContent) != -1 ){
            all_available_lefthand_options[i].classList.remove("active");
          }
        }
        document.querySelector(".purchase-details").classList.add("stop-add-to-cart");
        document.querySelector(".quantity-wrapper").classList.add("hidden");
        // We found our element, we're done:
        observer.disconnect();
      };
    }
  }
});

observer.observe(document.documentElement, {
  childList: true,
  subtree: true
});


var open = window.XMLHttpRequest.prototype.open;
function openReplacement(method, url, async, user, password) {
  // console.log(method, url); 

  if ( url == '/cart/add.js' && method == 'POST' ){
    // var group_number;
    // var should_be_changed_quantity;
    // var main_product_id, data_for_update_js, upcharge_group_parent_number;
    // var update_need_products_array = [];
    // var main_product_array=[];
    // var upcharge_product_array=[];
    
    // var main_product_object = {};
    // fetch('/cart.js')        
    // .then((response) => {
    //   return response.json();
    // })
    // .then((response) => {
    //   response.items.forEach((item) => {          
    //     //getting main product id and composition count
    //     if (item.properties){
    //       if (item.properties._io_order_group){
    //         if ( main_product_array.includes(item.variant_id) == false ){
    //           main_product_array.push(item.variant_id);
    //         }
    //         main_product_object.id = item.variant_id;
    //         group_number = item.properties._io_order_group;
    //         if ( item["properties"]["Composition for RH"] ){
    //           should_be_changed_quantity = item["properties"]["Composition for RH"].split(",").length;
    //         }else if( item["properties"]["Composition for LH"] ){
    //           should_be_changed_quantity = item["properties"]["Composition for LH"].split(",").length;
    //         }else{
    //           should_be_changed_quantity = 1;
    //         }
    //         main_product_object.quantity = should_be_changed_quantity;
    //         main_product_id = parseInt(item.variant_id); //main product id
    //         if ( update_need_products_array.includes(main_product_id) == false ){
    //           update_need_products_array.push(main_product_id); //adding main product id to the array list
    //         }
    //         console.log("updated quantities is " + should_be_changed_quantity + "main id is "+ update_need_products_array);
    //       }
    //     }  
    //     console.log(main_product_object);
    //     //end getting main product id and composition count
        
    //     //getting upcharge product id and pushing it to the array
    //     if (item.properties){
    //       if (item.properties._io_parent_order_group){
    //         if ( upcharge_product_array.includes(item.variant_id) == false ){
    //           upcharge_product_array.push(item.variant_id);
    //         }              
    //         let upcharge_product_id = parseInt(item.variant_id);
    //         upcharge_group_parent_number = item.properties._io_parent_order_group;
    //         if ( upcharge_group_parent_number == group_number && update_need_products_array.includes(upcharge_product_id) == false ){
    //           update_need_products_array.push(upcharge_product_id);
    //         }
    //       }
    //     }          
    //     //end getting upcharge product id and pushing it to the array            
    //   });         
    //   // setTimeout(function(){
    //     for ( i = 0; i < update_need_products_array.length; i++ ){          
    //       if (i==0){
    //         data_for_update_js = "updates[" + update_need_products_array[i] + "]=" + should_be_changed_quantity;
    //       }else{
    //         data_for_update_js = data_for_update_js + "&" + "updates[" + update_need_products_array[i] + "]=" + should_be_changed_quantity;
    //       }          
    //     }
    //     console.log(data_for_update_js);
    //     // jQuery.post(window.Shopify.routes.root + 'cart/update.js',
    //     //   data_for_update_js
    //     // );
    //     $.ajax({
    //       type: 'POST',
    //       url: '/cart/update.js',
    //       data: data_for_update_js,
    //       dataType: 'json',
    //       success: function (cart) {
    //         window.PXUTheme.jsAjaxCart.updateView();
    //       },
    //       error: function (XMLHttpRequest, textStatus) {
    //         var response = eval('(' + XMLHttpRequest.responseText + ')');
    //         response = response.description;      
    //       }
    //     });
    //     localStorage.setItem("main_product", main_product_array);
    //     localStorage.setItem("upcharge_product", update_need_products_array);
    //     return false;
    //   // }, 1500)         
    // })
    // .catch((e) => {
    //   console.error(e);
    // });
  }

  return open.apply(this, arguments);    
}

window.XMLHttpRequest.prototype.open = openReplacement;

//Titleist option sets
$(document).on('change', '.titleist-aerotech-selector', function(){  
  $('.additional-swatch-selector').removeClass('show');
  $('.titleist-aerotech-swatch-selector').addClass('show');
  $('.titleist-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.titleist-aerotech-selector option:selected').val();
  if ( selected_brand == 'SteelFiber i95cw (+$80)' || selected_brand == 'SteelFiber i110cw (+$80)' || selected_brand == 'SteelFiber i80cw (+$80)' ){
    $('.titleist-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'SteelFiber i95cw (+$80)' || selected_brand == 'SteelFiber i110cw (+$80)' ){
    $('.titleist-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.titleist-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.titleist-aldila-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.titleist-aldila-swatch-selector').addClass('show');
  $('.titleist-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.titleist-aldila-selector option:selected').val();
  if ( selected_brand == 'ROGUE Black 95 MSI 70' || selected_brand == 'ROGUE Silver 110 MSI 70' || selected_brand == 'Ascent UL 50 HY' ){
    $('.titleist-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ROGUE Black 95 MSI 80' || selected_brand == 'Rogue Max 85H' ){
    $('.titleist-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ASCENT Ultralite 35' ){
    $('.titleist-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ASCENT Ultralite 40' ){
    $('.titleist-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R2' || $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Ascent UL 40 HY' ){
    $('.titleist-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R3' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Ascent UL 50 HY' ){
    $('.titleist-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R2' || $(this).find('input').val() == 'S'){
        $(this).addClass('active');
      }
    })
  }
  $('.titleist-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.titleist-dumina-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.titleist-dumina-swatch-selector').addClass('show');
  $('.titleist-dumina-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.titleist-dumina-selector option:selected').val();
  $('.titleist-dumina-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){    
    $(this).addClass('active');    
  }) 
  $('.titleist-dumina-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.titleist-fujikura-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.titleist-fujikura-swatch-selector').addClass('show');
  $('.titleist-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.titleist-fujikura-selector option:selected').val();
  if ( selected_brand == 'Ventus TR VeloCore Blue 5' || selected_brand == 'Ventus TR VeloCore Red 5' || selected_brand == 'Ventus TR VeloCore Red 6' || selected_brand == 'ATMOS HB Tour Spec Red 7' ){
    $('.titleist-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Ventus TR VeloCore Blue 5' || selected_brand == 'Ventus TR VeloCore Blue 6' || selected_brand == 'Ventus TR VeloCore Blue 7' || selected_brand == 'Ventus TR VeloCore Blue 8' || selected_brand == 'Ventus VeloCore Blue 6' || selected_brand == 'Ventus VeloCore Blue 7' || selected_brand == 'Ventus TR VeloCore Black 6' || selected_brand == 'Ventus TR VeloCore Black 7' || selected_brand == 'Ventus VeloCore Black 6' || selected_brand == 'Ventus VeloCore Black 7' || selected_brand == 'Ventus TR VeloCore Red 5' || selected_brand == 'Ventus TR VeloCore Red 6' || selected_brand == 'Ventus TR VeloCore Red 7' || selected_brand == 'Ventus VeloCore Red 6' || selected_brand == 'Ventus VeloCore Red 7' || selected_brand == 'Air Speeder 40' || selected_brand == 'Atmos Tour Spec Black 6' || selected_brand == 'Atmos Tour Spec Black 7' || selected_brand == 'ATMOS HB Tour Spec Red 7' || selected_brand == 'ATMOS HB Tour Spec Blue 8' || selected_brand == 'ATMOS HB Tour Spec Black 9' || selected_brand == 'Ventus Blue Velcore 8 (+$300)' ){
    $('.titleist-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Ventus TR VeloCore Blue 6' || selected_brand == 'Ventus TR VeloCore Blue 7' || selected_brand == 'Ventus TR VeloCore Blue 8' || selected_brand == 'Ventus VeloCore Blue 6' || selected_brand == 'Ventus VeloCore Blue 7' || selected_brand == 'Ventus VeloCore Blue 8' || selected_brand == 'Ventus TR VeloCore Black 6' || selected_brand == 'Ventus TR VeloCore Black 7' || selected_brand == 'Ventus TR VeloCore Black 8' || selected_brand == 'Ventus VeloCore Black 6' || selected_brand == 'Ventus VeloCore Black 7' || selected_brand == 'Ventus VeloCore Black 8' || selected_brand == 'Ventus TR VeloCore Red 6' || selected_brand == 'Ventus TR VeloCore Red 7' || selected_brand == 'Ventus TR VeloCore Red 8' || selected_brand == 'Ventus VeloCore Red 6' || selected_brand == 'Ventus VeloCore Red 7' || selected_brand == 'Atmos Tour Spec Black 7' || selected_brand == 'ATMOS HB Tour Spec Blue 8' || selected_brand == 'ATMOS HB Tour Spec Blue 9' || selected_brand == 'Ventus Blue Velcore 8 (+$300)' ){
    $('.titleist-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Air Speeder 35' ){
    $('.titleist-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R3' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Air Speeder 40' || selected_brand == 'ATMOS HB Tour Spec Red 7' ){
    $('.titleist-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R2' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Air Speeder 40' ){
    $('.titleist-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R1' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Ventus Black Velcore 9 (+$300)' || selected_brand == 'Ventus Black Velcore 10 (+$300)' ){
    $('.titleist-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  $('.titleist-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.titleist-graphite-design-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.titleist-graphite-design-swatch-selector').addClass('show');
  $('.titleist-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.titleist-graphite-design-selector option:selected').val();
  if ( selected_brand == 'Tour AD DI-5' || selected_brand == 'Tour AD UB 5' ){
    $('.titleist-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R2' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tour AD DI-5' || selected_brand == 'Tour AD UB 5' || selected_brand == 'Tour Ad IZ-5' || selected_brand == 'Tour AD XC-5' || selected_brand == 'Tour AD BB-5' || selected_brand == 'Tour AD MJ-5' || selected_brand == 'Tour AD CQ 5' || selected_brand == 'Tour AD CQ 5' ){
    $('.titleist-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R1' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tour AD DI-5' || selected_brand == 'Tour AD DI-6' || selected_brand == 'Tour AD DI-7' || selected_brand == 'Tour AD DI-8' || selected_brand == 'Tour AD UB 5' || selected_brand == 'Tour AD UB 6' || selected_brand == 'Tour AD UB 8' || selected_brand == 'Tour Ad IZ-5' || selected_brand == 'Tour Ad IZ-6' || selected_brand == 'Tour Ad IZ-7' || selected_brand == 'Tour Ad IZ-8' || selected_brand == 'Tour AD XC-5' || selected_brand == 'Tour AD XC-6' || selected_brand == 'Tour AD XC-7' || selected_brand == 'Tour AD XC-8' || selected_brand == 'Tour AD BB-5' || selected_brand == 'Tour AD BB-6' || selected_brand == 'Tour AD BB-7' || selected_brand == 'Tour AD GP-6' || selected_brand == 'Tour AD GP-7' || selected_brand == 'Tour AD MJ-5' || selected_brand == 'Tour AD MJ-6' || selected_brand == 'Tour AD DI-6 Black' || selected_brand == 'Tour AD DI-7 Black' || selected_brand == 'Tour AD DI-8 Black' || selected_brand == 'Tour AD CQ 5' || selected_brand == 'Tour AD CQ 6' || selected_brand == 'Tour AD CQ 7' || selected_brand == 'Tour AD MT-6' || selected_brand == 'Tour AD TP-6' || selected_brand == 'Tour AD TP-7' || selected_brand == 'Tour AD HD 6' || selected_brand == 'Tour AD HD 7' || selected_brand == 'Tour AD HD 8' || selected_brand == 'Tour AD DI-85 Hybrid (+$170)' || selected_brand == 'Tour AD DI-105 Hybrid (+$170)' || selected_brand == 'Tour AD HY 85 (+$170)' || selected_brand == 'Tour AD IZ-85 Hybrid (+$170)' || selected_brand == 'Tour AD IZ 95 (+$170)' || selected_brand == 'Tour AD DI 95g Driving Iron (+$135)' || selected_brand == 'Tour AD 75 (+$130)' || selected_brand == 'Tour AD 85 (+$130)' || selected_brand == 'Tour AD 95 (+$130)' ){
    $('.titleist-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tour AD DI-6' || selected_brand == 'Tour AD DI-7' || selected_brand == 'Tour AD DI-8' || selected_brand == 'Tour AD UB 5' || selected_brand == 'Tour AD UB 6' || selected_brand == 'Tour AD UB 7' || selected_brand == 'Tour AD UB 8' || selected_brand == 'Tour Ad IZ-5'  || selected_brand == 'Tour Ad IZ-6' || selected_brand == 'Tour Ad IZ-7' || selected_brand == 'Tour Ad IZ-8' || selected_brand == 'Tour AD XC-6' || selected_brand == 'Tour AD XC-7' || selected_brand == 'Tour AD XC-8' || selected_brand == 'Tour AD BB-6' || selected_brand == 'Tour AD BB-7' || selected_brand == 'Tour AD GP-6' || selected_brand == 'Tour AD GP-7' || selected_brand == 'Tour AD MJ-6' || selected_brand == 'Tour AD DI-6 Black' || selected_brand == 'Tour AD DI-7 Black' || selected_brand == 'Tour AD DI-8 Black' || selected_brand == 'Tour AD CQ 5' || selected_brand == 'Tour AD CQ 6' || selected_brand == 'Tour AD CQ 7' || selected_brand == 'Tour AD CQ 8' || selected_brand == 'Tour AD MT-6' || selected_brand == 'Tour AD TP-6' || selected_brand == 'Tour AD TP-7' || selected_brand == 'Tour AD HD 6' || selected_brand == 'Tour AD HD 7' || selected_brand == 'Tour AD HD 8' || selected_brand == 'Tour AD DI-85 Hybrid (+$170)' || selected_brand == 'Tour AD DI-105 Hybrid (+$170)' || selected_brand == 'Tour AD HY 85 (+$170)' || selected_brand == 'Tour AD IZ-85 Hybrid (+$170)' || selected_brand == 'Tour AD IZ 95 (+$170)' || selected_brand == 'Tour AD DI 95g Driving Iron (+$135)' || selected_brand == 'Tour AD 95 (+$130)' ){
    $('.titleist-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tour AD DI-85 Hybrid (+$170)' || selected_brand == 'Tour AD HY 85 (+$170)' ){
    $('.titleist-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tour AD DI-6' || selected_brand == 'Tour AD UB 6' || selected_brand == 'Tour Ad IZ-6' || selected_brand == 'Tour AD XC-6' || selected_brand == 'Tour AD GP-6' || selected_brand == 'Tour AD MJ-6' || selected_brand == 'Tour AD DI-6 Black' || selected_brand == 'Tour AD CQ 6' || selected_brand == 'Tour AD MT-6' ){
    $('.titleist-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'SR' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tour AD UB 6' || selected_brand == 'Tour AD UB 7' ){
    $('.titleist-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  $('.titleist-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.titleist-mitsubishi-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.titleist-mitsubishi-swatch-selector').addClass('show');
  $('.titleist-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.titleist-mitsubishi-selector option:selected').val();
  if ( selected_brand == 'Tensei 1K Black 65' || selected_brand == 'Tensei 1K Black 75' || selected_brand == 'Tensei 1K Black 85' || selected_brand == 'Tensei AV Blue with Xlink Tech 55' || selected_brand == 'Tensei AV Blue with Xlink Tech 65' || selected_brand == 'Tensei AV Blue with Xlink Tech 75' || selected_brand == 'KURO KAGE Black DC 5G SFW 50' || selected_brand == 'KURO KAGE Black DC 5G 55' || selected_brand == 'Tensei AV RAW Blue SFW 55' || selected_brand == 'Tensei AV RAW Blue 65' || selected_brand == 'Tensei AV RAW Blue 75' || selected_brand == 'Tensei AV RAW White 65' || selected_brand == 'Tensei AV RAW White 75' || selected_brand == 'Tensei AV RAW White 85' || selected_brand == 'Fubuki MV 45' || selected_brand == 'KURO KAGE Black Dual-Core SFW 50' || selected_brand == 'KURO KAGE Black Dual-Core 55' || selected_brand == 'KURO KAGE Limited TiNi 50' || selected_brand == 'KURO KAGE Limited TiNi 60' || selected_brand == 'MMT SpeedMesh 40' || selected_brand == 'Diamana ZF Series 60' || selected_brand == 'Diamana ZF Series 70' || selected_brand == 'Tensei CK Pro Blue 60' || selected_brand == 'Tensei CK Pro Blue 70' || selected_brand == 'MMT SpeedMesh 50 HY' || selected_brand == 'Kuro Kage Black DC 5G 55 HY' || selected_brand == 'Kuro Kage Black DC 5G 65 HY' || selected_brand == 'Tensei AV Blue with Xlink Tech 65 HY' || selected_brand == 'Tensei AV Blue with Xlink Tech 75 HY' || selected_brand == 'Tensei AV Blue RAW 65 HY' || selected_brand == 'Tensei AV Blue RAW 75 HY' || selected_brand == 'Tensei 1K Black 85 HY' || selected_brand == 'Tensei 1K Black 95 HY' || selected_brand == 'Tensei AV White RAW 90 HY' || selected_brand == 'Tensei AV White RAW 100 HY' || selected_brand == 'Kuro Kage Black DC 60 HY' || selected_brand == 'Kuro Kage Black DC 70 HY' || selected_brand == 'Tensei AV Blue 70 HY' || selected_brand == 'Tensei AV Blue 80 HY' || selected_brand == 'Tensei CK Pro Blue 80 HY' || selected_brand == 'Tensei CK Pro Orange 80 HY (+$235)' || selected_brand == 'Tensei CK Pro Orange 90 HY (+$235)' || selected_brand == 'Tensei CK Pro Red 60 HY' || selected_brand == 'Tensei CK Pro Red 70 HY' || selected_brand == 'Tensei CK Pro White 90 HY' || selected_brand == 'Tensei CK Pro White 100 HY' || selected_brand == 'Fubuki MV IR 60 (+$16)' || selected_brand == 'Kuro Kage Ltd. AMC (+$90)' || selected_brand == 'KuroKage TiNi 85 (+$16)' || selected_brand == 'Tensei AV Red AM2 (+$16)' || selected_brand == 'Tensei AV Blue AM2 (+$16)' || selected_brand == 'Tensei AV White AM2 (+$16)' || selected_brand == 'Tensei Pro Red AMC (+$16)' ){
    $('.titleist-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tensei 1K Black 65' || selected_brand == 'Tensei 1K Black 75' || selected_brand == 'Tensei 1K Black 85' || selected_brand == 'Tensei AV Blue with Xlink Tech 55' || selected_brand == 'Tensei AV Blue with Xlink Tech 65' || selected_brand == 'Tensei AV Blue with Xlink Tech 75' || selected_brand == 'KURO KAGE Black DC 5G SFW 50' || selected_brand == 'KURO KAGE Black DC 5G 55' || selected_brand == 'Tensei AV RAW Blue SFW 55' || selected_brand == 'Tensei AV RAW Blue 65' || selected_brand == 'Tensei AV RAW Blue 75' || selected_brand == 'Tensei AV RAW White 65' || selected_brand == 'Tensei AV RAW White 75' || selected_brand == 'Tensei AV RAW White 85' || selected_brand == 'KURO KAGE Black Dual-Core SFW 50' || selected_brand == 'KURO KAGE Black Dual-Core 55' || selected_brand == 'KURO KAGE Limited TiNi 60' || selected_brand == 'Tensei AV Blue with Xlink Tech 65 HY' || selected_brand == 'Tensei AV Blue with Xlink Tech 75 HY' || selected_brand == 'Tensei AV Blue RAW 65 HY' || selected_brand == 'Tensei AV Blue RAW 75 HY' || selected_brand == 'Tensei 1K Black 85 HY' || selected_brand == 'Tensei 1K Black 95 HY' || selected_brand == 'Tensei AV White RAW 90 HY' || selected_brand == 'Tensei AV White RAW 100 HY' || selected_brand == 'Tensei CK Pro Blue 80 HY' || selected_brand == 'Tensei CK Pro Orange 80 HY (+$235)' || selected_brand == 'Tensei CK Pro White 90 HY' || selected_brand == 'Tensei CK Pro White 100 HY' || selected_brand == 'Tensei AV Red AM2 (+$16)' || selected_brand == 'KuroKage TiNi 105 (+$16)' ){
    $('.titleist-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tensei 1K Black 65' || selected_brand == 'Tensei 1K Black 75' || selected_brand == 'Tensei 1K Black 85' || selected_brand == 'Tensei AV Blue with Xlink Tech 65' || selected_brand == 'Tensei AV Blue with Xlink Tech 75' || selected_brand == 'Tensei AV RAW Blue 65' || selected_brand == 'Tensei AV RAW Blue 75' || selected_brand == 'Tensei AV RAW White 65' || selected_brand == 'Tensei AV RAW White 75' || selected_brand == 'Tensei AV RAW White 85' || selected_brand == 'Diamana ZF Series 60' || selected_brand == 'Diamana ZF Series 70' || selected_brand == 'Tensei CK Pro Orange 70' || selected_brand == 'Tensei CK Pro White 60' || selected_brand == 'Tensei CK Pro Orange 90 HY (+$235)' || selected_brand == 'Tensei CK Pro Orange 90 HY (+$235)' ){
    $('.titleist-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tensei AV Blue with Xlink Tech 55' || selected_brand == 'KURO KAGE Black DC 5G SFW 50' || selected_brand == 'Tensei AV RAW Blue SFW 55' || selected_brand == 'MMT SpeedMesh 40' || selected_brand == 'MMT SpeedMesh 50 HY' || selected_brand == 'Kuro Kage Black DC 5G 55 HY' ){
    $('.titleist-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R2' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tensei AV Blue with Xlink Tech 55' || selected_brand == 'Tensei AV Blue with Xlink Tech 65' || selected_brand == 'Tensei AV Blue with Xlink Tech 75' || selected_brand == 'KURO KAGE Black DC 5G SFW 50' || selected_brand == 'KURO KAGE Black DC 5G 55' || selected_brand == 'Tensei AV RAW Blue SFW 55' || selected_brand == 'Tensei AV RAW Blue 65' || selected_brand == 'Tensei AV RAW Blue 75' || selected_brand == 'Fubuki MV 45' || selected_brand == 'KURO KAGE Black Dual-Core SFW 50' || selected_brand == 'KURO KAGE Black Dual-Core 55' || selected_brand == 'KURO KAGE Limited TiNi 50' || selected_brand == 'KURO KAGE Limited TiNi 60' || selected_brand == 'MMT SpeedMesh 40' || selected_brand == 'Tensei CK Pro Blue 60' || selected_brand == 'MMT SpeedMesh 50 HY' || selected_brand == 'Kuro Kage Black DC 5G 55 HY' || selected_brand == 'Kuro Kage Black DC 5G 65 HY' || selected_brand == 'Tensei AV Blue with Xlink Tech 65 HY' || selected_brand == 'Tensei AV Blue with Xlink Tech 75 HY' || selected_brand == 'Tensei AV Blue RAW 65 HY' || selected_brand == 'Tensei AV Blue RAW 75 HY' || selected_brand == 'Kuro Kage Black DC 60 HY' || selected_brand == 'Kuro Kage Black DC 70 HY' || selected_brand == 'Tensei AV Blue 70 HY' || selected_brand == 'Tensei AV Blue 80 HY' || selected_brand == 'Tensei CK Pro Blue 70 HY' || selected_brand == 'Tensei CK Pro Red 60 HY' || selected_brand == 'Fubuki MV IR 55 (+$16)' || selected_brand == 'Kuro Kage Ltd. AMC (+$90)' || selected_brand == 'KuroKage TiNi 85 (+$16)' || selected_brand == 'Tensei AV Red AM2 (+$16)' || selected_brand == 'Tensei AV Blue AM2 (+$16)' || selected_brand == 'Tensei Pro Red AMC (+$16)' ){
    $('.titleist-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KURO KAGE Black DC 5G 55' || selected_brand == 'Fubuki MV 45' || selected_brand == 'KURO KAGE Black Dual-Core SFW 50' || selected_brand == 'KURO KAGE Black Dual-Core 55' || selected_brand == 'Kuro Kage Black DC 60 HY' || selected_brand == 'Tensei CK Pro Red 60 HY' || selected_brand == 'Fubuki MV IR 50 (+$16)' || selected_brand == 'Tensei AV Red AM2 (+$16)' || selected_brand == 'Tensei Pro Red AMC (+$16)' ){
    $('.titleist-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Fubuki MV 39' || selected_brand == 'KURO KAGE Black Dual-Core SFW 40' || selected_brand == 'Kuro Kage Black DC 50 HY' || selected_brand == 'Tensei CK Pro Red 50 HY' || selected_brand == 'Fubuki MV IR 44 (+$16)' || selected_brand == 'Tensei AV Red AM2 (+$16)' || selected_brand == 'Tensei Pro Red AMC (+$16)' ){
    $('.titleist-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'MMT SpeedMesh 35' || selected_brand == 'MMT SpeedMesh 40 HY' ){
    $('.titleist-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R3' ){
        $(this).addClass('active');
      }
    })
  }
  $('.titleist-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.titleist-oban-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.titleist-oban-swatch-selector').addClass('show');
  $('.titleist-oban-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.titleist-oban-selector option:selected').val();
  if ( selected_brand == 'Devotion 6' ){
    $('.titleist-oban-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Devotion 6' || selected_brand == 'Kiyoshi Purple 65' || selected_brand == 'Kiyoshi Purple 75' || selected_brand == 'Kiyoshi Black 65' || selected_brand == 'Kiyoshi Black 75' || selected_brand == 'Kiyoshi White 65' ){
    $('.titleist-oban-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.titleist-oban-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.titleist-project-x-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.titleist-project-x-swatch-selector').addClass('show');
  $('.titleist-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.titleist-project-x-selector option:selected').val();
  if ( selected_brand == 'HZRDUS BLACK 4G 60' || selected_brand == 'HZRDUS BLACK 4G 70' || selected_brand == 'HZRDUS RED CB 50' || selected_brand == 'HZRDUS RED CB 60' || selected_brand == 'HZRDUS Smoke Black RDX 60' || selected_brand == 'HZRDUS Smoke Black RDX 70' || selected_brand == 'HZRDUS Smoke Black RDX 80' || selected_brand == 'EvenFlow Riptide 50' || selected_brand == 'EvenFlow Riptide CB 50' || selected_brand == 'HZRDUS Black 4G 80 HY' || selected_brand == 'HZRDUS Red 60 HY' || selected_brand == 'HZRDUS Red 70 HY' || selected_brand == 'Project X' || selected_brand == 'Project X IO (+$20)' || selected_brand == 'Project X LZ' ){
    $('.titleist-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '5.5' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'HZRDUS BLACK 4G 60' || selected_brand == 'HZRDUS BLACK 4G 70' || selected_brand == 'HZRDUS BLACK 4G 80' || selected_brand == 'HZRDUS RED CB 50' || selected_brand == 'HZRDUS RED CB 60' || selected_brand == 'HZRDUS Smoke Black RDX 60' || selected_brand == 'HZRDUS Smoke Black RDX 70' || selected_brand == 'HZRDUS Smoke Black RDX 80' || selected_brand == 'EvenFlow T1100 White 85' || selected_brand == 'HZRDUS Smoke Yellow 60' || selected_brand == 'HZRDUS Smoke Yellow 70' || selected_brand == 'HZRDUS Smoke Blue RDX 60' || selected_brand == 'HZRDUS Smoke Blue RDX 70' || selected_brand == 'EvenFlow Riptide 50' || selected_brand == 'EvenFlow Riptide 60' || selected_brand == 'EvenFlow Riptide CB 50' || selected_brand == 'EvenFlow Riptide CB 60' || selected_brand == 'HZRDUS Black 4G 80 HY' || selected_brand == 'HZRDUS Black 4G 90 HY' || selected_brand == 'HZRDUS Smoke Black RDX 80 HY' || selected_brand == 'HZRDUS Smoke Black RDX 90 HY' || selected_brand == 'Even Flow Black 85 HYB' || selected_brand == 'Even Flow Blue 85 HYB' || selected_brand == 'Even Flow White 100 HY' || selected_brand == 'HZRDUS Smoke Black 90 HY' || selected_brand == 'HZRDUS Red 60 HY' || selected_brand == 'HZRDUS Red 70 HY' || selected_brand == 'Project X' || selected_brand == 'Project X IO (+$20)' || selected_brand == 'Project X LS (+$20)' || selected_brand == 'Project X LZ' || selected_brand == 'Project X LZ Onyx (+$45)' ){
    $('.titleist-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '6.0' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'HZRDUS BLACK 4G 60' || selected_brand == 'HZRDUS BLACK 4G 70' || selected_brand == 'HZRDUS BLACK 4G 80' || selected_brand == 'HZRDUS RED CB 50' || selected_brand == 'HZRDUS RED CB 60' || selected_brand == 'HZRDUS Smoke Black RDX 60' || selected_brand == 'HZRDUS Smoke Black RDX 70' || selected_brand == 'HZRDUS Smoke Black RDX 80' || selected_brand == 'EvenFlow T1100 White 85' || selected_brand == 'HZRDUS Smoke Yellow 60' || selected_brand == 'HZRDUS Smoke Blue RDX 60' || selected_brand == 'HZRDUS Smoke Blue RDX 70' || selected_brand == 'EvenFlow Riptide 60' || selected_brand == 'EvenFlow Riptide CB 60' || selected_brand == 'HZRDUS Black 4G 80 HY' || selected_brand == 'HZRDUS Black 4G 90 HY' || selected_brand == 'HZRDUS Smoke Black RDX 80 HY' || selected_brand == 'HZRDUS Smoke Black RDX 90 HY' || selected_brand == 'Even Flow Blue 85 HYB' || selected_brand == 'Even Flow White 90 HY' || selected_brand == 'Even Flow White 100 HY' || selected_brand == 'HZRDUS Smoke Black 90 HY' || selected_brand == 'HZRDUS Red 60 HY' || selected_brand == 'HZRDUS Red 70 HY' || selected_brand == 'Project X' || selected_brand == 'Project X LS (+$20)' || selected_brand == 'Project X LZ' || selected_brand == 'Project X LZ Onyx (+$45)' ){
    $('.titleist-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '6.5' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'HZRDUS RED CB 50' || selected_brand == 'HZRDUS RED CB 60' || selected_brand == 'HZRDUS Red 60 HY' || selected_brand == 'Project X' || selected_brand == 'Project X LZ' ){
    $('.titleist-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '5.0' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'HZRDUS Red 50 HY' ){
    $('.titleist-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '4.0' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'HZRDUS RED CB 40' ){
    $('.titleist-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Project X' ){
    $('.titleist-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '7.0' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'HZRDUS Smoke Black RDX 60' || selected_brand == 'HZRDUS Smoke Black RDX 70' || selected_brand == 'HZRDUS Smoke Black RDX 80' || selected_brand == 'EvenFlow Riptide 60' ){
    $('.titleist-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'PRX HZRDUS BLACK 4G 60 TX (Excotic)' || selected_brand == 'PRX HZRDUS BLACK 4G 70 TX (Excotic)' || selected_brand == 'PRX HZRDUS BLACK 4G 80 TX (Excotic)' ){
    $('.titleist-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'Tour X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.titleist-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.titleist-kbs-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.titleist-kbs-swatch-selector').addClass('show');
  $('.titleist-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.titleist-kbs-selector option:selected').val();
  if ( selected_brand == 'KBS $-Taper (+$52)' || selected_brand == 'KBS $-Taper Lite (+$52)' || selected_brand == 'KBS 610 Wedge (+$23)' || selected_brand == 'KBS C-Taper (+$44)' || selected_brand == 'KBS C-Taper Lite (+$44)' || selected_brand == 'KBS Hi-Rev 2.0 (Wedge Only) (+$23)' || selected_brand == 'KBS Tour (+$16)' || selected_brand == 'KBS Tour Lite' || selected_brand == 'KBS Tour V (+$23)' ){
    $('.titleist-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS $-Taper (+$52)' || selected_brand == 'KBS $-Taper Lite (+$52)' || selected_brand == 'KBS C-Taper (+$44)' || selected_brand == 'KBS C-Taper Lite (+$44)' || selected_brand == 'KBS Hi-Rev 2.0 (Wedge Only) (+$23)' || selected_brand == 'KBS Tour (+$16)' || selected_brand == 'KBS Tour V (+$23)' ){
    $('.titleist-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS $-Taper (+$52)' || selected_brand == 'KBS C-Taper (+$44)' || selected_brand == 'KBS Tour (+$16)' ){
    $('.titleist-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R+' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS $-Taper (+$52)' || selected_brand == 'KBS 610 Wedge (+$23)' || selected_brand == 'KBS C-Taper (+$44)' || selected_brand == 'KBS Tour (+$16)' ){
    $('.titleist-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S+' ){
        $(this).addClass('active');
      }
    })
  }
  $('.titleist-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.titleist-nippon-temper-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.titleist-nippon-swatch-selector').addClass('show');
  $('.titleist-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.titleist-nippon-temper-selector option:selected').val();
  if ( selected_brand == 'NS Pro 950GH neo (+$20)' || selected_brand == 'NS Pro Modus 3 Tour 105 (+$20)' || selected_brand == 'NS Pro Modus 3 Tour 120 (+$20)' || selected_brand == 'NS Pro Modus 3 Tour 125 (+$20)' || selected_brand == 'NS Pro Modus 3 Tour 130 (+$20)' || selected_brand == 'NS Pro 850GH (+$20)' || selected_brand == 'NS Pro 880 AMC (+$35)' || selected_brand == 'NS Pro 880 AMC (Chrome Finish)' || selected_brand == 'Titleist NS Pro 105T' ){
    $('.titleist-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'NS Pro 950GH neo (+$20)' || selected_brand == 'NS Pro Modus 3 Tour 105 (+$20)' || selected_brand == 'NS Pro Modus 3 Tour 120 (+$20)' || selected_brand == 'NS Pro Modus 3 Tour 125 (+$20)' || selected_brand == 'NS Pro Modus 3 Tour 130 (+$20)' || selected_brand == 'NS Pro 850GH (+$20)' || selected_brand == 'NS Pro 880 AMC (+$35)' || selected_brand == 'NS Pro 880 AMC (Chrome Finish)' || selected_brand == 'NS Pro 950GH' || selected_brand == 'Titleist NS Pro 105T' ){
    $('.titleist-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'NS Pro 950GH neo (+$20)' || selected_brand == 'NS Pro Modus 3 Tour 105 (+$20)' || selected_brand == 'NS Pro Modus 3 Tour 120 (+$20)' || selected_brand == 'NS Pro Modus 3 Tour 125 (+$20)' || selected_brand == 'NS Pro Modus 3 Tour 130 (+$20)' || selected_brand == 'NS Pro 950GH' || selected_brand == 'Titleist NS Pro 105T' ){
    $('.titleist-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.titleist-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.titleist-true-temper-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.titleist-true-temper-swatch-selector').addClass('show');
  $('.titleist-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.titleist-true-temper-selector option:selected').val();
  if ( selected_brand == 'AMT Black' || selected_brand == 'AMT Black Onyx (+$45)' || selected_brand == 'AMT Red' || selected_brand == 'AMT Red Onyx (+$45)' || selected_brand == 'AMT Tour White' || selected_brand == 'AMT Tour White Onyx (+$45)' || selected_brand == 'Dynamic Gold' || selected_brand == 'Dynamic Gold 105 (+$20)' || selected_brand == 'Dynamic Gold 120 (+$20)' ){
    $('.titleist-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R300' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'AMT Black' || selected_brand == 'AMT Black Onyx (+$45)' || selected_brand == 'AMT Red' || selected_brand == 'AMT Red Onyx (+$45)' || selected_brand == 'AMT Tour White' || selected_brand == 'AMT Tour White Onyx (+$45)' || selected_brand == 'Dynamic Gold' || selected_brand == 'Dynamic Gold 105 (+$20)' || selected_brand == 'Dynamic Gold 115 (Wedge Only)' || selected_brand == 'Dynamic Gold 120 (+$20)' ){
    $('.titleist-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S300' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'AMT Tour White' || selected_brand == 'Dynamic Gold' || selected_brand == 'Dynamic Gold Black Onyx (Wedge Only) (+$45)' ){
    $('.titleist-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S200' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'AMT Tour White' || selected_brand == 'Dynamic Gold' || selected_brand == 'Dynamic Gold Tour Issue (+$45)' || selected_brand == 'Dynamic Gold Tour Issue Onyx (+$45)' ){
    $('.titleist-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S400' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'AMT Tour White' || selected_brand == 'AMT Tour White Onyx (+$45)' || selected_brand == 'Dynamic Gold' || selected_brand == 'Dynamic Gold 120 (+$20)' || selected_brand == 'Dynamic Gold Tour Issue (+$45)' ){
    $('.titleist-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X100' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Dynamic Gold X7 (+$45)' ){
    $('.titleist-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X7' ){
        $(this).addClass('active');
      }
    })
  }
  $('.titleist-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.titleist-ust-mamiya-temper-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.titleist-ust-mamiya-swatch-selector').addClass('show');
  $('.titleist-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.titleist-ust-mamiya-temper-selector option:selected').val();
  if ( selected_brand == 'Recoil 65 (+$20)' || selected_brand == 'Recoil 95 (+$40)' ){
    $('.titleist-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R(F3)' || $(this).find('input').val() == 'S(F4)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Recoil 65 (+$20)' ){
    $('.titleist-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A(F2)' ){
        $(this).addClass('active');
      }
    })
  }
  $('.titleist-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})


//Ping option sets
$(document).on('change', '.ping-ping-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-ping-swatch-selector').addClass('show');
  $('.ping-ping-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-ping-selector option:selected').val();
  if ( selected_brand == 'ALTA CB 55 Black' || selected_brand == 'ALTA CB 65 Black' || selected_brand == 'ALTA CB 70 Black 70' || selected_brand == 'ALTA CB Black' ){
    $('.ping-ping-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'SR' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ALTA CB 55 Black' || selected_brand == 'ALTA CB 65 Black' || selected_brand == 'PING Tour 2.0 Chrome 65' || selected_brand == 'PING Tour 2.0 Chrome 75' || selected_brand == 'PING Tour 173-65' || selected_brand == 'PING Tour 173-75' || selected_brand == 'ALTA CB 70 Black 70' || selected_brand == 'PING Tour 2.0 Chrome 85' || selected_brand == 'ALTA CB Black' || selected_brand == 'AWT 2.0' || selected_brand == 'AWT 2.0 Blk Matte (+$21)' ){
    $('.ping-ping-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ALTA CB 55 Black' || selected_brand == 'ALTA CB 65 Black' || selected_brand == 'PING Tour 2.0 Chrome 65' || selected_brand == 'PING Tour 2.0 Chrome 75' || selected_brand == 'PING Tour 2.0 Black 65' || selected_brand == 'PING Tour 2.0 Black 75' || selected_brand == 'PING Tour 173-65' || selected_brand == 'PING Tour 173-75' || selected_brand == 'ALTA CB 70 Black 70' || selected_brand == 'PING Tour 2.0 Chrome 85' || selected_brand == 'ALTA CB Black' || selected_brand == 'AWT 2.0' || selected_brand == 'AWT 2.0 Blk Matte (+$21)' || selected_brand == 'CFS' ){
    $('.ping-ping-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'PING Tour 2.0 Chrome 65' || selected_brand == 'PING Tour 2.0 Chrome 75' || selected_brand == 'PING Tour 2.0 Black 65' || selected_brand == 'PING Tour 2.0 Black 75' || selected_brand == 'PING Tour 173-65' || selected_brand == 'PING Tour 173-75' || selected_brand == 'PING Tour 2.0 Chrome 85' || selected_brand == 'AWT 2.0' || selected_brand == 'AWT 2.0 Blk Matte (+$21)' || selected_brand == 'CFS' ){
    $('.ping-ping-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Alta Quick' ){
    $('.ping-ping-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '35' || $(this).find('input').val() == '45' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ALTA Distanza 40' || selected_brand == 'ALTA Distanza Black 40' ){
    $('.ping-ping-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '40' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'AWT 2.0' || selected_brand == 'CFS' || selected_brand == 'Z-Z115 Wedge' ){
    $('.ping-ping-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'Wedge' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-ping-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-aldila-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-aldila-swatch-selector').addClass('show');
  $('.ping-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-aldila-selector option:selected').val();
  if ( selected_brand == 'Ascent Red 60 (+$265)' || selected_brand == 'Rogue White 130 MSI 70 (+$220)' || selected_brand == 'Quaranta Sapphire (+$265)' ){
    $('.ping-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Ascent Red 60 (+$265)' || selected_brand == 'Ascent Red 70 (+$265)' || selected_brand == 'Rogue White 130 MSI 60 (+$220)' || selected_brand == 'Rogue White 130 MSI 70 (+$220)' || selected_brand == 'Rogue White 130 MSI 80 (+$220)' || selected_brand == 'RIP Alpha 85 (+$70)' ){
    $('.ping-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Ascent Red 70 (+$265)' || selected_brand == 'Rogue White 130 MSI 60 (+$220)' || selected_brand == 'Rogue White 130 MSI 70 (+$220)' || selected_brand == 'Rogue White 130 MSI 80 (+$220)' || selected_brand == 'RIP Alpha 85 (+$70)' ){
    $('.ping-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Rogue Black 130 MSI 60 (+$375)' || selected_brand == 'Rogue Black 85 (+$70)' ){
    $('.ping-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TR' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Rogue Black 130 MSI 60 (+$375)' || selected_brand == 'Rogue Black 130 MSI 70 (+$375)' || selected_brand == 'Rogue Black 95 (+$70)' ){
    $('.ping-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TS' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Rogue Black 130 MSI 60 (+$375)' || selected_brand == 'Rogue Black 130 MSI 70 (+$375)' || selected_brand == 'Rogue Black 95 (+$70)' ){
    $('.ping-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Quaranta Sapphire (+$265)' ){
    $('.ping-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-aerotech-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-aerotech-swatch-selector').addClass('show');
  $('.ping-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-aerotech-selector option:selected').val();
  if ( selected_brand == 'Steelfiber CW 70i (+$90)' || selected_brand == 'Steelfiber CW 80i (+$90)' || selected_brand == 'Steelfiber CW 95i (+$90)' || selected_brand == 'Steelfiber CW 110i (+$90)' ){
    $('.ping-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Steelfiber CW 80i (+$90)' || selected_brand == 'Steelfiber CW 95i (+$90)' || selected_brand == 'Steelfiber CW 110i (+$90)' ){
    $('.ping-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Steelfiber CW 70i (+$90)' ){
    $('.ping-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'SR' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Steelfiber CW 110i (+$90)' ){
    $('.ping-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-fujikura-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-fujikura-swatch-selector').addClass('show');
  $('.ping-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-fujikura-selector option:selected').val();
  if ( selected_brand == 'VENTUS BLACK w/VELOCORE 6 (+$450)' || selected_brand == 'VENTUS BLACK w/VELOCORE 7 (+$450)' || selected_brand == 'VENTUS BLUE w/VELOCORE 5 (+$450)' || selected_brand == 'VENTUS BLUE w/VELOCORE 6 (+$450)' || selected_brand == 'VENTUS BLUE w/VELOCORE 7 (+$450)' || selected_brand == 'VENTUS RED w/VELOCORE 5 (+$450)' || selected_brand == 'VENTUS RED w/VELOCORE 6 (+$450)' || selected_brand == 'VENTUS RED w/VELOCORE 7 (+$450)' || selected_brand == 'VENTUS TR BLACK w/VELOCORE 6 (+$450)' || selected_brand == 'VENTUS TR BLACK w/VELOCORE 7 (+$450)' || selected_brand == 'VENTUS TR BLUE w/VELOCORE 5 (+$450)' || selected_brand == 'VENTUS TR BLUE w/VELOCORE 6 (+$450)' || selected_brand == 'VENTUS TR BLUE w/VELOCORE 7 (+$450)' || selected_brand == 'VENTUS TR BLUE w/VELOCORE 8 (+$450)' || selected_brand == 'VENTUS TR RED w/VELOCORE 5 (+$450)' || selected_brand == 'VENTUS TR RED w/VELOCORE 6 (+$450)' || selected_brand == 'Ventus HB Blue 7 (+$265)' || selected_brand == 'Ventus HB Blue 8 (+$265)' || selected_brand == 'Motore X HB 7 (+$180)' ){
    $('.ping-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'VENTUS BLACK w/VELOCORE 6 (+$450)' || selected_brand == 'VENTUS BLACK w/VELOCORE 7 (+$450)' || selected_brand == 'VENTUS BLACK w/VELOCORE 8 (+$450)' || selected_brand == 'VENTUS BLUE w/VELOCORE 6 (+$450)' || selected_brand == 'VENTUS BLUE w/VELOCORE 7 (+$450)' || selected_brand == 'VENTUS BLUE w/VELOCORE 8 (+$450)' || selected_brand == 'VENTUS RED w/VELOCORE 6 (+$450)' || selected_brand == 'VENTUS RED w/VELOCORE 7 (+$450)' || selected_brand == 'VENTUS TR BLACK w/VELOCORE 6 (+$450)' || selected_brand == 'VENTUS TR BLACK w/VELOCORE 7 (+$450)' || selected_brand == 'VENTUS TR BLUE w/VELOCORE 6 (+$450)' || selected_brand == 'VENTUS TR BLUE w/VELOCORE 7 (+$450)' || selected_brand == 'VENTUS TR BLUE w/VELOCORE 8 (+$450)' || selected_brand == 'VENTUS TR RED w/VELOCORE 6 (+$450)' || selected_brand == 'Ventus HB Black 9 (+$265)' || selected_brand == 'Ventus HB Black 10 (+$265)' || selected_brand == 'Ventus HB Blue 8 (+$265)' || selected_brand == 'Ventus HB Blue 9 (+$265)' || selected_brand == 'Ventus HB Blue 10 (+$265)'  ){
    $('.ping-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Ventus HB Blue 6 (+$310)' ){
    $('.ping-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R2' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-fst-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-fst-swatch-selector').addClass('show');
  $('.ping-fst-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-fst-selector option:selected').val();
  if ( selected_brand == 'KBS TD 50 (+$265)' || selected_brand == 'KBS TD 70 (+$300)' ){
    $('.ping-fst-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'Category 3 (S)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS TD 50 (+$265)' ){
    $('.ping-fst-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'Category 2 (R)' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-fst-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-graphite-design-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-graphite-design-swatch-selector').addClass('show');
  $('.ping-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-graphite-design-selector option:selected').val();
  if ( selected_brand == 'TOUR AD DI-6 (+$450)' || selected_brand == 'TOUR AD DI-7 (+$450)' || selected_brand == 'TOUR AD DI-6 BLACK (+$450)' || selected_brand == 'TOUR AD HD-6 (+$450)' || selected_brand == 'TOUR AD HD-7 (+$450)' || selected_brand == 'TOUR AD IZ-5 (+$450)' || selected_brand == 'TOUR AD IZ-6 (+$450)' || selected_brand == 'TOUR AD IZ-7 (+$450)' || selected_brand == 'TOUR AD UB-6 (+$450)' || selected_brand == 'TOUR AD UB-7 (+$450)' || selected_brand == 'TOUR AD VR-6 (+$450)' || selected_brand == 'TOUR AD VR-7 (+$450)' || selected_brand == 'TOUR AD XC-6 (+$450)' || selected_brand == 'TOUR AD XC-7 (+$450)' || selected_brand == 'TOUR AD BB-6 (+$450)' || selected_brand == 'TOUR AD BB-7 (+$450)' || selected_brand == 'TOUR AD CQ-6 (+$450)' || selected_brand == 'TOUR AD CQ-7 (+$450)' || selected_brand == 'Tour AD DI 75 (+$265)' || selected_brand == 'Tour AD DI 85 (+$265)' || selected_brand == 'Tour AD HY 75 (+$265)' || selected_brand == 'Tour AD HY 85 (+$265)' || selected_brand == 'Tour AD HY 95 (+$265)'  ){
    $('.ping-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'TOUR AD DI-6 (+$450)' || selected_brand == 'TOUR AD DI-7 (+$450)' || selected_brand == 'TOUR AD DI-8 (+$450)' || selected_brand == 'TOUR AD DI-6 BLACK (+$450)' || selected_brand == 'TOUR AD HD-6 (+$450)' || selected_brand == 'TOUR AD HD-7 (+$450)' || selected_brand == 'TOUR AD IZ-5 (+$450)' || selected_brand == 'TOUR AD IZ-6 (+$450)' || selected_brand == 'TOUR AD IZ-7 (+$450)' || selected_brand == 'TOUR AD UB-6 (+$450)' || selected_brand == 'TOUR AD UB-7 (+$450)' || selected_brand == 'TOUR AD VR-6 (+$450)' || selected_brand == 'TOUR AD VR-7 (+$450)' || selected_brand == 'TOUR AD XC-6 (+$450)' || selected_brand == 'TOUR AD XC-7 (+$450)' || selected_brand == 'TOUR AD BB-6 (+$450)' || selected_brand == 'TOUR AD BB-7 (+$450)' || selected_brand == 'TOUR AD CQ-6 (+$450)' || selected_brand == 'TOUR AD CQ-7 (+$450)' || selected_brand == 'Tour AD DI 85 (+$265)' || selected_brand == 'Tour AD DI 95 (+$265)' || selected_brand == 'Tour AD IZ 85 (+$265)' || selected_brand == 'Tour AD IZ 95 (+$265)' ){
    $('.ping-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tour AD DI 75 (+$265)' || selected_brand == 'Tour AD HY 65 (+$265)' ){
    $('.ping-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-mitsubishi-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-mitsubishi-swatch-selector').addClass('show');
  $('.ping-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-mitsubishi-selector option:selected').val();
  if ( selected_brand == 'Diamana ZF 60 (+$450)' || selected_brand == "KAI'LI BLUE 60 (+$185)" || selected_brand == "KAI'LI RED 60 (+$185)" || selected_brand == "Kuro Kage Silver Dual-Core TiNi 60 (+$185)" || selected_brand == "Tensei AV Orange 55 (+$260)" || selected_brand == "Tensei AV Orange 65 (+$260)" || selected_brand == "Tensei AV Orange 75 (+$260)" || selected_brand == "Tensei AV RAW Blue 65 (+$260)" || selected_brand == "Tensei CK Series Orange 65 (+$220)" || selected_brand == "Tensei CK Series Orange 75 (+$220)" || selected_brand == "Tensei AV RAW Blue 75 (+$125)" || selected_brand == "Tensei CK Pro Series Blue 70 (+$105)" || selected_brand == "Tensei CK Pro Series Orange 80 (+$125)" || selected_brand == "MMT Taper 85 (+$125)" ){
    $('.ping-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Diamana ZF 60 (+$450)' || selected_brand == "KAI'LI BLUE 70 (+$185)" || selected_brand == "KAI'LI WHITE 60" || selected_brand == "KAI'LI WHITE 70" || selected_brand == "KAI'LI BLUE 60 (+$185)" || selected_brand == "KAI'LI BLUE 70 (+$185)" || selected_brand == "KAI'LI RED 60 (+$185)" || selected_brand == "KAI'LI RED 70 (+$185)" || selected_brand == "Kuro Kage Silver Dual-Core TiNi 60 (+$185)" || selected_brand == "Kuro Kage Silver Dual-Core TiNi 70 (+$185)" || selected_brand == "Tensei AV Orange 55 (+$260)" || selected_brand == "Tensei AV Orange 65 (+$260)" || selected_brand == "Tensei AV Orange 75 (+$260)" || selected_brand == "Tensei AV RAW Blue 65 (+$260)" || selected_brand == "Tensei AV RAW Blue 75 (+$260)" || selected_brand == "Tensei CK Series Orange 65 (+$220)" || selected_brand == "Tensei CK Series Orange 75 (+$220)" || selected_brand == "Kai'Li White 80 (+$125)" || selected_brand == "Tensei AV RAW Blue 75 (+$125)" || selected_brand == "Tensei AV RAW White 90 (+$125)" || selected_brand == "Tensei AV RAW White 100 (+$125)" || selected_brand == "Tensei CK Pro Series Blue 80 (+$105)" || selected_brand == "Tensei CK Pro Series Orange 80 (+$125)" || selected_brand == "MMT Taper 105 (+$125)" ){
    $('.ping-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Diamana ZF 60 (+$450)' || selected_brand == "KAI'LI WHITE 60" || selected_brand == "KAI'LI WHITE 70" || selected_brand == "KAI'LI BLUE 70 (+$185)" || selected_brand == "KAI'LI RED 70 (+$185)" || selected_brand == "Kuro Kage Silver Dual-Core TiNi 60 (+$185)" || selected_brand == "Kuro Kage Silver Dual-Core TiNi 70 (+$185)" || selected_brand == "Tensei AV Orange 65 (+$260)" || selected_brand == "Tensei AV Orange 75 (+$260)" || selected_brand == "Tensei AV RAW Blue 65 (+$260)" || selected_brand == "Tensei AV RAW Blue 75 (+$260)" || selected_brand == "Tensei CK Series Orange 75 (+$220)" || selected_brand == "Kai'Li White 80 (+$125)" || selected_brand == "Tensei AV RAW Blue 75 (+$125)" || selected_brand == "Tensei AV RAW White 90 (+$125)" || selected_brand == "Tensei AV RAW White 100 (+$125)" || selected_brand == "Tensei CK Pro Series Orange 80 (+$125)" ){
    $('.ping-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Diamana ZF 70 (+$450)' || selected_brand == "Tensei CK Pro Series Blue 90 (+$105)" || selected_brand == ""  ){
    $('.ping-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-oban-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-oban-swatch-selector').addClass('show');
  $('.ping-oban-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-oban-selector option:selected').val();
  if ( selected_brand == 'ISAWA RED 65 (+$220)' || selected_brand == "ISAWA GLD 50 (+$315)" || selected_brand == "Devotion 5 (+$220)" || selected_brand == "CT 100 (+$95)" ){
    $('.ping-oban-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ISAWA GLD 60 (+$315)' || selected_brand == "Devotion 6 (+$220)" || selected_brand == "Kiyoshi Purple 65 (+$450)" || selected_brand == "CT 100 (+$95)" || selected_brand == "CT 115 (+$95)" || selected_brand == "CT 125 (+$95)" ){
    $('.ping-oban-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Kiyoshi Purple 65 (+$450)" || selected_brand == "CT 115 (+$95)" || selected_brand == "CT 125 (+$95)" ){
    $('.ping-oban-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-oban-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-project-x-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-project-x-swatch-selector').addClass('show');
  $('.ping-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-project-x-selector option:selected').val();
  if ( selected_brand == 'HZRDUS SMOKE BLACK RDX 60 (+$90)' || selected_brand == "HZRDUS SMOKE BLACK RDX 70 (+$90)" || selected_brand == "HZRDUS SMOKE RED RDX 50 (+$90)" || selected_brand == "HZRDUS SMOKE RED RDX 60 (+$90)" || selected_brand == "HZRDUS SMOKE RED RDX 70 (+$90)" || selected_brand == "HZRDUS SMOKE BLUE RDX 60 (+$90)" || selected_brand == "HZRDUS Smoke Blue RDX PVD 60 (+$370)" || selected_brand == "HZRDUS Yellow 75 (+$90)" || selected_brand == "EvenFlow Black 75 (+$90)" || selected_brand == "EvenFlow Riptide 50 (+$90)" || selected_brand == "EvenFlow Riptide CB 50 (+$90)" || selected_brand == "HZRDUS Smoke Red RDX 70" || selected_brand == "EvenFlow Black 85 (+$60)" ){
    $('.ping-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R (5.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'HZRDUS SMOKE BLACK RDX 60 (+$90)' || selected_brand == "HZRDUS SMOKE BLACK RDX 70 (+$90)" || selected_brand == "HZRDUS SMOKE BLACK RDX 80 (+$90)" || selected_brand == "HZRDUS SMOKE RED RDX 50 (+$90)" || selected_brand == "HZRDUS SMOKE RED RDX 60 (+$90)" || selected_brand == "HZRDUS SMOKE RED RDX 70 (+$90)" || selected_brand == "HZRDUS SMOKE BLUE RDX 60 (+$90)" || selected_brand == "HZRDUS SMOKE BLUE RDX 70 (+$90)" || selected_brand == "HZRDUS Smoke Blue RDX PVD 60 (+$370)" || selected_brand == "HZRDUS Smoke Blue RDX PVD 70 (+$370)" || selected_brand == "HZRDUS SMOKE GREEN RDX 60 (+$315)" || selected_brand == "HZRDUS SMOKE GREEN RDX 70 (+$315)" || selected_brand == "HZRDUS Yellow 75 (+$90)" || selected_brand == "EvenFlow Black 85 (+$90)" || selected_brand == "EvenFlow Riptide 60 (+$90)" || selected_brand == "EvenFlow Riptide 70 (+$90)" || selected_brand == "EvenFlow Riptide CB 60 (+$90)" || selected_brand == "EvenFlow Riptide CB 70 (+$90)" || selected_brand == "HZRDUS Smoke Red RDX 80" || selected_brand == "EvenFlow Black 85 (+$60)" ){
    $('.ping-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (6.0)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'HZRDUS SMOKE BLACK RDX 60 (+$90)' || selected_brand == "HZRDUS SMOKE BLACK RDX 70 (+$90)" || selected_brand == "HZRDUS SMOKE BLACK RDX 80 (+$90)" || selected_brand == "HZRDUS SMOKE RED RDX 60 (+$90)" || selected_brand == "HZRDUS SMOKE RED RDX 70 (+$90)" || selected_brand == "HZRDUS SMOKE BLUE RDX 60 (+$90)" || selected_brand == "HZRDUS SMOKE BLUE RDX 70 (+$90)" || selected_brand == "HZRDUS Smoke Blue RDX PVD 60 (+$370)" || selected_brand == "HZRDUS Smoke Blue RDX PVD 70 (+$370)" || selected_brand == "HZRDUS SMOKE GREEN RDX 60 (+$315)" || selected_brand == "HZRDUS SMOKE GREEN RDX 70 (+$315)" || selected_brand == "EvenFlow Black 85 (+$90)" || selected_brand == "EvenFlow Riptide 70 (+$90)" || selected_brand == "EvenFlow Riptide CB 70 (+$90)" || selected_brand == "EvenFlow Blue 65 (+$90)" || selected_brand == "HZRDUS Smoke Red RDX 80" || selected_brand == "EvenFlow Black 85 (+$60)" ){
    $('.ping-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X (6.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'HZRDUS SMOKE RED RDX 50 (+$90)' || selected_brand == 'EvenFlow Riptide CB 40 (+$90)' ){
    $('.ping-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A (5.0)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'HZRDUS Smoke Blue RDX PVD 60 (+$370)' || selected_brand == 'HZRDUS Smoke Blue RDX PVD 70 (+$370)' ){
    $('.ping-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'EvenFlow Riptide CB 40 (+$90)' ){
    $('.ping-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L (4.0)' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-ust-mamiya-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-ust-mamiya-swatch-selector').addClass('show');
  $('.ping-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-ust-mamiya-selector option:selected').val();
  if ( selected_brand == 'LIN-Q M40X White 6 (+$260)' || selected_brand == "Proforce V2 5 (+$65)" || selected_brand == "Helium Nanocore 5 (+$180)" || selected_brand == "Recoil Dart 65" || selected_brand == "Recoil Dart 75" || selected_brand == "Recoil Dart 90" || selected_brand == "Recoil ES SMAC 760 (+$75)" || selected_brand == "Recoil ES SMAC 780 (+$75)" || selected_brand == "Recoil ES 75 (+$60)" ){
    $('.ping-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R (F3)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'LIN-Q M40X White 6 (+$260)' || selected_brand == "LIN-Q M40X White 7 (+$260)" || selected_brand == "Proforce V2 5 (+$65)" || selected_brand == "Proforce V2 6 (+$65)" || selected_brand == "Proforce V2 7 (+$65)" || selected_brand == "Proforce V2 8 (+$65)" || selected_brand == "Helium Nanocore 5 (+$180)" || selected_brand == "Recoil Dart 65" || selected_brand == "Recoil Dart 75" || selected_brand == "Recoil Dart 90" || selected_brand == "Recoil 95" || selected_brand == "Recoil ES SMAC 780 (+$45)" || selected_brand == "Recoil ES 85 (+$60)" ){
    $('.ping-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (F4)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'LIN-Q M40X White 6 (+$260)' || selected_brand == "LIN-Q M40X White 7 (+$260)" || selected_brand == "Proforce V2 6 (+$65)" || selected_brand == "Proforce V2 8 (+$65)" || selected_brand == "Recoil Dart 90" || selected_brand == "Recoil Dart 105" || selected_brand == "Recoil ES 95 (+$60)" ){
    $('.ping-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X (F5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Helium Nanocore 5 (+$180)' ){
    $('.ping-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A (F2)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Recoil Dart 65' || selected_brand == 'Recoil Dart 75' || selected_brand == 'Recoil ES SMAC 760 (+$45)' ){
    $('.ping-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'SR (F2)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Recoil Dart 55' ){
    $('.ping-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L (F1)' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-vacomposites-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-vacomposites-swatch-selector').addClass('show');
  $('.ping-vacomposites-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-vacomposites-selector option:selected').val();
  if ( selected_brand == 'Raijin 2.0 45 (+$535)' || selected_brand == "Raijin 2.0 55 (+$535)" || selected_brand == "Raijin 2.0 65 (+$535)" || selected_brand == "Drago 45 (+$445)" || selected_brand == "Drago 55 (+$445)" || selected_brand == "Nemesys 45 (+$535)" || selected_brand == "Slay 55 (+$370)" || selected_brand == "Vylyn 45 (+$445)" || selected_brand == "Vylyn 55 (+$445)" ){
    $('.ping-vacomposites-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Raijin 2.0 45 (+$535)' || selected_brand == "Raijin 2.0 55 (+$535)" || selected_brand == "Raijin 2.0 65 (+$535)" || selected_brand == "Raijin Black 65 (+$770)" || selected_brand == "Drago 45 (+$445)" || selected_brand == "Drago 55 (+$445)" || selected_brand == "Drago 65 (+$445)" || selected_brand == "Nemesys 45 (+$535)" || selected_brand == "Nemesys 55 (+$535)" || selected_brand == "Nemesys 65 (+$535)" || selected_brand == "Slay 55 (+$370)" || selected_brand == "Slay 65 (+$370)" || selected_brand == "Slay 75 (+$370)" || selected_brand == "Vylyn 45 (+$445)" || selected_brand == "Vylyn 55 (+$445)" || selected_brand == "Vylyn 65 (+$445)" ){
    $('.ping-vacomposites-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Raijin 2.0 55 (+$535)" || selected_brand == "Raijin 2.0 65 (+$535)" || selected_brand == "Raijin 2.0 75 (+$535)" || selected_brand == "Raijin Black 65 (+$770)" || selected_brand == "Drago 55 (+$445)" || selected_brand == "Drago 65 (+$445)" || selected_brand == "Drago 75 (+$445)" || selected_brand == "Nemesys 55 (+$535)" || selected_brand == "Nemesys 65 (+$535)" || selected_brand == "Nemesys 75 (+$535)" || selected_brand == "Slay 55 (+$370)" || selected_brand == "Slay 65 (+$370)" || selected_brand == "Slay 75 (+$370)" || selected_brand == "Vylyn 55 (+$445)" || selected_brand == "Vylyn 65 (+$445)" || selected_brand == "Vylyn 75 (+$445)" ){
    $('.ping-vacomposites-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Raijin 2.0 75 (+$535)" || selected_brand == "Raijin Black 65 (+$770)" || selected_brand == "Drago 65 (+$445)" || selected_brand == "Drago 75 (+$445)" || selected_brand == "Drago 85 (+$445)" || selected_brand == "Nemesys 65 (+$535)" || selected_brand == "Nemesys 75 (+$535)" || selected_brand == "Slay 65 (+$370)" || selected_brand == "Slay 75 (+$370)" || selected_brand == "Vylyn 65 (+$445)" || selected_brand == "Vylyn 75 (+$445)" ){
    $('.ping-vacomposites-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Drago 45 (+$445)" || selected_brand == "Nemesys 45 (+$535)" || selected_brand == "Vylyn 45 (+$445)" ){
    $('.ping-vacomposites-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-vacomposites-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-kbs-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-kbs-design-swatch-selector').addClass('show');
  $('.ping-kbs-design-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-kbs-selector option:selected').val();
  if ( selected_brand == 'KBS Tour Graphite Hybrid Prototype 65 (+$180)' || selected_brand == "KBS Tour Graphite Hybrid Prototype 75 (+$180)" || selected_brand == "KBS Tour Graphite Hybrid Prototype 85 (+$180)" || selected_brand == "KBS Tour Graphite Hybrid Prototype 95 (+$180)" || selected_brand == "KBS $-Taper (+$65)" || selected_brand == "KBS $-Taper Lite (+$65)" || selected_brand == "KBS C-Taper Lite (+$55)" || selected_brand == "KBS Tour" || selected_brand == "KBS Tour Lite (+$45)" || selected_brand == "KBS Tour-V (+$45)" || selected_brand == "KBS HI-REV 2.0 Wedge (+$32)" || selected_brand == "KBS Tour Wedge (+$32)" ){
    $('.ping-kbs-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS Tour Graphite Hybrid Prototype 65 (+$180)' || selected_brand == "KBS Tour Graphite Hybrid Prototype 75 (+$180)" || selected_brand == "KBS $-Taper Lite (+$65)" || selected_brand == "KBS C-Taper Lite (+$55)" || selected_brand == "KBS Tour" || selected_brand == "KBS Tour Lite (+$45)" || selected_brand == "KBS Tour-V (+$45)" || selected_brand == "KBS HI-REV 2.0 Wedge (+$32)" || selected_brand == "KBS Tour Wedge (+$32)" ){
    $('.ping-kbs-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS TGI Tour Graphite Iron (+$90)' ){
    $('.ping-kbs-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '80' || $(this).find('input').val() == '90' || $(this).find('input').val() == '100' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS TGI Graphite Iron (+$90)' ){
    $('.ping-kbs-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '60' || $(this).find('input').val() == '70' || $(this).find('input').val() == '95' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS Max Graphite (+$90)' ){
    $('.ping-kbs-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '45' || $(this).find('input').val() == '55' || $(this).find('input').val() == '65' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS $-Taper (+$65)' || selected_brand == 'KBS C-Taper (+$55)' || selected_brand == "KBS C-Taper Lite (+$55)" || selected_brand == "KBS Tour" || selected_brand == "KBS Tour Lite (+$45)" || selected_brand == "KBS Tour-V (+$45)" || selected_brand == "KBS HI-REV 2.0 Wedge (+$32)" || selected_brand == "KBS Tour Wedge (+$32)" ){
    $('.ping-kbs-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS Tour-V Wedge (+$45)' ){
    $('.ping-kbs-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'Wedge' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-kbs-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-nippon-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-nippon-swatch-selector').addClass('show');
  $('.ping-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-nippon-selector option:selected').val();
  if ( selected_brand == 'NS Pro Modus 3 Tour 105' ){
    $('.ping-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'R' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.ping-true-temper-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.ping-true-temper-swatch-selector').addClass('show');
  $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.ping-true-temper-selector option:selected').val();
  if ( selected_brand == 'Elevate 95' ){
    $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Dynamic Gold' || selected_brand == 'Dynamic Gold 105' || selected_brand == 'Dynamic Gold Pro (+$45)' || selected_brand == 'Dynamic Gold AMT Black (+$75)' || selected_brand == 'Dynamic Gold AMT Tour White (+$75)' ){
    $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R300' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Dynamic Gold' || selected_brand == 'Dynamic Gold 105' || selected_brand == 'Dynamic Gold 120' || selected_brand == 'Dynamic Gold Pro (+$45)' || selected_brand == 'Dynamic Gold AMT Black (+$75)' || selected_brand == 'Dynamic Gold AMT Tour White (+$75)' || selected_brand == 'XP 115 (+$55)' ){
    $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S300' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Dynamic Gold' || selected_brand == 'Dynamic Gold 120' || selected_brand == 'Dynamic Gold Tour Issue (+$75)' || selected_brand == 'Dynamic Gold AMT Tour White (+$75)' || selected_brand == 'Tour Issue Onyx Wedge (+$75)' ){
    $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X100' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Dynamic Gold X7 (+$75)' ){
    $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X7' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Elevate Tour (+$75)' ){
    $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Project X IO (+$55)' || selected_brand == 'Project X LZ (+$35)' || selected_brand == 'Project X (+$70)' ){
    $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R (5.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Dynamic Spinner W (+$30)' ){
    $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'Wedge' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Project X IO (+$55)' || selected_brand == 'Project X LS (+$55)' || selected_brand == 'Project X LZ (+$35)' || selected_brand == 'Project X (+$70)' ){
    $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (6.0)' || $(this).find('input').val() == 'X (6.5)'){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Project X LZ (+$35)' || selected_brand == 'Project X (+$70)' ){
    $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'SR (5.0)'){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Project X Flighted (+$70)' ){
    $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '6.5'){
        $(this).addClass('active');
      }
    })
  }
  $('.ping-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

//Callaway option sets
$(document).on('change', '.call-aerotech-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-aerotech-swatch-selector').addClass('show');
  $('.call-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-aerotech-selector option:selected').val();
  if ( selected_brand == 'STEELFIBER FC 70 (+$80)' ){
    $('.call-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'STEELFIBER FC 80 (+$80)' || selected_brand == 'STEELFIBER FC 90 (+$80)' || selected_brand == 'STEELFIBER i95CW (+$80)' ){
    $('.call-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'STEELFIBER FC 90 (+$80)' || selected_brand == 'STEELFIBER FC 115 (+$80)' || selected_brand == 'STEELFIBER i95CW (+$80)' || selected_brand == 'STEELFIBER i110CW (+$80)' ){
    $('.call-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'STEELFIBER FC 115 (+$80)' || selected_brand == 'STEELFIBER i110CW (+$80)' ){
    $('.call-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.call-aldila-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-aldila-swatch-selector').addClass('show');
  $('.call-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-aldila-selector option:selected').val();
  if ( selected_brand == 'ASCENT PL 40' || selected_brand == 'ASCENT PL 40 (+$15)' ){
    $('.call-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ASCENT PL 40' || selected_brand == 'ASCENT PL 50' || selected_brand == 'ASCENT PL 50 (+$15)' ){
    $('.call-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ASCENT PL 40' || selected_brand == 'ASCENT PL 50' || selected_brand == 'ROGUE WHITE 130 MSI 60' || selected_brand == 'ROGUE WHITE 130 MSI 70' ){
    $('.call-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ROGUE WHITE 130 MSI 60' || selected_brand == 'ROGUE WHITE 130 MSI 70' || selected_brand == 'ROGUE WHITE 130 MSI 80' ){
    $('.call-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ROGUE WHITE 130 MSI 60' || selected_brand == 'ROGUE WHITE 130 MSI 70' || selected_brand == 'ROGUE WHITE 130 MSI 80' ){
    $('.call-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.call-dumina-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-dumina-swatch-selector').addClass('show');
  $('.call-dumina-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-dumina-selector option:selected').val();
  if ( selected_brand == 'AUTOFLEX SF305X (+$1053)' || selected_brand == 'AUTOFLEX SF405 (+$1053)' ){
    $('.call-dumina-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'AUTOFLEX SF505 (+$1053)' ){
    $('.call-dumina-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'AUTOFLEX SF505X (+$1053)' ){
    $('.call-dumina-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'AUTOFLEX SF505XX (+$1053)' ){
    $('.call-dumina-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-dumina-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.call-fujikura-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-fujikura-swatch-selector').addClass('show');
  $('.call-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-fujikura-selector option:selected').val();
  if ( selected_brand == 'VENTUS BLUE 6 (NON VELOCORE)' || selected_brand == 'VENTUS BLUE 7 (NON VELOCORE)' || selected_brand == 'VENTUS BLACK 6 VELOCORE (+$467)' || selected_brand == 'VENTUS BLACK 7 VELOCORE (+$467)' || selected_brand == 'VENTUS BLUE 6 VELOCORE (+$467)' || selected_brand == 'VENTUS BLUE 7 VELOCORE (+$467)' || selected_brand == 'VENTUS BLUE 8 VELOCORE (+$467)' || selected_brand == 'VENTUS RED 7 VELOCORE (+$467)' || selected_brand == 'VENTUS TR BLACK 6 VELOCORE (+$467)' || selected_brand == 'VENTUS TR BLACK 7 VELOCORE (+$467)' || selected_brand == 'VENTUS TR BLUE 6 VELOCORE (+$350)' || selected_brand == 'VENTUS TR BLUE 7 VELOCORE (+$350)' || selected_brand == 'VENTUS TR BLUE 8 VELOCORE (+$350)' || selected_brand == 'VENTUS TR RED 6 VELOCORE (+$467)' || selected_brand == 'VENTUS TR RED 7 VELOCORE (+$467)' || selected_brand == 'SPEEDER NX BLUE 60 (+$533)' || selected_brand == 'SPEEDER NX BLUE 70 (+$533)' || selected_brand == 'Motore XF1 6 (+$167)' || selected_brand == 'Motore XF1 7 (+$167)' || selected_brand == 'Motore XF3 6 (+$167)' || selected_brand == 'Motore XF3 7 (+$167)' || selected_brand == 'VENTUS BLUE 8 HB (+$200)' ){
    $('.call-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'VENTUS BLUE 5 (NON VELOCORE)' || selected_brand == 'VENTUS BLUE 6 (NON VELOCORE)' || selected_brand == 'VENTUS BLUE 5 VELOCORE (+$467)' || selected_brand == 'VENTUS BLUE 6 VELOCORE (+$467)' || selected_brand == 'VENTUS RED 6 VELOCORE (+$467)' || selected_brand == 'VENTUS TR BLUE 5 VELOCORE (+$467)' || selected_brand == 'SPEEDER NX BLUE 50 (+$533)' || selected_brand == 'Motore XF3 5 (+$167)' || selected_brand == 'VISTA PRO 60 HB (+$78)' || selected_brand == 'VENTUS BLUE 7 HB (+$200)' || selected_brand == 'Vista Pro 60 IR (+$40)' || selected_brand == 'Vista Pro 70 IR (+$40)' ){
    $('.call-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'VENTUS BLACK 8 VELOCORE (+$467)' || selected_brand == 'VENTUS TR BLACK 8 VELOCORE (+$467)' || selected_brand == 'VENTUS TR RED 8 VELOCORE (+$467)' || selected_brand == 'VENTUS BLUE 9 HB (+$200)' ){
    $('.call-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'VENTUS RED 5 VELOCORE (+$467)' || selected_brand == 'VENTUS TR BLACK 8 VELOCORE (+$467)' ){
    $('.call-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R2' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'VENTUS BLACK 9 HB (+$200)' || selected_brand == 'VENTUS BLACK 10 HB (+$200)' ){
    $('.call-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'VENTUS BLUE 6 HB (+$200)' ){
    $('.call-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.call-mitsubishi-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-mitsubishi-swatch-selector').addClass('show');
  $('.call-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-mitsubishi-selector option:selected').val();  
  if ( selected_brand == "KAI'LI BLUE 50" || selected_brand == "KAI'LI BLUE 60" || selected_brand == "KAI'LI RED 50" || selected_brand == "KAI'LI RED 60" || selected_brand == "MMT WOOD 60" || selected_brand == "MMT WOOD 70" || selected_brand == "TENSEI AV-XLINK BLUE 55" || selected_brand == "TENSEI AV-XLINK BLUE 65" || selected_brand == "TENSEI AV-XLINK BLUE 75" ){
    $('.call-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "KAI'LI RED 70" || selected_brand == "KAI'LI WHITE 60" || selected_brand == "KAI'LI WHITE 70" || selected_brand == "KAI'LI WHITE 80" || selected_brand == "MMT WOOD 60" || selected_brand == "MMT WOOD 70" || selected_brand == "MMT WOOD 80" || selected_brand == "TENSEI AV-XLINK BLUE 65" || selected_brand == "TENSEI AV-XLINK BLUE 75" || selected_brand == "TENSEI AV-XLINK WHITE 65" || selected_brand == "TENSEI AV-XLINK WHITE 75" || selected_brand == "TENSEI AV-XLINK WHITE 85" || selected_brand == "MMT HB 80" || selected_brand == "TENSEI AV SERIES WHITE 85 HB" || selected_brand == "TENSEI AV SERIES WHITE 85 IR (+$15)" ){
    $('.call-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "DIAMANA PD-SERIES 60 (+$333)" || selected_brand == "DIAMANA PD-SERIES 70 (+$333)" || selected_brand == "DIAMANA TB-SERIES 60 (+$333)" || selected_brand == "DIAMANA TB-SERIES 70 (+$333)" || selected_brand == "DIAMANA ZF-SERIES 60 (+$167)" || selected_brand == "DIAMANA ZF-SERIES 70 (+$167)" || selected_brand == "DIAMANA BF-SERIES 60 (+$167)" || selected_brand == "DIAMANA BF-SERIES 70 (+$167)" ){
    $('.call-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "MMT HB 70" ){
    $('.call-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' || $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "KAI'LI WHITE 80 HB (+$160)" || selected_brand == "TENSEI AV SERIES BLUE 75 HB" || selected_brand == "TENSEI AV SERIES BLUE 75 IR (+$15)" || selected_brand == "MMT Scoring Wedge 105" || selected_brand == "HZRDUS SILVER 75 (+$15)" ){
    $('.call-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HZRDUS SILVER 65 (+$15)" || selected_brand == "TENSEI AV SERIES WHITE 75 IR (+$15)" || selected_brand == "TENSEI AV SERIES BLUE 65 IR (+$15)" || selected_brand == "TENSEI AV SERIES BLUE 65 HB" || selected_brand == "TENSEI AV SERIES WHITE 75 HB" ){
    $('.call-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "KAI'LI WHITE 90 HB (+$160)" || selected_brand == "MMT Scoring Wedge 125" ){
    $('.call-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "MMT Taper IR (+$80)" ){
    $('.call-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '85R' || $(this).find('input').val() == '95S' || $(this).find('input').val() == '105TX' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.call-project-x-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-project-x-swatch-selector').addClass('show');
  $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-project-x-selector option:selected').val();  
  if ( selected_brand == "HZRDUS SMOKE BLACK RDX 60" || selected_brand == "HZRDUS SMOKE BLACK RDX 70" || selected_brand == "HZRDUS SMOKE RED RDX 60" || selected_brand == "HZRDUS SMOKE RED RDX 70" || selected_brand == "HZRDUS BLACK GEN 4 60" || selected_brand == "HZRDUS BLACK GEN 4 70" || selected_brand == "EVENFLOW RIPTIDE 60" || selected_brand == "EVENFLOW RIPTIDE 70" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R (5.5)' || $(this).find('input').val() == 'S (6.0)' || $(this).find('input').val() == 'X (6.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Project X" || selected_brand == "Project X IO" || selected_brand == "Project X LZ (+$40)" || selected_brand == "Project X LZ 105" || selected_brand == "Project X Rifle Tour Flighted 105" || selected_brand == "Project X Wedge" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '5.5' || $(this).find('input').val() == '6.0' || $(this).find('input').val() == '6.5' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Project X LS" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '6.0' || $(this).find('input').val() == '6.5' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Project X Catalyst 80 Wedge" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'Wedge' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Cypher 40 (+$15)" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '4.0' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Cypher 50 (+$15)" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '5.0' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Cypher 60 (+$15)" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '6.0' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HZRDUS SMOKE RED RDX 80 HB" || selected_brand == "HZRDUS SMOKE BLACK RDX 80 HB" || selected_brand == "HZRDUS SMOKE BLACK 4G 80 HB" || selected_brand == "HZRDUS SMOKE BLACK 4G 90 HB" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (6.0)' || $(this).find('input').val() == 'X (6.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HZRDUS SMOKE RED RDX 70 HB" || selected_brand == "HZRDUS SILVER 65" || selected_brand == "HZRDUS RED LW 4G 70 HB" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R (5.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HZRDUS SILVER 75" || selected_brand == "HZRDUS RED LW 4G 70 HB" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (6.0)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HZRDUS SILVER GEN 4 50" || selected_brand == "HZRDUS SILVER GEN 4 60" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (6.0)' || $(this).find('input').val() == 'R (5.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HZRDUS SMOKE BLUE RDX (PVD VERSION) 60 (+$333)" || selected_brand == "HZRDUS SMOKE BLUE RDX (PVD VERSION) 70 (+$333)" || selected_brand == "HZRDUS SMOKE GREEN (PVD VERSION) 60 (+$460)" || selected_brand == "HZRDUS SMOKE GREEN (PVD VERSION) 70 (+$460)" || selected_brand == "HZRDUS SMOKE GREEN 60 (+$420)" || selected_brand == "HZRDUS SMOKE GREEN 70 (+$420)" || selected_brand == "EVENFLOW RIPTIDE LX 60 (+$333)" || selected_brand == "EVENFLOW RIPTIDE LX 70 (+$333)" || selected_brand == "HZRDUS SMOKE BLACK RDX 80" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (6.0)' || $(this).find('input').val() == 'R (5.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HZRDUS SMOKE RED RDX 50" || selected_brand == "EVENFLOW RIPTIDE 50" || selected_brand == "EVENFLOW RIPTIDE 60" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (6.0)' || $(this).find('input').val() == 'R (5.5)' || $(this).find('input').val() == 'A (5.0)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HZRDUS SILVER GEN 4 70" ){
    $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (6.0)' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.call-graphite-design-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-graphite-design-swatch-selector').addClass('show');
  $('.call-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-graphite-design-selector option:selected').val();  
  if ( selected_brand == "TOUR AD DI-6 (+$333)" || selected_brand == "TOUR AD DI-7 (+$333)" || selected_brand == "TOUR AD DI-8 (+$333)" || selected_brand == "TOUR AD HD-6 (+$333)" || selected_brand == "TOUR AD HD-7 (+$333)" || selected_brand == "TOUR AD IZ-5 (+$333)" || selected_brand == "TOUR AD IZ-6 (+$333)" || selected_brand == "TOUR AD IZ-7 (+$333)" || selected_brand == "TOUR AD IZ-8 (+$333)" || selected_brand == "TOUR AD UB-6 (+$333)" || selected_brand == "TOUR AD UB-7 (+$333)" || selected_brand == "TOUR AD VR-6 (+$333)" || selected_brand == "TOUR AD VR-7 (+$333)" || selected_brand == "TOUR AD XC-6 (+$333)" || selected_brand == "TOUR AD XC-7 (+$333)" || selected_brand == "TOUR AD BB-6 (+$167)" || selected_brand == "TOUR AD BB-7 (+$167)" || selected_brand == "TOUR AD TP-6 (+$167)" || selected_brand == "TOUR AD TP-7 (+$167)" || selected_brand == "TOUR AD TP-8 (+$167)" || selected_brand == "TOUR AD CQ-6 (+$333)" || selected_brand == "TOUR AD CQ-7 (+$333)" || selected_brand == "TOUR AD DI 85 HB (+$287)" || selected_brand == "TOUR AD DI 95 HB (+$287)" || selected_brand == "TOUR AD IZ 85 HB (+$267)" || selected_brand == "TOUR AD IZ 95 HB (+$267)" ){
    $('.call-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "TOUR AD IZ-5 (+$333)" || selected_brand == "TOUR AD UB-5 (+$333)" || selected_brand == "TOUR AD HD-5 (+$333)" || selected_brand == "TOUR AD CQ-5 (+$333)" ){
    $('.call-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R1' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "TOUR AD IZ-6 (+$333)" ){
    $('.call-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'SR' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "TOUR AD HY 65 HB (+$91)" || selected_brand == "TOUR AD HY 75 HB (+$91)" ){
    $('.call-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.call-kbs-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-kbs-swatch-selector').addClass('show');
  $('.call-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-kbs-selector option:selected').val();  
  if ( selected_brand == "TOUR PROTOTYPE 75 HB (+$160)" || selected_brand == "TOUR PROTOTYPE 85 HB (+$160)" || selected_brand == "TOUR PROTOTYPE 95 HB (+$160)" || selected_brand == "KBS $-Taper Lite (+$40)" || selected_brand == "KBS Tour Lite (+$39)" || selected_brand == "560 Junior (+$40)" || selected_brand == "580 Junior (+$40)" || selected_brand == "KBS Hi-Rev 2.0 Wedge" || selected_brand == "KBS Hi-Rev 2.0 Black Wedge" ){
    $('.call-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "KBS $-Taper (+$40)" || selected_brand == "KBS C-Taper Lite (+$40)" || selected_brand == "KBS Tour (+$40)" || selected_brand == "KBS Tour V (+$40)" ){
    $('.call-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "KBS C-Taper (+$40)" ){
    $('.call-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' || $(this).find('input').val() == 'S+' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Max Graphite 65 (+$80)" || selected_brand == "TGI Graphite 90 (+$80)" || selected_brand == "PGI 60 (+$80)" ){
    $('.call-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Max Graphite 55 (+$80)" ){
    $('.call-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "TGI Graphite 100 (+$80)" || selected_brand == "PGI 80 (+$80)" || selected_brand == "KBS 610 Wedge" ){
    $('.call-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "PGI 90 (+$80)" || selected_brand == "KBS 610 Wedge" || selected_brand == "Tour V Wedge" ){
    $('.call-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S+' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "PGI 70 (+$80)" ){
    $('.call-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R+' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.call-kinnetixx-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-kinetixx-swatch-selector').addClass('show');
  $('.call-kinetixx-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-kinnetixx-selector option:selected').val();  
  if ( selected_brand == "BALLISTIC BLACK 60 (+$390)" || selected_brand == "VELOCITY BLACK 60 (+$390)" || selected_brand == "MACH 60 (+$487.50)" || selected_brand == "HYPERSONIC 60 (+$390)" ){
    $('.call-kinetixx-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HYPERSONIC 60 (+$390)" ){
    $('.call-kinetixx-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-kinetixx-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.call-nippon-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-nippon-swatch-selector').addClass('show');
  $('.call-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-nippon-selector option:selected').val();  
  if ( selected_brand == "NS Pro Modus 850 GH neo (+$40)" || selected_brand == "NS Pro Modus 950 GH neo (+$40)" || selected_brand == "NS Pro Modus 3 Tour 105 (+$40)" ){
    $('.call-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "NS Pro Modus 3 Tour 115 (+$32.50)" || selected_brand == "NS Pro Modus 3 Tour 120 (+$40)" || selected_brand == "NS Pro Modus 3 Tour 130 (+$40)" ){
    $('.call-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "NS Pro Modus 3 Tour 105 (+$40)" ){
    $('.call-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "NS Pro Zelos 8 (+$46)" ){
    $('.call-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "NS Pro Modus Wedge 105" || selected_brand == "NS Pro Modus Wedge 115" || selected_brand == "NS Pro Modus Wedge 125" ){
    $('.call-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'Wedge' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.call-oban-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-oban-swatch-selector').addClass('show');
  $('.call-oban-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-oban-selector option:selected').val();  
  if ( selected_brand == "ISAWA RED 55 (+$260)" || selected_brand == "ISAWA RED 65 (+$260)" ){
    $('.call-oban-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "ISAWA GLD 60 (+$338)" || selected_brand == "ISAWA GLD 70 (+$338)" ){
    $('.call-oban-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-oban-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.call-true-temper-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-true-temper-swatch-selector').addClass('show');
  $('.call-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-true-temper-selector option:selected').val();  
  if ( selected_brand == "AMT Black" || selected_brand == "AMT Red" || selected_brand == "Dynamic Gold" || selected_brand == "Dynamic Gold 105" || selected_brand == "Dynamic Gold MID 115 (+$40)" || selected_brand == "Dynamic Gold MID 100 (+$40)" ){
    $('.call-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R300' || $(this).find('input').val() == 'S300' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "AMT Tour White" || selected_brand == "Dynamic Gold" || selected_brand == "Dynamic Gold 105" || selected_brand == "Dynamic Gold 120 Tour Issue (+$40)" || selected_brand == "Dynamic Gold Tour Issue (+$40)" || selected_brand == "Dynamic Gold MID 130 (+$40)" || selected_brand == "Dynamic Gold Tour Issue Black Onyx Wedge" ){
    $('.call-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X100' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "AMT Tour White" || selected_brand == "Dynamic Gold 120 Tour Issue (+$40)" || selected_brand == "Dynamic Gold Tour Issue (+$40)" || selected_brand == "Dynamic Gold MID 130 (+$40)" ){
    $('.call-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S300' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Dynamic Gold Tour Issue Black Onyx Wedge" ){
    $('.call-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S400' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Elevate MPH 95" || selected_brand == "Elevate MPH 85" ){
    $('.call-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Dynamic Gold X7 (+$40)" ){
    $('.call-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X7' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "Dynamic Gold Tour Issue Spinner 115 VSS Wedge" ){
    $('.call-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'Wedge' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.call-ust-mamiya-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.call-ust-mamiya-swatch-selector').addClass('show');
  $('.call-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.call-ust-mamiya-selector option:selected').val();  
  if ( selected_brand == "PROFORCE V2 YELLOW 60" || selected_brand == "PROFORCE V2 YELLOW 70" || selected_brand == "LIN-Q M40X BLUE 60 (+$162.50)" || selected_brand == "LIN-Q M40X BLUE 70 (+$162.50)" || selected_brand == "LIN-Q M40X RED 60 (+$162.50)" || selected_brand == "LIN-Q M40X RED 70 (+$162.50)" || selected_brand == "LIN-Q M40X WHITE 60 (+$162.50)" || selected_brand == "LIN-Q M40X WHITE 70 (+$162.50)" || selected_brand == "RECOIL DART 105 IR (+$80)" || selected_brand == "RECOIL PROTOTYPE 110 IR (+$120)" || selected_brand == "RECOIL PROTOTYPE 125 IR (+$120)" || selected_brand == "RECOIL PROTOTYPE Wedge" ){
    $('.call-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "UST HELIUM NANOCORE BLACK 50 (+$167)" || selected_brand == "UST HELIUM NANOCORE IP 50 (+$267)" || selected_brand == "UST HELIUM NANOCORE IP 60 (+$267)" || selected_brand == "RECOIL DART 75 HB" || selected_brand == "HELIUM NANOCORE IP 60 (+$78)" || selected_brand == "RECOIL DART 65 IR (+$15)" || selected_brand == "RECOIL DART 75 IR (+$15)" || selected_brand == "HELIUM NANOCORE IP 60 (+$80)" || selected_brand == "RECOIL ESX 460 ($15)" || selected_brand == "RECOIL 460 Wedge" ){
    $('.call-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'R' || $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "PROFORCE V2 HL RED 50" ){
    $('.call-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' || $(this).find('input').val() == 'R' || $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "PROFORCE V2 YELLOW 50" || selected_brand == "PROFORCE V2 HB" || selected_brand == "RECOIL DART 90 IR (+$80)" || selected_brand == "RECOIL PROTOTYPE 95 IR (+$120)" ){
    $('.call-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "UST HELIUM NANOCORE BLACK 40 (+$167)" ){
    $('.call-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' || $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "UST HELIUM NANOCORE IP 40 (+$267)" ){
    $('.call-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "PROFORCE V2 HB" ){
    $('.call-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HELIUM NANOCORE IP 50 (+$78)" || selected_brand == "RECOIL 460 Wedge" || selected_brand == "HELIUM NANOCORE IP 50 (+$80)" || selected_brand == "RECOIL ESX 450 ($15)" ){
    $('.call-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' ){
        $(this).addClass('active');
      }
    })
  }
  $('.call-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})


//Taylormade option sets
$(document).on('change', '.tm-accra-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.tm-accra-swatch-selector').addClass('show');
  $('.tm-accra-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.tm-accra-selector option:selected').val();
  if ( selected_brand == 'ACCRA TZ5 65 (+$400)' || selected_brand == 'ACCRA TZ5 75 (+$400)' ){
    $('.tm-accra-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S(M4)' || $(this).find('input').val() == 'X(M5)' ){
        $(this).addClass('active');
      }
    })
  }
  $('.tm-accra-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.tm-aerotech-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.tm-aerotech-swatch-selector').addClass('show');
  $('.tm-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.tm-aerotech-selector option:selected').val();
  if ( selected_brand == 'STEELFIBER i70 (+$70)' || selected_brand == 'STEELFIBER i80 (+$70)' || selected_brand == 'STEELFIBER i95 (+$70)' || selected_brand == 'STEELFIBER FC 90 cw (+$70)' ){
    $('.tm-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  $('.tm-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.tm-aldila-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.tm-aldila-swatch-selector').addClass('show');
  $('.tm-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.tm-aldila-selector option:selected').val();
  if ( selected_brand == 'ROGUE SILVER 110 60' || selected_brand == 'ROGUE SILVER 110 70' ){
    $('.tm-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'NV 45' || selected_brand == 'ASCENT LADIES' || selected_brand == 'ASCENT LADIES' || selected_brand == 'NV 45 (+$15)' || selected_brand == 'ASCENT LADIES (+$15)' ){
    $('.tm-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ASCENT BLACK 55' ){
    $('.tm-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ASCENT BLACK 65' ){
    $('.tm-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ASCENT BLACK 75' || selected_brand == 'ASCENT BLACK 90' ){
    $('.tm-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'ASCENT BLACK 100' ){
    $('.tm-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.tm-aldila-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.tm-fujikura-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.tm-fujikura-swatch-selector').addClass('show');
  $('.tm-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.tm-fujikura-selector option:selected').val();
  if ( selected_brand == 'VENTUS BLUE w/VELOCORE 6 (+$400)' || selected_brand == 'VENTUS BLUE w/VELOCORE 7 (+$400)' || selected_brand == 'VENTUS TR BLUE w/ VELOCORE 6 (+$400)' || selected_brand == 'VENTUS TR BLUE w/ VELOCORE 7 (+$400)' || selected_brand == 'VENTUS TR BLUE w/ VELOCORE 8 (+$400)' || selected_brand == 'VENTUS RED w/ VELOCORE 6 (+$400)' || selected_brand == 'VENTUS RED w/ VELOCORE 7 (+$400)' || selected_brand == 'VENTUS TR RED w/ VELOCORE 6 (+$400)' || selected_brand == 'VENTUS TR RED w/ VELOCORE 7 (+$400)' || selected_brand == 'VENTUS BLACK w/VELOCORE 6 (+$400)' || selected_brand == 'VENTUS BLACK w/VELOCORE 7 (+$400)' || selected_brand == 'VENTUS TR BLACK w/ VELOCORE 6 (+$400)' || selected_brand == 'VENTUS TR BLACK w/ VELOCORE 7 (+$400)' || selected_brand == 'MOTORE X F1 60 (+$200)' || selected_brand == 'MOTORE X F1 70 (+$200)' ){
    $('.tm-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'SPEEDER NX RED 50' || selected_brand == 'VENTUS TR RED 5' || selected_brand == 'SPEEDER NX RED 50 HY' ){
    $('.tm-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' || $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'SPEEDER NX RED 60' || selected_brand == 'VENTUS TR RED 5' || selected_brand == 'SPEEDER NX RED 60 HY' || selected_brand == 'VENTUS RED 7' || selected_brand == 'VENTUS BLUE w/VELOCORE 80 HY (+$150)' || selected_brand == 'VENTUS TR RED HB 7' || selected_brand == 'SPEEDER NX RED 60 (+$15)' || selected_brand == 'VENTUS RED 7 (+$15)' ){
    $('.tm-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'VENTUS TR BLUE w/ VELOCORE 5 (+$400)' || selected_brand == 'VENTUS RED 6' || selected_brand == 'VENTUS TR RED HB 6' || selected_brand == 'VENTUS RED 6 (+$15)' || selected_brand == 'SPEEDER NX RED 60 (+$15)' ){
    $('.tm-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'VENTUS RED 5' || selected_brand == 'VENTUS TR RED HB 5' || selected_brand == 'VENTUS RED 5 (+$15)' || selected_brand == 'SPEEDER NX RED 50 (+$15)' ){
    $('.tm-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'VENTUS BLUE w/VELOCORE 90 HY (+$150)' ){
    $('.tm-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.tm-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.tm-graphite-design-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.tm-graphite-design-swatch-selector').addClass('show');
  $('.tm-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.tm-graphite-design-selector option:selected').val();
  if ( selected_brand == 'Tour AD CQ 6 (+$350)' || selected_brand == 'Tour AD CQ 7 (+$350)' || selected_brand == 'Tour AD DI 6 (+$350)' || selected_brand == 'Tour AD DI 7 (+$350)' || selected_brand == 'Tour AD IZ 6 (+$350)' || selected_brand == 'Tour AD IZ 7 (+$350)' || selected_brand == 'Tour AD XC 6 (+$350)' || selected_brand == 'Tour AD XC 7 (+$350)' || selected_brand == 'TOUR AD DI 85 HYBRID (+$350)' || selected_brand == 'TOUR AD IZ 85 HYBRID (+$350)' ){
    $('.tm-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'TOUR AD IZ 75 HYBRID (+$350)' || selected_brand == 'Tour AD IZ 5 (+$350)' ){
    $('.tm-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tour AD IZ 5 (+$350)' || selected_brand == 'Tour AD CQ 5 (+$350)' ){
    $('.tm-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'Tour AD CQ 5 (+$350)' ){
    $('.tm-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R1' ){
        $(this).addClass('active');
      }
    })
  }
  $('.tm-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.tm-kbs-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.tm-kbs-swatch-selector').addClass('show');
  $('.tm-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.tm-kbs-selector option:selected').val();
  if ( selected_brand == 'TD 60 (+$200)' || selected_brand == 'TD 70 (+$200)' || selected_brand == 'KBS TOUR' || selected_brand == 'KBS C TAPER' || selected_brand == 'KBS C TAPER LITE' || selected_brand == 'KBS $ TAPER CHROME' || selected_brand == 'KBS TOUR' || selected_brand == 'KBS $ TAPER CHROME' || selected_brand == 'KBS C TAPER' || selected_brand == 'KBS C TAPER LITE' ){
    $('.tm-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'TD 50 (+$200)' || selected_brand == 'KBS C TAPER LITE' || selected_brand == 'KBS MAX GRAPHITE 65 (+$40)' || selected_brand == 'KBS MAX 85 MT' || selected_brand == 'KBS TOUR LITE' || selected_brand == 'KBS MAX 85 MT' || selected_brand == 'MAX GRAPHITE 65 (+$40)' ){
    $('.tm-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS MAX 85 MT' || selected_brand == 'KBS MAX GRAPHITE 75 (+$40)' || selected_brand == 'KBS TOUR PROTO HY 85 (+$130)' || selected_brand == 'KBS TOUR LITE' || selected_brand == 'KBS MAX 85 MT' || selected_brand == 'MAX GRAPHITE 75 (+$40)' ){
    $('.tm-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS MAX GRAPHITE 45 (+$40)' || selected_brand == 'MAX GRAPHITE 45 (+$40)' ){
    $('.tm-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS MAX GRAPHITE 55 (+$40)' || selected_brand == 'MAX GRAPHITE 55 (+$40)' ){
    $('.tm-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'KBS TOUR PROTO HY 95 (+$130)' ){
    $('.tm-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'HI-REV-2.0 115 WEDGE' ){
    $('.tm-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'Wedge' ){
        $(this).addClass('active');
      }
    })
  }
  $('.tm-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.tm-la-golf-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.tm-la-golf-swatch-selector').addClass('show');
  $('.tm-la-golf-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.tm-la-golf-selector option:selected').val();
  if ( selected_brand == 'DJ Signature Series 55 (+$600)' ){
    $('.tm-la-golf-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R (3)' || $(this).find('input').val() == 'S (4)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == 'DJ Signature Series 65 (+$600)' ){
    $('.tm-la-golf-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X (5)' || $(this).find('input').val() == 'S (4)' ){
        $(this).addClass('active');
      }
    })
  }
  $('.tm-la-golf-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.tm-mitsubishi-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.tm-mitsubishi-swatch-selector').addClass('show');
  $('.tm-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.tm-mitsubishi-selector option:selected').val();
  if ( selected_brand == "KAI'LI BLUE 60" || selected_brand == "KAI'LI BLUE 70" || selected_brand == "KAI'LI WHITE 60" || selected_brand == "KAI'LI WHITE 70" || selected_brand == "TENSEI AV SERIES BLUE WITH XLINK 65 (+$70)" || selected_brand == "TENSEI AV SERIES BLUE WITH XLINK 75 (+$70)" || selected_brand == "TENSEI AV SERIES WHITE WITH XLINK 65 (+$70)" || selected_brand == "TENSEI AV SERIES WHITE WITH XLINK 75 (+$70)" || selected_brand == "TENSEI AV RAW ORANGE 65 (+$350)" || selected_brand == "TENSEI AV RAW ORANGE 75 (+$350)" || selected_brand == "KAI'LI WHITE 90" ){
    $('.tm-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "DIAMANA S+ 60" || selected_brand == "KAI'LI RED 60" ){
    $('.tm-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' || $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "BASSARA E42 (+$70)" || selected_brand == "BASSARA E60 HY (+$70)" ){
    $('.tm-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' || $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "KAI'LI RED 75 HY" || selected_brand == "MMT 65 (+$40)" ){
    $('.tm-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "KAI'LI RED 85 HY" || selected_brand == "MMT 75 (+$40)" ){
    $('.tm-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "KAI'LI RED 75 HY" ){
    $('.tm-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "MMT 55 (+$40)" ){
    $('.tm-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "MMT 105 (+$40)" || selected_brand == "MMT 125 (+$40)" ){
    $('.tm-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  $('.tm-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.tm-nippon-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.tm-nippon-swatch-selector').addClass('show');
  $('.tm-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.tm-nippon-selector option:selected').val();
  if ( selected_brand == "MODUS 105" || selected_brand == "MODUS 120" || selected_brand == "N.S PRO MODUS 120" ){
    $('.tm-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "N.S PRO MODUS 105" ){
    $('.tm-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  $('.tm-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.tm-project-x-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.tm-project-x-swatch-selector').addClass('show');
  $('.tm-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.tm-project-x-selector option:selected').val();
  if ( selected_brand == "HZRDUS BLACK Gen 4 60" || selected_brand == "HZRDUS BLACK Gen 4 70" || selected_brand == "HZRDUS BLACK Gen 4 80" || selected_brand == "EVENFLOW RIPTIDE 70" || selected_brand == "HZRDUS SMOKE BLUE RDX 60 PVD (+$350)" || selected_brand == "HZRDUS SMOKE BLUE RDX 70 PVD (+$350)" || selected_brand == "HZRDUS SMOKE RDX BLUE 60" || selected_brand == "HZRDUS SMOKE RDX BLUE 70" || selected_brand == "HZRDUS SMOKE GREEN RDX 60 PVD (+$300)" || selected_brand == "HZRDUS SMOKE GREEN RDX 70 PVD (+$300)" || selected_brand == "HZRDUS SMOKE RDX RED 80 HY" || selected_brand == "EVENFLOW RIPTIDE 80 HY" || selected_brand == "PROJECT X" || selected_brand == "PROJECT X LZ" || selected_brand == "EVENFLOW RIPTIDE 60" || selected_brand == "HZRDUS SMOKE RDX RED 60" ){
    $('.tm-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (6.0)' || $(this).find('input').val() == 'X (6.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "PROJECT X" || selected_brand == "HZRDUS BLACK 80 HY" || selected_brand == "HZRDUS SMOKE BLACK RDX 90" || selected_brand == "PROJECT X LS (+$40)" || selected_brand == "PROJECT X IO (+$40)" || selected_brand == "EVENFLOW RIPTIDE CB 60" ){
    $('.tm-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (6.0)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "PROJECT X" || selected_brand == "HZRDUS SMOKE RDX RED 70 HY" || selected_brand == "PROJECT X LZ" || selected_brand == "PROJECT X IO (+$40)" || selected_brand == "EVENFLOW RIPTIDE 60" || selected_brand == "EVENFLOW RIPTIDE 50" || selected_brand == "EVENFLOW RIPTIDE CB 50" || selected_brand == "EVENFLOW RIPTIDE CB 60" || selected_brand == "HZRDUS SMOKE RDX RED 60" ){
    $('.tm-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R (5.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HZRDUS BLACK 90 HY" || selected_brand == "HZRDUS SMOKE BLACK RDX 100" || selected_brand == "PROJECT X LS (+$40)" ){
    $('.tm-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X (6.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "EVENFLOW RIPTIDE CB 40 L" ){
    $('.tm-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L (4.0)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "EVENFLOW RIPTIDE CB 40" ){
    $('.tm-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A (5.0)' ){
        $(this).addClass('active');
      }
    })
  }
  $('.tm-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.tm-true-temper-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.tm-true-temper-swatch-selector').addClass('show');
  $('.tm-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.tm-true-temper-selector option:selected').val();
  if ( selected_brand == "DYNAMIC GOLD" || selected_brand == "DYNAMIC GOLD 105 VSS" || selected_brand == "DYNAMIC GOLD 120" ){
    $('.tm-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S300' || $(this).find('input').val() == 'X100' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "DYNAMIC GOLD TOUR ISSUE (+$40)" ){
    $('.tm-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S400' || $(this).find('input').val() == 'X100' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "DYNAMIC GOLD 95 VSS" ){
    $('.tm-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R300' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "ELEVATE 95 MPH" ){
    $('.tm-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "DYNAMIC GOLD TOUR ISSUE WEDGE" ){
    $('.tm-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S200' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "DYNAMIC GOLD WEDGE" ){
    $('.tm-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'Wedge' ){
        $(this).addClass('active');
      }
    })
  }
  $('.tm-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.tm-ust-mamiya-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.tm-ust-mamiya-swatch-selector').addClass('show');
  $('.tm-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.tm-ust-mamiya-selector option:selected').val();
  if ( selected_brand == "LIN-Q M40X WHITE 60 (+$200)" || selected_brand == "LIN-Q M40X WHITE 70 (+$200)" || selected_brand == "LIN-Q M40X BLUE 60 (+$200)" || selected_brand == "LIN-Q M40X BLUE 70 (+$200)" || selected_brand == "LIN-Q M40X RED 60 (+$200)" || selected_brand == "LIN-Q M40X RED 70 (+$200)" || selected_brand == "PROFORCE V2 7 (+$70)" || selected_brand == "PROFORCE V2 8 HY (+$70)" ){
    $('.tm-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (F4)' || $(this).find('input').val() == 'X (F5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "LIN-Q M40X RED 50 (+$200)" || selected_brand == "HELIUM NANOCORE 5" || selected_brand == "PROFORCE V2 HL 5 (+$70)" || selected_brand == "PROFORCE V2 6 (+$70)" || selected_brand == "RECOIL DART 90 (+$40)" || selected_brand == "PROFORCE V2 HL 6 HY (+$70)" || selected_brand == "RECOIL DART 90 (+$40)" ){
    $('.tm-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R (F3)' || $(this).find('input').val() == 'S (F4)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HELIUM NANOCORE 4 (+$60)" || selected_brand == "PROFORCE V2 HL 5 (+$70)" || selected_brand == "RECOIL DART 65 (+$40)" || selected_brand == "RECOIL DART 65 (+$40)" || selected_brand == "RECOIL ESX 460 (+$40)" ){
    $('.tm-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A (F2)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HELIUM NANOCORE 4 L (+$60)" || selected_brand == "PROFORCE V2 HL 5 HY (+$70)" || selected_brand == "RECOIL ESX 450 (+$40)" ){
    $('.tm-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L (F1)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "PROFORCE V2 8 HY (+$70)" || selected_brand == "RECOIL DART 65 (+$40)" || selected_brand == "RECOIL DART 65 (+$40)" || selected_brand == "RECOIL ESX 460 (+$40)" ){
    $('.tm-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R (F3)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "RECOIL DART 75 (+$40)" || selected_brand == "RECOIL DART 75 (+$40)" || selected_brand == "RECOIL ESX 460 (+$40)" ){
    $('.tm-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (F4)' ){
        $(this).addClass('active');
      }
    })
  }
  $('.tm-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})


//cobra option sets
$(document).on('change', '.cobra-aerotech-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.cobra-aerotech-swatch-selector').addClass('show');
  $('.cobra-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.cobra-aerotech-selector option:selected').val();
  if ( selected_brand == "STEELFIBER FC90 (+$60)" || selected_brand == "STEELFIBER I80CW (+$60)" || selected_brand == "STEELFIBER FC90 (+$60)" || selected_brand == "STEELFIBER I95CW (+$60)" || selected_brand == "STEELFIBER I110CW (+$60)" || selected_brand == "STEELFIBER I80CW (+$60)" || selected_brand == "STEELFIBER I95CW (+$60)" || selected_brand == "STEELFIBER I110CW (+$60)" ){
    $('.cobra-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "STEELFIBER FC115 (+$60)" ){
    $('.cobra-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "STEELFIBER I95CW (+$60)" || selected_brand == "STEELFIBER I110CW (+$60)" || selected_brand == "STEELFIBER I95CW (+$60)" || selected_brand == "STEELFIBER I110CW (+$60)" ){
    $('.cobra-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "STEELFIBER I70CW (+$60)" ){
    $('.cobra-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' || $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  $('.cobra-aerotech-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.cobra-cobra-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.cobra-cobra-swatch-selector').addClass('show');
  $('.cobra-cobra-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.cobra-cobra-selector option:selected').val();
  if ( selected_brand == "COBRA ULTRALIGHT" || selected_brand == "COBRA ULTRALIGHT GRAPHITE" ){
    $('.cobra-cobra-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' || $(this).find('input').val() == 'L' || $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "COBRA ULTRALIGHT STEEL" ){
    $('.cobra-cobra-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  $('.cobra-cobra-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.cobra-fujikura-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.cobra-fujikura-swatch-selector').addClass('show');
  $('.cobra-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.cobra-fujikura-selector option:selected').val();
  if ( selected_brand == "VENTUS BLACK w/VELOCORE 6 (+$300)" || selected_brand == "VENTUS BLACK w/VELOCORE 7 (+$300)" || selected_brand == "VENTUS BLUE w/VELOCORE 7 (+$300)" || selected_brand == "VENTUS BLUE w/VELOCORE 8 (+$300)" || selected_brand == "VENTUS RED w/VELOCORE 7 (+$300)" || selected_brand == "VENTUS TR BLACK w/VELOCORE 6 (+$300)" || selected_brand == "VENTUS TR BLACK w/VELOCORE 7 (+$300)" || selected_brand == "VENTUS TR BLUE w/VELOCORE 7 (+$300)" || selected_brand == "VENTUS TR BLUE w/VELOCORE 8 (+$300)" || selected_brand == "VENTUS TR RED w/VELOCORE 7 (+$300)" || selected_brand == "VENTUS BLUE HB 80 (+$200)" ){
    $('.cobra-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "VENTUS BLUE w/VELOCORE 5 (+$300)" || selected_brand == "VENTUS BLUE w/VELOCORE 6 (+$300)" || selected_brand == "VENTUS RED w/VELOCORE 6 (+$300)" || selected_brand == "VENTUS TR BLUE w/VELOCORE 5 (+$300)" || selected_brand == "VENTUS TR BLUE w/VELOCORE 6 (+$300)" || selected_brand == "VENTUS TR RED w/VELOCORE 5 (+$300)" || selected_brand == "VENTUS TR RED w/VELOCORE 6 (+$300)" ){
    $('.cobra-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "VENTUS BLACK w/VELOCORE 8 (+$300)" || selected_brand == "VENTUS BLUE w/VELOCORE 6 (+$300)" || selected_brand == "VENTUS RED w/VELOCORE 6 (+$300)" || selected_brand == "VENTUS TR BLACK w/VELOCORE 8 (+$300)" || selected_brand == "VENTUS TR BLUE w/VELOCORE 6 (+$300)" || selected_brand == "VENTUS TR RED w/VELOCORE 6 (+$300)" || selected_brand == "VENTUS TR RED w/VELOCORE 8 (+$300)" || selected_brand == "VENTUS BLUE HB 90 (+$200)" || selected_brand == "VENTUS BLUE HB 100 (+$200)" ){
    $('.cobra-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "VENTUS BLACK HB 90 (+$200)" || selected_brand == "VENTUS BLACK HB 100 (+$200)" ){
    $('.cobra-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  $('.cobra-fujikura-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.cobra-graphite-design-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.cobra-graphite-design-swatch-selector').addClass('show');
  $('.cobra-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.cobra-graphite-design-selector option:selected').val();
  if ( selected_brand == "TOUR AD DI-6 BLACK (+$300)" || selected_brand == "TOUR AD DI-7 BLACK (+$300)" || selected_brand == "TOUR AD DI-6 ORANGE (+$300)" || selected_brand == "TOUR AD DI-7 ORANGE (+$300)" || selected_brand == "TOUR AD DI-8 ORANGE (+$300)" || selected_brand == "TOUR AD HD-6 (+$300)" || selected_brand == "TOUR AD HD-7 (+$300)" || selected_brand == "TOUR AD HD-8 (+$300)" || selected_brand == "TOUR AD-IZ 7 (+$300)" || selected_brand == "TOUR AD-IZ 8 (+$300)" || selected_brand == "TOUR AD XC-6 (+$300)" || selected_brand == "TOUR AD XC-7 (+$300)" || selected_brand == "TOUR AD XC-8 (+$300)" || selected_brand == "TOUR AD UB-6 (+$300)" || selected_brand == "TOUR AD UB-7 (+$300)" || selected_brand == "TOUR AD DI-85 ORANGE (+$220)" || selected_brand == "TOUR AD DI-95 ORANGE (+$220)" || selected_brand == "TOUR AD DI-105 ORANGE (+$220)" || selected_brand == "TOUR AD IZ-85 (+$220)" || selected_brand == "TOUR AD IZ-95 (+$220)" ){
    $('.cobra-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "TOUR AD HD-6 (+$300)" || selected_brand == "TOUR AD HD-7 (+$300)" || selected_brand == "TOUR AD UB-6 (+$300)" || selected_brand == "TOUR AD UB-7 (+$300)" ){
    $('.cobra-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "TOUR AD-IZ 5 (+$300)" || selected_brand == "TOUR AD-IZ 6 (+$300)" ){
    $('.cobra-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "TOUR AD-IZ 6 (+$300)" ){
    $('.cobra-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'SR' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "TOUR AD-IZ 4 (+$300)" ){
    $('.cobra-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  $('.cobra-graphite-design-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.cobra-kbs-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.cobra-kbs-swatch-selector').addClass('show');
  $('.cobra-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.cobra-kbs-selector option:selected').val();
  if ( selected_brand == "C-TAPER" || selected_brand == "C-TAPER LITE" || selected_brand == "$-TAPER LITE" || selected_brand == "$-TAPER" || selected_brand == "TOUR" || selected_brand == "TOUR LITE" || selected_brand == "TOUR V" || selected_brand == "HI-REV 2.0" || selected_brand == "HI-REV 2.0 BLACK PVD" || selected_brand == "TOUR DRIVEN 60 (+$260)" || selected_brand == "C-TAPER (+$30)" || selected_brand == "C-TAPER LITE (+$30)" ){
    $('.cobra-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "PROTO HYB 85 (+$200)" || selected_brand == "PROTO HYB 95 (+$200)" || selected_brand == "TOUR DRIVEN 70 (+$260)" ){
    $('.cobra-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "TGI" || selected_brand == "PGI" ){
    $('.cobra-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "TOUR DRIVEN 60 (+$260)" || selected_brand == "TOUR DRIVEN 70 (+$260)" || selected_brand == "TOUR DRIVEN 80 (+$260)" ){
    $('.cobra-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "TOUR DRIVEN 80 (+$260)" ){
    $('.cobra-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "MAX GRAPHITE (+$30)" || selected_brand == "PGI" || selected_brand == "MAX GRAPHITE (+$45)" ){
    $('.cobra-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "PGI" ){
    $('.cobra-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "610 WEDGE" ){
    $('.cobra-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  $('.cobra-kbs-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.cobra-la-golf-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.cobra-la-golf-swatch-selector').addClass('show');
  $('.cobra-la-golf-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.cobra-la-golf-selector option:selected').val();
  if ( selected_brand == "A SERIES MID 50 (+$350)" || selected_brand == "A SERIES MID 60 (+$350)" ){
    $('.cobra-la-golf-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R (3)' || $(this).find('input').val() == 'S (4)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "A SERIES LOW 60 (+$350)" || selected_brand == "A SERIES LOW 70 (+$350)" ){
    $('.cobra-la-golf-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X (5)' || $(this).find('input').val() == 'S (4)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "L - SERIES - 120i (+$130)" || selected_brand == "A SERIES LOW 70 (+$350)" ){
    $('.cobra-la-golf-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "L - SERIES 120i - WV (+$130)" ){
    $('.cobra-la-golf-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'WEDGE' ){
        $(this).addClass('active');
      }
    })
  }
  $('.cobra-la-golf-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.cobra-mitsubishi-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.cobra-mitsubishi-swatch-selector').addClass('show');
  $('.cobra-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.cobra-mitsubishi-selector option:selected').val();
  if ( selected_brand == "KAI'LI BLUE 70" || selected_brand == "KAI'LI WHITE 60" || selected_brand == "KAI'LI WHITE 70" || selected_brand == "KAI'LI BLUE 60" || selected_brand == "MMT HYBRID 80" ){
    $('.cobra-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "KAI'LI BLUE 70" || selected_brand == "KAI'LI WHITE 60" || selected_brand == "KAI'LI WHITE 70" || selected_brand == "KAI'LI BLUE 60" || selected_brand == "MMT HYBRID 70" || selected_brand == "MMT 85 (+$60)" ){
    $('.cobra-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "MMT UTILITY 105 (+$60)" || selected_brand == "MMT 85 (+$60)" || selected_brand == "MMT 105 (+$60)" ){
    $('.cobra-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "MMT UTILITY 105 (+$60)" || selected_brand == "MMT UTILITY 125 (+$60)" || selected_brand == "MMT 105 (+$60)" || selected_brand == "MMT 125 (+$60)"){
    $('.cobra-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "BASSARA E-SERIES 42"){
    $('.cobra-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' || $(this).find('input').val() == 'A' || $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  $('.cobra-mitsubishi-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.cobra-nippon-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.cobra-nippon-swatch-selector').addClass('show');
  $('.cobra-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.cobra-nippon-selector option:selected').val();
  if ( selected_brand == "NIPPON MODUS3 GOST (+$220)" || selected_brand == "N.S. PRO MODUS3 TOUR 120" || selected_brand == "N.S. PRO MODUS3 TOUR 130" || selected_brand == "N.S. PRO MODUS3 TOUR 105" || selected_brand == "N.S. PRO MODUS3 TOUR 130" ){
    $('.cobra-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "N.S. PRO MODUS3 WEDGE 105" || selected_brand == "N.S. PRO MODUS3 WEDGE 115" ){
    $('.cobra-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'WEDGE' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "N.S. PRO MODUS3 WEDGE 105" || selected_brand == "N.S. PRO 950GH" || selected_brand == "N.S. PRO MODUS3 TOUR 105" ){
    $('.cobra-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "N.S. PRO MODUS3 WEDGE 105" || selected_brand == "N.S. PRO 950GH" || selected_brand == "N.S. PRO MODUS3 TOUR 105" ){
    $('.cobra-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "N.S. PRO MODUS3 WEDGE 105" || selected_brand == "N.S. PRO MODUS3 TOUR 105" ){
    $('.cobra-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "NIPPON MODUS3 GOST TOUR (+$220)" ){
    $('.cobra-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TS' || $(this).find('input').val() == 'TX' ){
        $(this).addClass('active');
      }
    })
  }
  $('.cobra-nippon-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.cobra-project-x-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.cobra-project-x-swatch-selector').addClass('show');
  $('.cobra-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.cobra-project-x-selector option:selected').val();
  if ( selected_brand == "HZRDUS BLACK GEN 4 70" || selected_brand == "HZRDUS SMOKE RDX BLUE 60" || selected_brand == "HZRDUS SMOKE RDX BLUE 70" || selected_brand == "HZRDUS BLACK GEN 4 60" || selected_brand == "SMALL BATCH SMOKE GREEN PVD 60 (+$300)" || selected_brand == "SMALL BATCH SMOKE GREEN PVD 70 (+$300)" ){
    $('.cobra-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (6.0)' || $(this).find('input').val() == 'X (6.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HZRDUS BLACK GEN 4 60" ){
    $('.cobra-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R (5.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HZRDUS BLACK GEN 4 60" || selected_brand == "SMALL BATCH SMOKE GREEN PVD 60 (+$300)" || selected_brand == "SMALL BATCH SMOKE GREEN PVD 70 (+$300)" ){
    $('.cobra-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'TX (6.5)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "CATALYST 80" || selected_brand == "HZRDUS SMOKE RDX BLACK 90" || selected_brand == "PROJECT X (+$30)" || selected_brand == "PROJECT X LZ (+$30)" ){
    $('.cobra-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '6.0' || $(this).find('input').val() == '6.5' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "CATALYST 60" || selected_brand == "PROJECT X LZ (+$30)" || selected_brand == "CATALYST 60"){
    $('.cobra-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == '5.5' ){
        $(this).addClass('active');
      }
    })
  }
  $('.cobra-project-x-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.cobra-true-temper-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.cobra-true-temper-swatch-selector').addClass('show');
  $('.cobra-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.cobra-true-temper-selector option:selected').val();
  if ( selected_brand == "DYNAMIC GOLD" ){
    $('.cobra-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R300' || $(this).find('input').val() == 'S300' || $(this).find('input').val() == 'S400' || $(this).find('input').val() == 'X100' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "DYNAMIC GOLD 105" ){
    $('.cobra-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R300' || $(this).find('input').val() == 'S300' || $(this).find('input').val() == 'X100' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "DYNAMIC GOLD 120" ){
    $('.cobra-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S300' || $(this).find('input').val() == 'X100' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "DYNAMIC GOLD TOUR ISSUE (+$30)" ){
    $('.cobra-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S400' || $(this).find('input').val() == 'X100' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "DYNAMIC GOLD X7 (+$30)" ){
    $('.cobra-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X7' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "ELEVATE MPH 95" ){
    $('.cobra-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' || $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "DYNAMIC GOLD" ){
    $('.cobra-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S200' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "DYNAMIC GOLD BLACK" ){
    $('.cobra-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S400' ){
        $(this).addClass('active');
      }
    })
  }
  $('.cobra-true-temper-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.cobra-ust-mamiya-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.cobra-ust-mamiya-swatch-selector').addClass('show');
  $('.cobra-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.cobra-ust-mamiya-selector option:selected').val();
  if ( selected_brand == "HELIUM NANOCORE 4" ){
    $('.cobra-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L (F1)' || $(this).find('input').val() == 'A (F2)' || $(this).find('input').val() == 'R (F3)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "HELIUM NANOCORE 5" ){
    $('.cobra-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S (F4)' || $(this).find('input').val() == 'A (F2)' || $(this).find('input').val() == 'R (F3)' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "RECOIL 460 ESX" || selected_brand == "RECOIL 95 (+$30)" || selected_brand == "RECOIL 110 (+$30)" ){
    $('.cobra-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' || $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "RECOIL 95 (+$30)" || selected_brand == "RECOIL 460 ESX" || selected_brand == "RECOIL 65" ){
    $('.cobra-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "RECOIL 460 ESX" || selected_brand == "RECOIL 65" ){
    $('.cobra-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'A' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "RECOIL 450 ESX" ){
    $('.cobra-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'L' ){
        $(this).addClass('active');
      }
    })
  }
  $('.cobra-ust-mamiya-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})

$(document).on('change', '.cobra-va-composites-selector', function(){
  $('.additional-swatch-selector').removeClass('show');
  $('.cobra-va-composites-swatch-selector').addClass('show');
  $('.cobra-va-composites-swatch-selector').find('.spb-productoptionswatchwrapper').removeClass('active');
  var selected_brand = $('.cobra-va-composites-selector option:selected').val();
  if ( selected_brand == "VA BADDAZZ 50 (+$130)" ){
    $('.cobra-va-composites-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'R' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "VA BADDAZZ 60 (+$130)" || selected_brand == "VA BADDAZZ 65 (+$130)" ){
    $('.cobra-va-composites-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'S' ){
        $(this).addClass('active');
      }
    })
  }
  if ( selected_brand == "VA BADDAZZ 65 (+$130)" ){
    $('.cobra-va-composites-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
      if ( $(this).find('input').val() == 'X' ){
        $(this).addClass('active');
      }
    })
  }
  $('.cobra-va-composites-swatch-selector').find('.spb-productoptionswatchwrapper').each(function(){
    if ( $(this).hasClass('active') ){
      $(this).find('input').prop("checked", true);
      return false;
    }
  })
})


$(window).on('load', function(){
  var current_customizable_price = $(".customizable-product .infiniteoptions-price span").text();
  if ( current_customizable_price ){
    $(".additional-price").text(" - " + current_customizable_price);
  }
})

$(".customizable-product .infiniteoptions-price span").on('DOMSubtreeModified',function(){
  $(".additional-price").text(" - " + $(this).text());
});